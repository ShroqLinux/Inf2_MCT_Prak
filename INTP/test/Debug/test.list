
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c16c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800c2fc  0800c2fc  0000d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c36c  0800c36c  0000e080  2**0
                  CONTENTS
  4 .ARM          00000008  0800c36c  0800c36c  0000d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c374  0800c374  0000e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c374  0800c374  0000d374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c378  0800c378  0000d378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800c37c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e080  2**0
                  CONTENTS
 10 .bss          000053e8  20000080  20000080  0000e080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005468  20005468  0000e080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002352e  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053d6  00000000  00000000  000315de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea0  00000000  00000000  000369b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017a9  00000000  00000000  00038858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a19  00000000  00000000  0003a001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000278bf  00000000  00000000  00040a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de753  00000000  00000000  000682d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146a2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008598  00000000  00000000  00146a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014f008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c2e4 	.word	0x0800c2e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800c2e4 	.word	0x0800c2e4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc6c 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81e 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f950 	bl	8000770 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f884 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8b0 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8de 	bl	8000698 <MX_SPI1_Init>
  MX_TIM7_Init();
 80004dc:	f000 f912 	bl	8000704 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e0:	f008 fb30 	bl	8008b44 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e4:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <main+0x3c>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <main+0x40>)
 80004ea:	f008 fb75 	bl	8008bd8 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <main+0x44>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f4:	f008 fb4a 	bl	8008b8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <main+0x38>
 80004fc:	0800c330 	.word	0x0800c330
 8000500:	0800096d 	.word	0x0800096d
 8000504:	200001d8 	.word	0x200001d8

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00b fe48 	bl	800c1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fe96 	bl	80042c0 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9f9 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 f8f7 	bl	80047b0 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9e2 	bl	8000990 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	@ (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	@ (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	@ (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	@ (800062c <MX_I2C1_Init+0x50>)
 800061a:	f003 f86d 	bl	80036f8 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f9b4 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000009c 	.word	0x2000009c
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	@ (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	@ (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	@ (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2S3_Init+0x54>)
 8000678:	f003 f982 	bl	8003980 <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f985 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000f0 	.word	0x200000f0
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	@ (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f004 fbaf 	bl	8004e4c <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f94c 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000138 	.word	0x20000138
 8000700:	40013000 	.word	0x40013000

08000704 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000714:	4a15      	ldr	r2, [pc, #84]	@ (800076c <MX_TIM7_Init+0x68>)
 8000716:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000718:	4b13      	ldr	r3, [pc, #76]	@ (8000768 <MX_TIM7_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000726:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800072a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_TIM7_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000732:	480d      	ldr	r0, [pc, #52]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000734:	f004 fc13 	bl	8004f5e <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800073e:	f000 f927 	bl	8000990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <MX_TIM7_Init+0x64>)
 8000750:	f004 fd00 	bl	8005154 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800075a:	f000 f919 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000190 	.word	0x20000190
 800076c:	40001400 	.word	0x40001400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b72      	ldr	r3, [pc, #456]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a71      	ldr	r2, [pc, #452]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b6f      	ldr	r3, [pc, #444]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b6b      	ldr	r3, [pc, #428]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a6a      	ldr	r2, [pc, #424]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b68      	ldr	r3, [pc, #416]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b64      	ldr	r3, [pc, #400]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a63      	ldr	r2, [pc, #396]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b61      	ldr	r3, [pc, #388]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b5d      	ldr	r3, [pc, #372]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b56      	ldr	r3, [pc, #344]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a55      	ldr	r2, [pc, #340]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b53      	ldr	r3, [pc, #332]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b4f      	ldr	r3, [pc, #316]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a4e      	ldr	r2, [pc, #312]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b4c      	ldr	r3, [pc, #304]	@ (8000954 <MX_GPIO_Init+0x1e4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4849      	ldr	r0, [pc, #292]	@ (8000958 <MX_GPIO_Init+0x1e8>)
 8000834:	f000 fdf8 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	4847      	ldr	r0, [pc, #284]	@ (800095c <MX_GPIO_Init+0x1ec>)
 800083e:	f000 fdf3 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000842:	2200      	movs	r2, #0
 8000844:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000848:	4845      	ldr	r0, [pc, #276]	@ (8000960 <MX_GPIO_Init+0x1f0>)
 800084a:	f000 fded 	bl	8001428 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800084e:	2308      	movs	r3, #8
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	483c      	ldr	r0, [pc, #240]	@ (8000958 <MX_GPIO_Init+0x1e8>)
 8000866:	f000 fc43 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086a:	2301      	movs	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4836      	ldr	r0, [pc, #216]	@ (800095c <MX_GPIO_Init+0x1ec>)
 8000882:	f000 fc35 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000886:	2308      	movs	r3, #8
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000896:	2305      	movs	r3, #5
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	482e      	ldr	r0, [pc, #184]	@ (800095c <MX_GPIO_Init+0x1ec>)
 80008a2:	f000 fc25 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008aa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	482a      	ldr	r0, [pc, #168]	@ (8000964 <MX_GPIO_Init+0x1f4>)
 80008bc:	f000 fc18 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008c0:	2304      	movs	r3, #4
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4825      	ldr	r0, [pc, #148]	@ (8000968 <MX_GPIO_Init+0x1f8>)
 80008d4:	f000 fc0c 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ea:	2305      	movs	r3, #5
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	@ (8000968 <MX_GPIO_Init+0x1f8>)
 80008f6:	f000 fbfb 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008fa:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	2301      	movs	r3, #1
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fbec 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000918:	2320      	movs	r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_GPIO_Init+0x1f0>)
 800092c:	f000 fbe0 	bl	80010f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000934:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <MX_GPIO_Init+0x1e8>)
 8000946:	f000 fbd3 	bl	80010f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020800 	.word	0x40020800
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40020000 	.word	0x40020000
 8000968:	40020400 	.word	0x40020400

0800096c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000974:	f00b f858 	bl	800ba28 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, 13);
 8000978:	210d      	movs	r1, #13
 800097a:	4804      	ldr	r0, [pc, #16]	@ (800098c <StartDefaultTask+0x20>)
 800097c:	f000 fd6d 	bl	800145a <HAL_GPIO_TogglePin>
    osDelay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f008 f9bb 	bl	8008cfc <osDelay>
	HAL_GPIO_TogglePin(GPIOD, 13);
 8000986:	bf00      	nop
 8000988:	e7f6      	b.n	8000978 <StartDefaultTask+0xc>
 800098a:	bf00      	nop
 800098c:	40020c00 	.word	0x40020c00

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_MspInit+0x54>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <HAL_MspInit+0x54>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_MspInit+0x54>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_MspInit+0x54>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	210f      	movs	r1, #15
 80009de:	f06f 0001 	mvn.w	r0, #1
 80009e2:	f000 fb4e 	bl	8001082 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a19      	ldr	r2, [pc, #100]	@ (8000a78 <HAL_I2C_MspInit+0x84>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d12c      	bne.n	8000a70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a17      	ldr	r2, [pc, #92]	@ (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b15      	ldr	r3, [pc, #84]	@ (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a38:	2312      	movs	r3, #18
 8000a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a44:	2304      	movs	r3, #4
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <HAL_I2C_MspInit+0x8c>)
 8000a50:	f000 fb4e 	bl	80010f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a07      	ldr	r2, [pc, #28]	@ (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b05      	ldr	r3, [pc, #20]	@ (8000a7c <HAL_I2C_MspInit+0x88>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	@ 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40005400 	.word	0x40005400
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020400 	.word	0x40020400

08000a84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	@ 0x38
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a31      	ldr	r2, [pc, #196]	@ (8000b74 <HAL_I2S_MspInit+0xf0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d15a      	bne.n	8000b6a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ab8:	23c0      	movs	r3, #192	@ 0xc0
 8000aba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f004 f87f 	bl	8004bc8 <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ad0:	f7ff ff5e 	bl	8000990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	4a26      	ldr	r2, [pc, #152]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000ade:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae4:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b00:	4b1d      	ldr	r3, [pc, #116]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a18      	ldr	r2, [pc, #96]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1c:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <HAL_I2S_MspInit+0xf4>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b28:	2310      	movs	r3, #16
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b40:	4619      	mov	r1, r3
 8000b42:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <HAL_I2S_MspInit+0xf8>)
 8000b44:	f000 fad4 	bl	80010f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b48:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b62:	4619      	mov	r1, r3
 8000b64:	4806      	ldr	r0, [pc, #24]	@ (8000b80 <HAL_I2S_MspInit+0xfc>)
 8000b66:	f000 fac3 	bl	80010f0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	@ 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40003c00 	.word	0x40003c00
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020800 	.word	0x40020800

08000b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	@ 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	@ (8000c08 <HAL_SPI_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	@ (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bae:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	@ (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_SPI_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bde:	23e0      	movs	r3, #224	@ 0xe0
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <HAL_SPI_MspInit+0x8c>)
 8000bfa:	f000 fa79 	bl	80010f0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	@ 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40013000 	.word	0x40013000
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0b      	ldr	r2, [pc, #44]	@ (8000c50 <HAL_TIM_Base_MspInit+0x3c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d10d      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a09      	ldr	r2, [pc, #36]	@ (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <HAL_TIM_Base_MspInit+0x40>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40001400 	.word	0x40001400
 8000c54:	40023800 	.word	0x40023800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 f8d7 	bl	8000e44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c96:	f009 fe47 	bl	800a928 <xTaskGetSchedulerState>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d001      	beq.n	8000ca4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ca0:	f00a fc42 	bl	800b528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <OTG_FS_IRQHandler+0x10>)
 8000cae:	f000 fecf 	bl	8001a50 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20004f40 	.word	0x20004f40

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f00b fa76 	bl	800c1dc <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	200001dc 	.word	0x200001dc
 8000d24:	20005468 	.word	0x20005468

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d50:	f7ff ffea 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f00b fa35 	bl	800c1e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fb9f 	bl	80004c0 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d90:	0800c37c 	.word	0x0800c37c
  ldr r2, =_sbss
 8000d94:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d98:	20005468 	.word	0x20005468

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f94f 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f000 f808 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fde2 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dec:	4b12      	ldr	r3, [pc, #72]	@ (8000e38 <HAL_InitTick+0x54>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_InitTick+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4619      	mov	r1, r3
 8000df6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f967 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00e      	b.n	8000e30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2b0f      	cmp	r3, #15
 8000e16:	d80a      	bhi.n	8000e2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f000 f92f 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e24:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <HAL_InitTick+0x5c>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	e000      	b.n	8000e30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	20000004 	.word	0x20000004

08000e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_IncTick+0x20>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4413      	add	r3, r2
 8000e54:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <HAL_IncTick+0x24>)
 8000e56:	6013      	str	r3, [r2, #0]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000008 	.word	0x20000008
 8000e68:	200001e0 	.word	0x200001e0

08000e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e70:	4b03      	ldr	r3, [pc, #12]	@ (8000e80 <HAL_GetTick+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	200001e0 	.word	0x200001e0

08000e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e8c:	f7ff ffee 	bl	8000e6c <HAL_GetTick>
 8000e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e9c:	d005      	beq.n	8000eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <HAL_Delay+0x44>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eaa:	bf00      	nop
 8000eac:	f7ff ffde 	bl	8000e6c <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d8f7      	bhi.n	8000eac <HAL_Delay+0x28>
  {
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000008 	.word	0x20000008

08000ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f18:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <__NVIC_GetPriorityGrouping+0x18>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	f003 0307 	and.w	r3, r3, #7
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db0b      	blt.n	8000f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	f003 021f 	and.w	r2, r3, #31
 8000f48:	4907      	ldr	r1, [pc, #28]	@ (8000f68 <__NVIC_EnableIRQ+0x38>)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	2001      	movs	r0, #1
 8000f52:	fa00 f202 	lsl.w	r2, r0, r2
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	@ (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	@ (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	@ 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	@ 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff8e 	bl	8000f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff29 	bl	8000ecc <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff3e 	bl	8000f14 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff8e 	bl	8000fc0 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5d 	bl	8000f6c <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff31 	bl	8000f30 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	@ 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
 800110a:	e16b      	b.n	80013e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800110c:	2201      	movs	r2, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	429a      	cmp	r2, r3
 8001126:	f040 815a 	bne.w	80013de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b01      	cmp	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800113e:	2b02      	cmp	r3, #2
 8001140:	d130      	bne.n	80011a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	2203      	movs	r2, #3
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	091b      	lsrs	r3, r3, #4
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	69b9      	ldr	r1, [r7, #24]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80b4 	beq.w	80013de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b60      	ldr	r3, [pc, #384]	@ (80013fc <HAL_GPIO_Init+0x30c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	4a5f      	ldr	r2, [pc, #380]	@ (80013fc <HAL_GPIO_Init+0x30c>)
 8001280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001284:	6453      	str	r3, [r2, #68]	@ 0x44
 8001286:	4b5d      	ldr	r3, [pc, #372]	@ (80013fc <HAL_GPIO_Init+0x30c>)
 8001288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800128a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001292:	4a5b      	ldr	r2, [pc, #364]	@ (8001400 <HAL_GPIO_Init+0x310>)
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f003 0303 	and.w	r3, r3, #3
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a52      	ldr	r2, [pc, #328]	@ (8001404 <HAL_GPIO_Init+0x314>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d02b      	beq.n	8001316 <HAL_GPIO_Init+0x226>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a51      	ldr	r2, [pc, #324]	@ (8001408 <HAL_GPIO_Init+0x318>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d025      	beq.n	8001312 <HAL_GPIO_Init+0x222>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a50      	ldr	r2, [pc, #320]	@ (800140c <HAL_GPIO_Init+0x31c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d01f      	beq.n	800130e <HAL_GPIO_Init+0x21e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001410 <HAL_GPIO_Init+0x320>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d019      	beq.n	800130a <HAL_GPIO_Init+0x21a>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001414 <HAL_GPIO_Init+0x324>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d013      	beq.n	8001306 <HAL_GPIO_Init+0x216>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001418 <HAL_GPIO_Init+0x328>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d00d      	beq.n	8001302 <HAL_GPIO_Init+0x212>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	@ (800141c <HAL_GPIO_Init+0x32c>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_GPIO_Init+0x20e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001420 <HAL_GPIO_Init+0x330>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d101      	bne.n	80012fa <HAL_GPIO_Init+0x20a>
 80012f6:	2307      	movs	r3, #7
 80012f8:	e00e      	b.n	8001318 <HAL_GPIO_Init+0x228>
 80012fa:	2308      	movs	r3, #8
 80012fc:	e00c      	b.n	8001318 <HAL_GPIO_Init+0x228>
 80012fe:	2306      	movs	r3, #6
 8001300:	e00a      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001302:	2305      	movs	r3, #5
 8001304:	e008      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001306:	2304      	movs	r3, #4
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x228>
 800130a:	2303      	movs	r3, #3
 800130c:	e004      	b.n	8001318 <HAL_GPIO_Init+0x228>
 800130e:	2302      	movs	r3, #2
 8001310:	e002      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_GPIO_Init+0x228>
 8001316:	2300      	movs	r3, #0
 8001318:	69fa      	ldr	r2, [r7, #28]
 800131a:	f002 0203 	and.w	r2, r2, #3
 800131e:	0092      	lsls	r2, r2, #2
 8001320:	4093      	lsls	r3, r2
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001328:	4935      	ldr	r1, [pc, #212]	@ (8001400 <HAL_GPIO_Init+0x310>)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	3302      	adds	r3, #2
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001336:	4b3b      	ldr	r3, [pc, #236]	@ (8001424 <HAL_GPIO_Init+0x334>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	43db      	mvns	r3, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4013      	ands	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800135a:	4a32      	ldr	r2, [pc, #200]	@ (8001424 <HAL_GPIO_Init+0x334>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001360:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <HAL_GPIO_Init+0x334>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001384:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <HAL_GPIO_Init+0x334>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800138a:	4b26      	ldr	r3, [pc, #152]	@ (8001424 <HAL_GPIO_Init+0x334>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001424 <HAL_GPIO_Init+0x334>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <HAL_GPIO_Init+0x334>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013d8:	4a12      	ldr	r2, [pc, #72]	@ (8001424 <HAL_GPIO_Init+0x334>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b0f      	cmp	r3, #15
 80013e8:	f67f ae90 	bls.w	800110c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3724      	adds	r7, #36	@ 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40013800 	.word	0x40013800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40021c00 	.word	0x40021c00
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146c:	887a      	ldrh	r2, [r7, #2]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	041a      	lsls	r2, r3, #16
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43d9      	mvns	r1, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	400b      	ands	r3, r1
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b086      	sub	sp, #24
 8001492:	af02      	add	r7, sp, #8
 8001494:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e059      	b.n	8001554 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f00a fb08 	bl	800bad0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2203      	movs	r2, #3
 80014c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014ce:	d102      	bne.n	80014d6 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 ff2b 	bl	8005336 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6818      	ldr	r0, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7c1a      	ldrb	r2, [r3, #16]
 80014e8:	f88d 2000 	strb.w	r2, [sp]
 80014ec:	3304      	adds	r3, #4
 80014ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f0:	f003 feac 	bl	800524c <USB_CoreInit>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e026      	b.n	8001554 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f003 ff23 	bl	8005358 <USB_SetCurrentMode>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e017      	b.n	8001554 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6818      	ldr	r0, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7c1a      	ldrb	r2, [r3, #16]
 800152c:	f88d 2000 	strb.w	r2, [sp]
 8001530:	3304      	adds	r3, #4
 8001532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001534:	f004 f8c6 	bl	80056c4 <USB_HostInit>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2202      	movs	r2, #2
 8001542:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e004      	b.n	8001554 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	@ 0x2c
 8001560:	af04      	add	r7, sp, #16
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	4608      	mov	r0, r1
 8001566:	4611      	mov	r1, r2
 8001568:	461a      	mov	r2, r3
 800156a:	4603      	mov	r3, r0
 800156c:	70fb      	strb	r3, [r7, #3]
 800156e:	460b      	mov	r3, r1
 8001570:	70bb      	strb	r3, [r7, #2]
 8001572:	4613      	mov	r3, r2
 8001574:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001576:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001578:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001580:	2b01      	cmp	r3, #1
 8001582:	d101      	bne.n	8001588 <HAL_HCD_HC_Init+0x2c>
 8001584:	2302      	movs	r3, #2
 8001586:	e09d      	b.n	80016c4 <HAL_HCD_HC_Init+0x168>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001590:	78fa      	ldrb	r2, [r7, #3]
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4613      	mov	r3, r2
 8001596:	011b      	lsls	r3, r3, #4
 8001598:	1a9b      	subs	r3, r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	3319      	adds	r3, #25
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015a4:	78fa      	ldrb	r2, [r7, #3]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	3314      	adds	r3, #20
 80015b4:	787a      	ldrb	r2, [r7, #1]
 80015b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015b8:	78fa      	ldrb	r2, [r7, #3]
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4613      	mov	r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3315      	adds	r3, #21
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015cc:	78fa      	ldrb	r2, [r7, #3]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a9b      	subs	r3, r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	3326      	adds	r3, #38	@ 0x26
 80015dc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80015e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	78bb      	ldrb	r3, [r7, #2]
 80015e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015ea:	b2d8      	uxtb	r0, r3
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	3316      	adds	r3, #22
 80015fa:	4602      	mov	r2, r0
 80015fc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fbc8 	bl	8001d98 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001608:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800160c:	2b00      	cmp	r3, #0
 800160e:	da0a      	bge.n	8001626 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	1a9b      	subs	r3, r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	440b      	add	r3, r1
 800161e:	3317      	adds	r3, #23
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	e009      	b.n	800163a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	1a9b      	subs	r3, r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	3317      	adds	r3, #23
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f004 f9a4 	bl	800598c <USB_GetHostSpeed>
 8001644:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001646:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800164a:	2b01      	cmp	r3, #1
 800164c:	d10b      	bne.n	8001666 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800164e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001652:	2b01      	cmp	r3, #1
 8001654:	d107      	bne.n	8001666 <HAL_HCD_HC_Init+0x10a>
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d104      	bne.n	8001666 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	2bbc      	cmp	r3, #188	@ 0xbc
 8001660:	d901      	bls.n	8001666 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001662:	23bc      	movs	r3, #188	@ 0xbc
 8001664:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001666:	78fa      	ldrb	r2, [r7, #3]
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4613      	mov	r3, r2
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a9b      	subs	r3, r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	440b      	add	r3, r1
 8001674:	3318      	adds	r3, #24
 8001676:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800167a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	b298      	uxth	r0, r3
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	3328      	adds	r3, #40	@ 0x28
 8001690:	4602      	mov	r2, r0
 8001692:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	b29b      	uxth	r3, r3
 800169c:	787c      	ldrb	r4, [r7, #1]
 800169e:	78ba      	ldrb	r2, [r7, #2]
 80016a0:	78f9      	ldrb	r1, [r7, #3]
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4623      	mov	r3, r4
 80016b2:	f004 f993 	bl	80059dc <USB_HC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	371c      	adds	r7, #28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}

080016cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_HCD_HC_Halt+0x1e>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e00f      	b.n	800170a <HAL_HCD_HC_Halt+0x3e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	4611      	mov	r1, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fd25 	bl	800614a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	4608      	mov	r0, r1
 800171e:	4611      	mov	r1, r2
 8001720:	461a      	mov	r2, r3
 8001722:	4603      	mov	r3, r0
 8001724:	70fb      	strb	r3, [r7, #3]
 8001726:	460b      	mov	r3, r1
 8001728:	70bb      	strb	r3, [r7, #2]
 800172a:	4613      	mov	r3, r2
 800172c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3317      	adds	r3, #23
 800173e:	78ba      	ldrb	r2, [r7, #2]
 8001740:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3326      	adds	r3, #38	@ 0x26
 8001752:	787a      	ldrb	r2, [r7, #1]
 8001754:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001756:	7c3b      	ldrb	r3, [r7, #16]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d114      	bne.n	8001786 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800175c:	78fa      	ldrb	r2, [r7, #3]
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	1a9b      	subs	r3, r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	332a      	adds	r3, #42	@ 0x2a
 800176c:	2203      	movs	r2, #3
 800176e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001770:	78fa      	ldrb	r2, [r7, #3]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	1a9b      	subs	r3, r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3319      	adds	r3, #25
 8001780:	7f3a      	ldrb	r2, [r7, #28]
 8001782:	701a      	strb	r2, [r3, #0]
 8001784:	e009      	b.n	800179a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	1a9b      	subs	r3, r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	332a      	adds	r3, #42	@ 0x2a
 8001796:	2202      	movs	r2, #2
 8001798:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800179a:	787b      	ldrb	r3, [r7, #1]
 800179c:	2b03      	cmp	r3, #3
 800179e:	f200 8102 	bhi.w	80019a6 <HAL_HCD_HC_SubmitRequest+0x292>
 80017a2:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	08001991 	.word	0x08001991
 80017b0:	0800187d 	.word	0x0800187d
 80017b4:	08001907 	.word	0x08001907
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80017b8:	7c3b      	ldrb	r3, [r7, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	f040 80f5 	bne.w	80019aa <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80017c0:	78bb      	ldrb	r3, [r7, #2]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d12d      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80017c6:	8b3b      	ldrh	r3, [r7, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80017cc:	78fa      	ldrb	r2, [r7, #3]
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	011b      	lsls	r3, r3, #4
 80017d4:	1a9b      	subs	r3, r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	333d      	adds	r3, #61	@ 0x3d
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80017e0:	78fa      	ldrb	r2, [r7, #3]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	1a9b      	subs	r3, r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	333d      	adds	r3, #61	@ 0x3d
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	1a9b      	subs	r3, r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	332a      	adds	r3, #42	@ 0x2a
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800180a:	e0ce      	b.n	80019aa <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180c:	78fa      	ldrb	r2, [r7, #3]
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	1a9b      	subs	r3, r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	332a      	adds	r3, #42	@ 0x2a
 800181c:	2202      	movs	r2, #2
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e0c3      	b.n	80019aa <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	011b      	lsls	r3, r3, #4
 800182a:	1a9b      	subs	r3, r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	440b      	add	r3, r1
 8001830:	331a      	adds	r3, #26
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	f040 80b8 	bne.w	80019aa <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	6879      	ldr	r1, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	011b      	lsls	r3, r3, #4
 8001842:	1a9b      	subs	r3, r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	333c      	adds	r3, #60	@ 0x3c
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10a      	bne.n	8001866 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	1a9b      	subs	r3, r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	332a      	adds	r3, #42	@ 0x2a
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
      break;
 8001864:	e0a1      	b.n	80019aa <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a9b      	subs	r3, r3, r2
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	332a      	adds	r3, #42	@ 0x2a
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
      break;
 800187a:	e096      	b.n	80019aa <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800187c:	78bb      	ldrb	r3, [r7, #2]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d120      	bne.n	80018c4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	333d      	adds	r3, #61	@ 0x3d
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	332a      	adds	r3, #42	@ 0x2a
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018ac:	e07e      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	332a      	adds	r3, #42	@ 0x2a
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e073      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018c4:	78fa      	ldrb	r2, [r7, #3]
 80018c6:	6879      	ldr	r1, [r7, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	1a9b      	subs	r3, r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	440b      	add	r3, r1
 80018d2:	333c      	adds	r3, #60	@ 0x3c
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d10a      	bne.n	80018f0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018da:	78fa      	ldrb	r2, [r7, #3]
 80018dc:	6879      	ldr	r1, [r7, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	011b      	lsls	r3, r3, #4
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	440b      	add	r3, r1
 80018e8:	332a      	adds	r3, #42	@ 0x2a
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
      break;
 80018ee:	e05d      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f0:	78fa      	ldrb	r2, [r7, #3]
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	011b      	lsls	r3, r3, #4
 80018f8:	1a9b      	subs	r3, r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	440b      	add	r3, r1
 80018fe:	332a      	adds	r3, #42	@ 0x2a
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
      break;
 8001904:	e052      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d120      	bne.n	800194e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	333d      	adds	r3, #61	@ 0x3d
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	332a      	adds	r3, #42	@ 0x2a
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001936:	e039      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	332a      	adds	r3, #42	@ 0x2a
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
      break;
 800194c:	e02e      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	333c      	adds	r3, #60	@ 0x3c
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10a      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	332a      	adds	r3, #42	@ 0x2a
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
      break;
 8001978:	e018      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	332a      	adds	r3, #42	@ 0x2a
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
      break;
 800198e:	e00d      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	011b      	lsls	r3, r3, #4
 8001998:	1a9b      	subs	r3, r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	332a      	adds	r3, #42	@ 0x2a
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
      break;
 80019a4:	e002      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019a6:	bf00      	nop
 80019a8:	e000      	b.n	80019ac <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019aa:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	332c      	adds	r3, #44	@ 0x2c
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	8b39      	ldrh	r1, [r7, #24]
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4403      	add	r3, r0
 80019d0:	3334      	adds	r3, #52	@ 0x34
 80019d2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	4613      	mov	r3, r2
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	440b      	add	r3, r1
 80019e2:	334c      	adds	r3, #76	@ 0x4c
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	6879      	ldr	r1, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	1a9b      	subs	r3, r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	3338      	adds	r3, #56	@ 0x38
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	1a9b      	subs	r3, r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	3315      	adds	r3, #21
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a10:	78fa      	ldrb	r2, [r7, #3]
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	1a9b      	subs	r3, r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	334d      	adds	r3, #77	@ 0x4d
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	3310      	adds	r3, #16
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	1d19      	adds	r1, r3, #4
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	799b      	ldrb	r3, [r3, #6]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f004 f8f8 	bl	8005c34 <USB_HC_StartXfer>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop

08001a50 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f003 fdec 	bl	8005644 <USB_GetMode>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	f040 80fb 	bne.w	8001c6a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fdaf 	bl	80055dc <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80f1 	beq.w	8001c68 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fda6 	bl	80055dc <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a9a:	d104      	bne.n	8001aa6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f003 fd96 	bl	80055dc <USB_ReadInterrupts>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001aba:	d104      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f003 fd86 	bl	80055dc <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001ad6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001ada:	d104      	bne.n	8001ae6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ae4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f003 fd76 	bl	80055dc <USB_ReadInterrupts>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d103      	bne.n	8001b02 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2202      	movs	r2, #2
 8001b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fd68 	bl	80055dc <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b16:	d120      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b20:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d113      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b32:	2110      	movs	r1, #16
 8001b34:	6938      	ldr	r0, [r7, #16]
 8001b36:	f003 fc5b 	bl	80053f0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b3a:	6938      	ldr	r0, [r7, #16]
 8001b3c:	f003 fc8a 	bl	8005454 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7a5b      	ldrb	r3, [r3, #9]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d105      	bne.n	8001b54 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fe7c 	bl	800584c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f00a f839 	bl	800bbcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 fd3c 	bl	80055dc <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b6e:	d102      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f001 fd4d 	bl	8003610 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 fd2e 	bl	80055dc <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d106      	bne.n	8001b98 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f00a f802 	bl	800bb94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2208      	movs	r2, #8
 8001b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fd1d 	bl	80055dc <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bac:	d139      	bne.n	8001c22 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f004 fab8 	bl	8006128 <USB_HC_ReadInterrupt>
 8001bb8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e025      	b.n	8001c0c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	015a      	lsls	r2, r3, #5
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bea:	d106      	bne.n	8001bfa <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f905 	bl	8001e02 <HCD_HC_IN_IRQHandler>
 8001bf8:	e005      	b.n	8001c06 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 ff67 	bl	8002ad4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	795b      	ldrb	r3, [r3, #5]
 8001c10:	461a      	mov	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d3d3      	bcc.n	8001bc0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fcd8 	bl	80055dc <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b10      	cmp	r3, #16
 8001c34:	d101      	bne.n	8001c3a <HAL_HCD_IRQHandler+0x1ea>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_HCD_IRQHandler+0x1ec>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d014      	beq.n	8001c6a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0210 	bic.w	r2, r2, #16
 8001c4e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f001 fbfe 	bl	8003452 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f042 0210 	orr.w	r2, r2, #16
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e000      	b.n	8001c6a <HAL_HCD_IRQHandler+0x21a>
      return;
 8001c68:	bf00      	nop
    }
  }
}
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_HCD_Start+0x16>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e013      	b.n	8001cae <HAL_HCD_Start+0x3e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fe40 	bl	800591a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fb38 	bl	8005314 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_HCD_Stop+0x16>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e00d      	b.n	8001ce8 <HAL_HCD_Stop+0x32>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f004 fb93 	bl	8006404 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fde2 	bl	80058c6 <USB_ResetPort>
 8001d02:	4603      	mov	r3, r0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d18:	78fa      	ldrb	r2, [r7, #3]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	334c      	adds	r3, #76	@ 0x4c
 8001d28:	781b      	ldrb	r3, [r3, #0]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	4613      	mov	r3, r2
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	1a9b      	subs	r3, r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	440b      	add	r3, r1
 8001d50:	3338      	adds	r3, #56	@ 0x38
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fe24 	bl	80059ba <USB_GetCurrentFrame>
 8001d72:	4603      	mov	r3, r0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fdff 	bl	800598c <USB_GetHostSpeed>
 8001d8e:	4603      	mov	r3, r0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	331a      	adds	r3, #26
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	331b      	adds	r3, #27
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001dcc:	78fa      	ldrb	r2, [r7, #3]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3325      	adds	r3, #37	@ 0x25
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	1a9b      	subs	r3, r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3324      	adds	r3, #36	@ 0x24
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b086      	sub	sp, #24
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 fbee 	bl	8005602 <USB_ReadChInterrupts>
 8001e26:	4603      	mov	r3, r0
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d11a      	bne.n	8001e66 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e30:	78fb      	ldrb	r3, [r7, #3]
 8001e32:	015a      	lsls	r2, r3, #5
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4413      	add	r3, r2
 8001e38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2304      	movs	r3, #4
 8001e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	011b      	lsls	r3, r3, #4
 8001e4a:	1a9b      	subs	r3, r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	440b      	add	r3, r1
 8001e50:	334d      	adds	r3, #77	@ 0x4d
 8001e52:	2207      	movs	r2, #7
 8001e54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	78fa      	ldrb	r2, [r7, #3]
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f004 f973 	bl	800614a <USB_HC_Halt>
 8001e64:	e09e      	b.n	8001fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	78fa      	ldrb	r2, [r7, #3]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fbc7 	bl	8005602 <USB_ReadChInterrupts>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e7e:	d11b      	bne.n	8001eb8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e92:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	1a9b      	subs	r3, r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	334d      	adds	r3, #77	@ 0x4d
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f004 f94a 	bl	800614a <USB_HC_Halt>
 8001eb6:	e075      	b.n	8001fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 fb9e 	bl	8005602 <USB_ReadChInterrupts>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d11a      	bne.n	8001f06 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001edc:	461a      	mov	r2, r3
 8001ede:	2308      	movs	r3, #8
 8001ee0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	334d      	adds	r3, #77	@ 0x4d
 8001ef2:	2206      	movs	r2, #6
 8001ef4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	4611      	mov	r1, r2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 f923 	bl	800614a <USB_HC_Halt>
 8001f04:	e04e      	b.n	8001fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	78fa      	ldrb	r2, [r7, #3]
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fb77 	bl	8005602 <USB_ReadChInterrupts>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1e:	d11b      	bne.n	8001f58 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f32:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	334d      	adds	r3, #77	@ 0x4d
 8001f44:	2209      	movs	r2, #9
 8001f46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	78fa      	ldrb	r2, [r7, #3]
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 f8fa 	bl	800614a <USB_HC_Halt>
 8001f56:	e025      	b.n	8001fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fb4e 	bl	8005602 <USB_ReadChInterrupts>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6c:	2b80      	cmp	r3, #128	@ 0x80
 8001f6e:	d119      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	334d      	adds	r3, #77	@ 0x4d
 8001f92:	2207      	movs	r2, #7
 8001f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 f8d3 	bl	800614a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 fb28 	bl	8005602 <USB_ReadChInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fbc:	d112      	bne.n	8001fe4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f004 f8bf 	bl	800614a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fde:	6093      	str	r3, [r2, #8]
 8001fe0:	f000 bd75 	b.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	78fa      	ldrb	r2, [r7, #3]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f003 fb08 	bl	8005602 <USB_ReadChInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	f040 8128 	bne.w	800224e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	015a      	lsls	r2, r3, #5
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4413      	add	r3, r2
 8002006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800200a:	461a      	mov	r2, r3
 800200c:	2320      	movs	r3, #32
 800200e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	331b      	adds	r3, #27
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d119      	bne.n	800205a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002026:	78fa      	ldrb	r2, [r7, #3]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331b      	adds	r3, #27
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800203a:	78fb      	ldrb	r3, [r7, #3]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	0151      	lsls	r1, r2, #5
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	440a      	add	r2, r1
 8002050:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002058:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	799b      	ldrb	r3, [r3, #6]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d01b      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3330      	adds	r3, #48	@ 0x30
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	1ac9      	subs	r1, r1, r3
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4403      	add	r3, r0
 8002096:	3338      	adds	r3, #56	@ 0x38
 8002098:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	1a9b      	subs	r3, r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	334d      	adds	r3, #77	@ 0x4d
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3344      	adds	r3, #68	@ 0x44
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80020c2:	78fb      	ldrb	r3, [r7, #3]
 80020c4:	015a      	lsls	r2, r3, #5
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020ce:	461a      	mov	r2, r3
 80020d0:	2301      	movs	r3, #1
 80020d2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	3326      	adds	r3, #38	@ 0x26
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	3326      	adds	r3, #38	@ 0x26
 80020fa:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d110      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	4611      	mov	r1, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f004 f81e 	bl	800614a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800211a:	461a      	mov	r2, r3
 800211c:	2310      	movs	r3, #16
 800211e:	6093      	str	r3, [r2, #8]
 8002120:	e03d      	b.n	800219e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3326      	adds	r3, #38	@ 0x26
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d00a      	beq.n	800214e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	1a9b      	subs	r3, r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	3326      	adds	r3, #38	@ 0x26
 8002148:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800214a:	2b01      	cmp	r3, #1
 800214c:	d127      	bne.n	800219e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4413      	add	r3, r2
 8002156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	0151      	lsls	r1, r2, #5
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	440a      	add	r2, r1
 8002164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002168:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800216c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	334c      	adds	r3, #76	@ 0x4c
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	334c      	adds	r3, #76	@ 0x4c
 8002192:	781a      	ldrb	r2, [r3, #0]
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f009 fd25 	bl	800bbe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	799b      	ldrb	r3, [r3, #6]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d13b      	bne.n	800221e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021a6:	78fa      	ldrb	r2, [r7, #3]
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	1a9b      	subs	r3, r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	3338      	adds	r3, #56	@ 0x38
 80021b6:	6819      	ldr	r1, [r3, #0]
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4403      	add	r3, r0
 80021c6:	3328      	adds	r3, #40	@ 0x28
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	440b      	add	r3, r1
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4403      	add	r3, r0
 80021dc:	3328      	adds	r3, #40	@ 0x28
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8470 	beq.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	333c      	adds	r3, #60	@ 0x3c
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	f083 0301 	eor.w	r3, r3, #1
 8002206:	b2d8      	uxtb	r0, r3
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	333c      	adds	r3, #60	@ 0x3c
 8002216:	4602      	mov	r2, r0
 8002218:	701a      	strb	r2, [r3, #0]
 800221a:	f000 bc58 	b.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800221e:	78fa      	ldrb	r2, [r7, #3]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	333c      	adds	r3, #60	@ 0x3c
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	f083 0301 	eor.w	r3, r3, #1
 8002236:	b2d8      	uxtb	r0, r3
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	333c      	adds	r3, #60	@ 0x3c
 8002246:	4602      	mov	r2, r0
 8002248:	701a      	strb	r2, [r3, #0]
 800224a:	f000 bc40 	b.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f003 f9d3 	bl	8005602 <USB_ReadChInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b20      	cmp	r3, #32
 8002264:	d131      	bne.n	80022ca <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002272:	461a      	mov	r2, r3
 8002274:	2320      	movs	r3, #32
 8002276:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	331a      	adds	r3, #26
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	f040 841f 	bne.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	331b      	adds	r3, #27
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	334d      	adds	r3, #77	@ 0x4d
 80022b4:	2203      	movs	r2, #3
 80022b6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	4611      	mov	r1, r2
 80022c0:	4618      	mov	r0, r3
 80022c2:	f003 ff42 	bl	800614a <USB_HC_Halt>
 80022c6:	f000 bc02 	b.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	78fa      	ldrb	r2, [r7, #3]
 80022d0:	4611      	mov	r1, r2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f995 	bl	8005602 <USB_ReadChInterrupts>
 80022d8:	4603      	mov	r3, r0
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	f040 8305 	bne.w	80028ee <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4413      	add	r3, r2
 80022ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022f0:	461a      	mov	r2, r3
 80022f2:	2302      	movs	r3, #2
 80022f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	334d      	adds	r3, #77	@ 0x4d
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d114      	bne.n	8002336 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	334d      	adds	r3, #77	@ 0x4d
 800231c:	2202      	movs	r2, #2
 800231e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002320:	78fa      	ldrb	r2, [r7, #3]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	334c      	adds	r3, #76	@ 0x4c
 8002330:	2201      	movs	r2, #1
 8002332:	701a      	strb	r2, [r3, #0]
 8002334:	e2cc      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	334d      	adds	r3, #77	@ 0x4d
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b06      	cmp	r3, #6
 800234a:	d114      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	334d      	adds	r3, #77	@ 0x4d
 800235c:	2202      	movs	r2, #2
 800235e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334c      	adds	r3, #76	@ 0x4c
 8002370:	2205      	movs	r2, #5
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e2ac      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	334d      	adds	r3, #77	@ 0x4d
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b07      	cmp	r3, #7
 800238a:	d00b      	beq.n	80023a4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	334d      	adds	r3, #77	@ 0x4d
 800239c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800239e:	2b09      	cmp	r3, #9
 80023a0:	f040 80a6 	bne.w	80024f0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023a4:	78fa      	ldrb	r2, [r7, #3]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	1a9b      	subs	r3, r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	334d      	adds	r3, #77	@ 0x4d
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3344      	adds	r3, #68	@ 0x44
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	1a9b      	subs	r3, r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4403      	add	r3, r0
 80023d8:	3344      	adds	r3, #68	@ 0x44
 80023da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3344      	adds	r3, #68	@ 0x44
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d943      	bls.n	800247a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	1a9b      	subs	r3, r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3344      	adds	r3, #68	@ 0x44
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	331a      	adds	r3, #26
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d123      	bne.n	8002464 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	331b      	adds	r3, #27
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	331c      	adds	r3, #28
 8002440:	2200      	movs	r2, #0
 8002442:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	0151      	lsls	r1, r2, #5
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	440a      	add	r2, r1
 800245a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800245e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002462:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334c      	adds	r3, #76	@ 0x4c
 8002474:	2204      	movs	r2, #4
 8002476:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002478:	e229      	b.n	80028ce <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800247a:	78fa      	ldrb	r2, [r7, #3]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	334c      	adds	r3, #76	@ 0x4c
 800248a:	2202      	movs	r2, #2
 800248c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3326      	adds	r3, #38	@ 0x26
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3326      	adds	r3, #38	@ 0x26
 80024b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	f040 8209 	bne.w	80028ce <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80024bc:	78fb      	ldrb	r3, [r7, #3]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80024d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80024da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80024dc:	78fb      	ldrb	r3, [r7, #3]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e8:	461a      	mov	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024ee:	e1ee      	b.n	80028ce <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	334d      	adds	r3, #77	@ 0x4d
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b05      	cmp	r3, #5
 8002504:	f040 80c8 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	334d      	adds	r3, #77	@ 0x4d
 8002518:	2202      	movs	r2, #2
 800251a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	331b      	adds	r3, #27
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 81ce 	bne.w	80028d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3326      	adds	r3, #38	@ 0x26
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b03      	cmp	r3, #3
 8002548:	d16b      	bne.n	8002622 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3348      	adds	r3, #72	@ 0x48
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	1c59      	adds	r1, r3, #1
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4403      	add	r3, r0
 800256a:	3348      	adds	r3, #72	@ 0x48
 800256c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3348      	adds	r3, #72	@ 0x48
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d943      	bls.n	800260c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3348      	adds	r3, #72	@ 0x48
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	331b      	adds	r3, #27
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3344      	adds	r3, #68	@ 0x44
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d809      	bhi.n	80025d6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	331c      	adds	r3, #28
 80025d2:	2201      	movs	r2, #1
 80025d4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	015a      	lsls	r2, r3, #5
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	0151      	lsls	r1, r2, #5
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	440a      	add	r2, r1
 80025ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80025f6:	78fa      	ldrb	r2, [r7, #3]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	334c      	adds	r3, #76	@ 0x4c
 8002606:	2204      	movs	r2, #4
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e014      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	334c      	adds	r3, #76	@ 0x4c
 800261c:	2202      	movs	r2, #2
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e009      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	334c      	adds	r3, #76	@ 0x4c
 8002632:	2202      	movs	r2, #2
 8002634:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3326      	adds	r3, #38	@ 0x26
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3326      	adds	r3, #38	@ 0x26
 800265c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800265e:	2b02      	cmp	r3, #2
 8002660:	f040 8136 	bne.w	80028d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002664:	78fb      	ldrb	r3, [r7, #3]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800267a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002682:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6013      	str	r3, [r2, #0]
 8002696:	e11b      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	334d      	adds	r3, #77	@ 0x4d
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	f040 8081 	bne.w	80027b2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	334d      	adds	r3, #77	@ 0x4d
 80026c0:	2202      	movs	r2, #2
 80026c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80026c4:	78fa      	ldrb	r2, [r7, #3]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4613      	mov	r3, r2
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	1a9b      	subs	r3, r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	440b      	add	r3, r1
 80026d2:	331b      	adds	r3, #27
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80fa 	bne.w	80028d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	334c      	adds	r3, #76	@ 0x4c
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80026f0:	78fb      	ldrb	r3, [r7, #3]
 80026f2:	015a      	lsls	r2, r3, #5
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4413      	add	r3, r2
 80026f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	0151      	lsls	r1, r2, #5
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	440a      	add	r2, r1
 8002706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800270a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4413      	add	r3, r2
 8002718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	0151      	lsls	r1, r2, #5
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	440a      	add	r2, r1
 8002726:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800272a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800272e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	0151      	lsls	r1, r2, #5
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	440a      	add	r2, r1
 8002746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800274a:	f023 0320 	bic.w	r3, r3, #32
 800274e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	3326      	adds	r3, #38	@ 0x26
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	6879      	ldr	r1, [r7, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	3326      	adds	r3, #38	@ 0x26
 8002776:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002778:	2b02      	cmp	r3, #2
 800277a:	f040 80a9 	bne.w	80028d0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	015a      	lsls	r2, r3, #5
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4413      	add	r3, r2
 8002786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002794:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800279c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	e08e      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	334d      	adds	r3, #77	@ 0x4d
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d143      	bne.n	8002850 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	334d      	adds	r3, #77	@ 0x4d
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334c      	adds	r3, #76	@ 0x4c
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3326      	adds	r3, #38	@ 0x26
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3326      	adds	r3, #38	@ 0x26
 8002816:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002818:	2b02      	cmp	r3, #2
 800281a:	d159      	bne.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002832:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800283a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	015a      	lsls	r2, r3, #5
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e03f      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	334d      	adds	r3, #77	@ 0x4d
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d126      	bne.n	80028b4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	334d      	adds	r3, #77	@ 0x4d
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	3344      	adds	r3, #68	@ 0x44
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1c59      	adds	r1, r3, #1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4403      	add	r3, r0
 800289a:	3344      	adds	r3, #68	@ 0x44
 800289c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	011b      	lsls	r3, r3, #4
 80028a6:	1a9b      	subs	r3, r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	334c      	adds	r3, #76	@ 0x4c
 80028ae:	2204      	movs	r2, #4
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	e00d      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	334d      	adds	r3, #77	@ 0x4d
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	f000 8100 	beq.w	8002acc <HCD_HC_IN_IRQHandler+0xcca>
 80028cc:	e000      	b.n	80028d0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	334c      	adds	r3, #76	@ 0x4c
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f009 f97e 	bl	800bbe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80028ec:	e0ef      	b.n	8002ace <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f002 fe83 	bl	8005602 <USB_ReadChInterrupts>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002902:	2b40      	cmp	r3, #64	@ 0x40
 8002904:	d12f      	bne.n	8002966 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002912:	461a      	mov	r2, r3
 8002914:	2340      	movs	r3, #64	@ 0x40
 8002916:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334d      	adds	r3, #77	@ 0x4d
 8002928:	2205      	movs	r2, #5
 800292a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	331a      	adds	r3, #26
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d109      	bne.n	8002956 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3344      	adds	r3, #68	@ 0x44
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fbf3 	bl	800614a <USB_HC_Halt>
 8002964:	e0b3      	b.n	8002ace <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fe47 	bl	8005602 <USB_ReadChInterrupts>
 8002974:	4603      	mov	r3, r0
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b10      	cmp	r3, #16
 800297c:	f040 80a7 	bne.w	8002ace <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3326      	adds	r3, #38	@ 0x26
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d11b      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	3344      	adds	r3, #68	@ 0x44
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	334d      	adds	r3, #77	@ 0x4d
 80029ba:	2204      	movs	r2, #4
 80029bc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f003 fbbf 	bl	800614a <USB_HC_Halt>
 80029cc:	e03f      	b.n	8002a4e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3326      	adds	r3, #38	@ 0x26
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3326      	adds	r3, #38	@ 0x26
 80029f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d129      	bne.n	8002a4e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3344      	adds	r3, #68	@ 0x44
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	799b      	ldrb	r3, [r3, #6]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HCD_HC_IN_IRQHandler+0xc2a>
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	331b      	adds	r3, #27
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d110      	bne.n	8002a4e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	334d      	adds	r3, #77	@ 0x4d
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fb7e 	bl	800614a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	331b      	adds	r3, #27
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d129      	bne.n	8002ab8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	331b      	adds	r3, #27
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	0151      	lsls	r1, r2, #5
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	440a      	add	r2, r1
 8002a8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a96:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	0151      	lsls	r1, r2, #5
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	440a      	add	r2, r1
 8002aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ab2:	f043 0320 	orr.w	r3, r3, #32
 8002ab6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	6093      	str	r3, [r2, #8]
 8002aca:	e000      	b.n	8002ace <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002acc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fd85 	bl	8005602 <USB_ReadChInterrupts>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d11b      	bne.n	8002b3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	015a      	lsls	r2, r3, #5
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	4413      	add	r3, r2
 8002b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0e:	461a      	mov	r2, r3
 8002b10:	2304      	movs	r3, #4
 8002b12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334d      	adds	r3, #77	@ 0x4d
 8002b24:	2207      	movs	r2, #7
 8002b26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	4611      	mov	r1, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f003 fb0a 	bl	800614a <USB_HC_Halt>
 8002b36:	f000 bc89 	b.w	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f002 fd5d 	bl	8005602 <USB_ReadChInterrupts>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	f040 8082 	bne.w	8002c58 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b54:	78fb      	ldrb	r3, [r7, #3]
 8002b56:	015a      	lsls	r2, r3, #5
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b60:	461a      	mov	r2, r3
 8002b62:	2320      	movs	r3, #32
 8002b64:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3319      	adds	r3, #25
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d124      	bne.n	8002bc6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3319      	adds	r3, #25
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	334c      	adds	r3, #76	@ 0x4c
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334d      	adds	r3, #77	@ 0x4d
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 fac2 	bl	800614a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	331a      	adds	r3, #26
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	f040 8437 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x978>
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	331b      	adds	r3, #27
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f040 842b 	bne.w	800344c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	3326      	adds	r3, #38	@ 0x26
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d009      	beq.n	8002c20 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	331b      	adds	r3, #27
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2203      	movs	r2, #3
 8002c32:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f003 fa84 	bl	800614a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3344      	adds	r3, #68	@ 0x44
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e3f9      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 fcce 	bl	8005602 <USB_ReadChInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c70:	d111      	bne.n	8002c96 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c84:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fa5b 	bl	800614a <USB_HC_Halt>
 8002c94:	e3da      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f002 fcaf 	bl	8005602 <USB_ReadChInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d168      	bne.n	8002d80 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3344      	adds	r3, #68	@ 0x44
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fc99 	bl	8005602 <USB_ReadChInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	d112      	bne.n	8002d00 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3319      	adds	r3, #25
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	015a      	lsls	r2, r3, #5
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2340      	movs	r3, #64	@ 0x40
 8002cfe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	331b      	adds	r3, #27
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d019      	beq.n	8002d4a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	331b      	adds	r3, #27
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d2a:	78fb      	ldrb	r3, [r7, #3]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	0151      	lsls	r1, r2, #5
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	440a      	add	r2, r1
 8002d40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d48:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	2301      	movs	r3, #1
 8002d5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	334d      	adds	r3, #77	@ 0x4d
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 f9e6 	bl	800614a <USB_HC_Halt>
 8002d7e:	e365      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	4611      	mov	r1, r2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f002 fc3a 	bl	8005602 <USB_ReadChInterrupts>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d94:	2b40      	cmp	r3, #64	@ 0x40
 8002d96:	d139      	bne.n	8002e0c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	334d      	adds	r3, #77	@ 0x4d
 8002da8:	2205      	movs	r2, #5
 8002daa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	331a      	adds	r3, #26
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d109      	bne.n	8002dd6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3319      	adds	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	3344      	adds	r3, #68	@ 0x44
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 f9a9 	bl	800614a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	015a      	lsls	r2, r3, #5
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e04:	461a      	mov	r2, r3
 8002e06:	2340      	movs	r3, #64	@ 0x40
 8002e08:	6093      	str	r3, [r2, #8]
 8002e0a:	e31f      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fbf4 	bl	8005602 <USB_ReadChInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d11a      	bne.n	8002e5a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	461a      	mov	r2, r3
 8002e32:	2308      	movs	r3, #8
 8002e34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	334d      	adds	r3, #77	@ 0x4d
 8002e46:	2206      	movs	r2, #6
 8002e48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	78fa      	ldrb	r2, [r7, #3]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f003 f979 	bl	800614a <USB_HC_Halt>
 8002e58:	e2f8      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f002 fbcd 	bl	8005602 <USB_ReadChInterrupts>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b10      	cmp	r3, #16
 8002e70:	d144      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e72:	78fa      	ldrb	r2, [r7, #3]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	1a9b      	subs	r3, r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3344      	adds	r3, #68	@ 0x44
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	334d      	adds	r3, #77	@ 0x4d
 8002e96:	2204      	movs	r2, #4
 8002e98:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	3319      	adds	r3, #25
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d114      	bne.n	8002eda <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3319      	adds	r3, #25
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 f931 	bl	800614a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2310      	movs	r3, #16
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	e2a7      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fb7c 	bl	8005602 <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	f040 8083 	bne.w	800301c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	799b      	ldrb	r3, [r3, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d111      	bne.n	8002f42 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	334d      	adds	r3, #77	@ 0x4d
 8002f2e:	2207      	movs	r2, #7
 8002f30:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f905 	bl	800614a <USB_HC_Halt>
 8002f40:	e062      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3344      	adds	r3, #68	@ 0x44
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	1c59      	adds	r1, r3, #1
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	1a9b      	subs	r3, r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4403      	add	r3, r0
 8002f62:	3344      	adds	r3, #68	@ 0x44
 8002f64:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3344      	adds	r3, #68	@ 0x44
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d922      	bls.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3344      	adds	r3, #68	@ 0x44
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	334c      	adds	r3, #76	@ 0x4c
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	6879      	ldr	r1, [r7, #4]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	1a9b      	subs	r3, r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	334c      	adds	r3, #76	@ 0x4c
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f008 fe14 	bl	800bbe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002fc0:	e022      	b.n	8003008 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	334c      	adds	r3, #76	@ 0x4c
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fec:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ff4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	015a      	lsls	r2, r3, #5
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003014:	461a      	mov	r2, r3
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	6093      	str	r3, [r2, #8]
 800301a:	e217      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f002 faec 	bl	8005602 <USB_ReadChInterrupts>
 800302a:	4603      	mov	r3, r0
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003034:	d11b      	bne.n	800306e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	@ 0x4d
 8003046:	2209      	movs	r2, #9
 8003048:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f003 f879 	bl	800614a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003064:	461a      	mov	r2, r3
 8003066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800306a:	6093      	str	r3, [r2, #8]
 800306c:	e1ee      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f002 fac3 	bl	8005602 <USB_ReadChInterrupts>
 800307c:	4603      	mov	r3, r0
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	f040 81df 	bne.w	8003446 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	@ 0x4d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f040 8093 	bne.w	80031d8 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	2202      	movs	r2, #2
 80030c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	@ 0x4c
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3326      	adds	r3, #38	@ 0x26
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d00b      	beq.n	8003108 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3326      	adds	r3, #38	@ 0x26
 8003100:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003102:	2b03      	cmp	r3, #3
 8003104:	f040 8190 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	799b      	ldrb	r3, [r3, #6]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d115      	bne.n	800313c <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	333d      	adds	r3, #61	@ 0x3d
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	f083 0301 	eor.w	r3, r3, #1
 8003128:	b2d8      	uxtb	r0, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333d      	adds	r3, #61	@ 0x3d
 8003138:	4602      	mov	r2, r0
 800313a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	799b      	ldrb	r3, [r3, #6]
 8003140:	2b01      	cmp	r3, #1
 8003142:	f040 8171 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x954>
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3334      	adds	r3, #52	@ 0x34
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8165 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3334      	adds	r3, #52	@ 0x34
 800316e:	6819      	ldr	r1, [r3, #0]
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4403      	add	r3, r0
 800317e:	3328      	adds	r3, #40	@ 0x28
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	440b      	add	r3, r1
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4403      	add	r3, r0
 8003194:	3328      	adds	r3, #40	@ 0x28
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	fbb1 f3f3 	udiv	r3, r1, r3
 800319c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 813f 	beq.w	8003428 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	333d      	adds	r3, #61	@ 0x3d
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2d8      	uxtb	r0, r3
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	333d      	adds	r3, #61	@ 0x3d
 80031d2:	4602      	mov	r2, r0
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e127      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	334d      	adds	r3, #77	@ 0x4d
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d120      	bne.n	8003230 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	334d      	adds	r3, #77	@ 0x4d
 80031fe:	2202      	movs	r2, #2
 8003200:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	331b      	adds	r3, #27
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8107 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	334c      	adds	r3, #76	@ 0x4c
 800322a:	2202      	movs	r2, #2
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e0fb      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	@ 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b04      	cmp	r3, #4
 8003244:	d13a      	bne.n	80032bc <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	@ 0x4c
 800326a:	2202      	movs	r2, #2
 800326c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	331b      	adds	r3, #27
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	f040 80d1 	bne.w	8003428 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	331b      	adds	r3, #27
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800329a:	78fb      	ldrb	r3, [r7, #3]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	0151      	lsls	r1, r2, #5
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	440a      	add	r2, r1
 80032b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b8:	6053      	str	r3, [r2, #4]
 80032ba:	e0b5      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	4613      	mov	r3, r2
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	334d      	adds	r3, #77	@ 0x4d
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d114      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	334d      	adds	r3, #77	@ 0x4d
 80032e2:	2202      	movs	r2, #2
 80032e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	334c      	adds	r3, #76	@ 0x4c
 80032f6:	2202      	movs	r2, #2
 80032f8:	701a      	strb	r2, [r3, #0]
 80032fa:	e095      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b06      	cmp	r3, #6
 8003310:	d114      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	334d      	adds	r3, #77	@ 0x4d
 8003322:	2202      	movs	r2, #2
 8003324:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	4613      	mov	r3, r2
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	1a9b      	subs	r3, r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	@ 0x4c
 8003336:	2205      	movs	r2, #5
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e075      	b.n	8003428 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	1a9b      	subs	r3, r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	334d      	adds	r3, #77	@ 0x4d
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b07      	cmp	r3, #7
 8003350:	d00a      	beq.n	8003368 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334d      	adds	r3, #77	@ 0x4d
 8003362:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003364:	2b09      	cmp	r3, #9
 8003366:	d170      	bne.n	800344a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334d      	adds	r3, #77	@ 0x4d
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3344      	adds	r3, #68	@ 0x44
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	1c59      	adds	r1, r3, #1
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4403      	add	r3, r0
 800339c:	3344      	adds	r3, #68	@ 0x44
 800339e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3344      	adds	r3, #68	@ 0x44
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d914      	bls.n	80033e0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	1a9b      	subs	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	3344      	adds	r3, #68	@ 0x44
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334c      	adds	r3, #76	@ 0x4c
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033de:	e022      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334c      	adds	r3, #76	@ 0x4c
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800340a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003412:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003426:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	@ 0x4c
 8003438:	781a      	ldrb	r2, [r3, #0]
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	4619      	mov	r1, r3
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f008 fbd2 	bl	800bbe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003444:	e002      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800344a:	bf00      	nop
  }
}
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b08a      	sub	sp, #40	@ 0x28
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	0c5b      	lsrs	r3, r3, #17
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	091b      	lsrs	r3, r3, #4
 8003482:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003486:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d004      	beq.n	8003498 <HCD_RXQLVL_IRQHandler+0x46>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b05      	cmp	r3, #5
 8003492:	f000 80b6 	beq.w	8003602 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003496:	e0b7      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80b3 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	332c      	adds	r3, #44	@ 0x2c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80a7 	beq.w	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3338      	adds	r3, #56	@ 0x38
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	18d1      	adds	r1, r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	3334      	adds	r3, #52	@ 0x34
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4299      	cmp	r1, r3
 80034e2:	f200 8083 	bhi.w	80035ec <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	332c      	adds	r3, #44	@ 0x2c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	b292      	uxth	r2, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f002 f813 	bl	800552c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332c      	adds	r3, #44	@ 0x2c
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	18d1      	adds	r1, r2, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4403      	add	r3, r0
 800352a:	332c      	adds	r3, #44	@ 0x2c
 800352c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	3338      	adds	r3, #56	@ 0x38
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	18d1      	adds	r1, r2, r3
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4403      	add	r3, r0
 8003552:	3338      	adds	r3, #56	@ 0x38
 8003554:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	4413      	add	r3, r2
 800355e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	0cdb      	lsrs	r3, r3, #19
 8003566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800356a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3328      	adds	r3, #40	@ 0x28
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4293      	cmp	r3, r2
 8003584:	d13f      	bne.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03c      	beq.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035a2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035aa:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b8:	461a      	mov	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	333c      	adds	r3, #60	@ 0x3c
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	f083 0301 	eor.w	r3, r3, #1
 80035d4:	b2d8      	uxtb	r0, r3
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	333c      	adds	r3, #60	@ 0x3c
 80035e6:	4602      	mov	r2, r0
 80035e8:	701a      	strb	r2, [r3, #0]
      break;
 80035ea:	e00c      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334c      	adds	r3, #76	@ 0x4c
 80035fc:	2204      	movs	r2, #4
 80035fe:	701a      	strb	r2, [r3, #0]
      break;
 8003600:	e001      	b.n	8003606 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003606:	bf00      	nop
  }
}
 8003608:	bf00      	nop
 800360a:	3728      	adds	r7, #40	@ 0x28
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800363c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b02      	cmp	r3, #2
 8003646:	d10b      	bne.n	8003660 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b01      	cmp	r3, #1
 8003650:	d102      	bne.n	8003658 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f008 faac 	bl	800bbb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b08      	cmp	r3, #8
 8003668:	d132      	bne.n	80036d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f043 0308 	orr.w	r3, r3, #8
 8003670:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d126      	bne.n	80036ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7a5b      	ldrb	r3, [r3, #9]
 8003680:	2b02      	cmp	r3, #2
 8003682:	d113      	bne.n	80036ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800368a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800368e:	d106      	bne.n	800369e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f002 f8d8 	bl	800584c <USB_InitFSLSPClkSel>
 800369c:	e011      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f002 f8d1 	bl	800584c <USB_InitFSLSPClkSel>
 80036aa:	e00a      	b.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	79db      	ldrb	r3, [r3, #7]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d106      	bne.n	80036c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036ba:	461a      	mov	r2, r3
 80036bc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f008 faa2 	bl	800bc0c <HAL_HCD_PortEnabled_Callback>
 80036c8:	e002      	b.n	80036d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f008 faac 	bl	800bc28 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0320 	and.w	r3, r3, #32
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d103      	bne.n	80036e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f043 0320 	orr.w	r3, r3, #32
 80036e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036e8:	461a      	mov	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6013      	str	r3, [r2, #0]
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e12b      	b.n	8003962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d106      	bne.n	8003724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7fd f968 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2224      	movs	r2, #36	@ 0x24
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800375a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800375c:	f001 fa20 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8003760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	4a81      	ldr	r2, [pc, #516]	@ (800396c <HAL_I2C_Init+0x274>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d807      	bhi.n	800377c <HAL_I2C_Init+0x84>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a80      	ldr	r2, [pc, #512]	@ (8003970 <HAL_I2C_Init+0x278>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e006      	b.n	800378a <HAL_I2C_Init+0x92>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a7d      	ldr	r2, [pc, #500]	@ (8003974 <HAL_I2C_Init+0x27c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	bf94      	ite	ls
 8003784:	2301      	movls	r3, #1
 8003786:	2300      	movhi	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e0e7      	b.n	8003962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a78      	ldr	r2, [pc, #480]	@ (8003978 <HAL_I2C_Init+0x280>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	0c9b      	lsrs	r3, r3, #18
 800379c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a6a      	ldr	r2, [pc, #424]	@ (800396c <HAL_I2C_Init+0x274>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d802      	bhi.n	80037cc <HAL_I2C_Init+0xd4>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	3301      	adds	r3, #1
 80037ca:	e009      	b.n	80037e0 <HAL_I2C_Init+0xe8>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	4a69      	ldr	r2, [pc, #420]	@ (800397c <HAL_I2C_Init+0x284>)
 80037d8:	fba2 2303 	umull	r2, r3, r2, r3
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	3301      	adds	r3, #1
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	495c      	ldr	r1, [pc, #368]	@ (800396c <HAL_I2C_Init+0x274>)
 80037fc:	428b      	cmp	r3, r1
 80037fe:	d819      	bhi.n	8003834 <HAL_I2C_Init+0x13c>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	1e59      	subs	r1, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fbb1 f3f3 	udiv	r3, r1, r3
 800380e:	1c59      	adds	r1, r3, #1
 8003810:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003814:	400b      	ands	r3, r1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00a      	beq.n	8003830 <HAL_I2C_Init+0x138>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e59      	subs	r1, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fbb1 f3f3 	udiv	r3, r1, r3
 8003828:	3301      	adds	r3, #1
 800382a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382e:	e051      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003830:	2304      	movs	r3, #4
 8003832:	e04f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d111      	bne.n	8003860 <HAL_I2C_Init+0x168>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1e58      	subs	r0, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e012      	b.n	8003886 <HAL_I2C_Init+0x18e>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e58      	subs	r0, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6859      	ldr	r1, [r3, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	0099      	lsls	r1, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Init+0x196>
 800388a:	2301      	movs	r3, #1
 800388c:	e022      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10e      	bne.n	80038b4 <HAL_I2C_Init+0x1bc>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1e58      	subs	r0, r3, #1
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6859      	ldr	r1, [r3, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a8:	3301      	adds	r3, #1
 80038aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038b2:	e00f      	b.n	80038d4 <HAL_I2C_Init+0x1dc>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	6809      	ldr	r1, [r1, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69da      	ldr	r2, [r3, #28]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003902:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6911      	ldr	r1, [r2, #16]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695a      	ldr	r2, [r3, #20]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	000186a0 	.word	0x000186a0
 8003970:	001e847f 	.word	0x001e847f
 8003974:	003d08ff 	.word	0x003d08ff
 8003978:	431bde83 	.word	0x431bde83
 800397c:	10624dd3 	.word	0x10624dd3

08003980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b088      	sub	sp, #32
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e128      	b.n	8003be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a90      	ldr	r2, [pc, #576]	@ (8003bec <HAL_I2S_Init+0x26c>)
 80039aa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f869 	bl	8000a84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2202      	movs	r2, #2
 80039b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2202      	movs	r2, #2
 80039d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d060      	beq.n	8003aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039e6:	2310      	movs	r3, #16
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	e001      	b.n	80039f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d802      	bhi.n	80039fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f001 f9c4 	bl	8004d8c <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a0e:	d125      	bne.n	8003a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d010      	beq.n	8003a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	3305      	adds	r3, #5
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e01f      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	3305      	adds	r3, #5
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	e00e      	b.n	8003a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	3305      	adds	r3, #5
 8003a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	4a5c      	ldr	r2, [pc, #368]	@ (8003bf0 <HAL_I2S_Init+0x270>)
 8003a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a82:	08db      	lsrs	r3, r3, #3
 8003a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	61bb      	str	r3, [r7, #24]
 8003a9e:	e003      	b.n	8003aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d902      	bls.n	8003ab4 <HAL_I2S_Init+0x134>
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	2bff      	cmp	r3, #255	@ 0xff
 8003ab2:	d907      	bls.n	8003ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab8:	f043 0210 	orr.w	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e08f      	b.n	8003be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	ea42 0103 	orr.w	r1, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ae2:	f023 030f 	bic.w	r3, r3, #15
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6851      	ldr	r1, [r2, #4]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	4311      	orrs	r1, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	68d2      	ldr	r2, [r2, #12]
 8003af4:	4311      	orrs	r1, r2
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6992      	ldr	r2, [r2, #24]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d161      	bne.n	8003bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a38      	ldr	r2, [pc, #224]	@ (8003bf4 <HAL_I2S_Init+0x274>)
 8003b14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2S_Init+0x1a4>
 8003b20:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b22:	e001      	b.n	8003b28 <HAL_I2S_Init+0x1a8>
 8003b24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	4932      	ldr	r1, [pc, #200]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b30:	428a      	cmp	r2, r1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2S_Init+0x1b8>
 8003b34:	4a31      	ldr	r2, [pc, #196]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b36:	e001      	b.n	8003b3c <HAL_I2S_Init+0x1bc>
 8003b38:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b3c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b40:	f023 030f 	bic.w	r3, r3, #15
 8003b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2S_Init+0x1d4>
 8003b50:	4b2a      	ldr	r3, [pc, #168]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x1d8>
 8003b54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b58:	2202      	movs	r2, #2
 8003b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a25      	ldr	r2, [pc, #148]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_I2S_Init+0x1ea>
 8003b66:	4b25      	ldr	r3, [pc, #148]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2S_Init+0x1ee>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7a:	d003      	beq.n	8003b84 <HAL_I2S_Init+0x204>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d103      	bne.n	8003b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e001      	b.n	8003b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf8 <HAL_I2S_Init+0x278>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2S_Init+0x24c>
 8003bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <HAL_I2S_Init+0x27c>)
 8003bca:	e001      	b.n	8003bd0 <HAL_I2S_Init+0x250>
 8003bcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08003cf7 	.word	0x08003cf7
 8003bf0:	cccccccd 	.word	0xcccccccd
 8003bf4:	08003e0d 	.word	0x08003e0d
 8003bf8:	40003800 	.word	0x40003800
 8003bfc:	40003400 	.word	0x40003400

08003c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	881a      	ldrh	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c9a      	adds	r2, r3, #2
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7ff ffb8 	bl	8003c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	b292      	uxth	r2, r2
 8003cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10e      	bne.n	8003cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7ff ff93 	bl	8003c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b086      	sub	sp, #24
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d13a      	bne.n	8003d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d109      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d26:	2b40      	cmp	r3, #64	@ 0x40
 8003d28:	d102      	bne.n	8003d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff ffb4 	bl	8003c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d36:	2b40      	cmp	r3, #64	@ 0x40
 8003d38:	d126      	bne.n	8003d88 <I2S_IRQHandler+0x92>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0320 	and.w	r3, r3, #32
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d11f      	bne.n	8003d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7a:	f043 0202 	orr.w	r2, r3, #2
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff50 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d136      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d109      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da8:	2b80      	cmp	r3, #128	@ 0x80
 8003daa:	d102      	bne.n	8003db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff45 	bl	8003c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d122      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d11b      	bne.n	8003e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df4:	f043 0204 	orr.w	r2, r3, #4
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff13 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a92      	ldr	r2, [pc, #584]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e26:	4b92      	ldr	r3, [pc, #584]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e28:	e001      	b.n	8003e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a8b      	ldr	r2, [pc, #556]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e44:	4b8a      	ldr	r3, [pc, #552]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e46:	e001      	b.n	8003e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e58:	d004      	beq.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f040 8099 	bne.w	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d107      	bne.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f925 	bl	80040c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d107      	bne.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9c8 	bl	8004228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d13a      	bne.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d035      	beq.n	8003f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003eb8:	e001      	b.n	8003ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4969      	ldr	r1, [pc, #420]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ec6:	428b      	cmp	r3, r1
 8003ec8:	d101      	bne.n	8003ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003eca:	4b69      	ldr	r3, [pc, #420]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ecc:	e001      	b.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0202 	orr.w	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe88 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0308 	and.w	r3, r3, #8
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	f040 80c3 	bne.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80bd 	beq.w	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a49      	ldr	r2, [pc, #292]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d101      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f4a:	4b49      	ldr	r3, [pc, #292]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4c:	e001      	b.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4944      	ldr	r1, [pc, #272]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d101      	bne.n	8003f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f5e:	4b44      	ldr	r3, [pc, #272]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f60:	e001      	b.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f66:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60bb      	str	r3, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fe4a 	bl	8003c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f94:	e089      	b.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d107      	bne.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8be 	bl	800412c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d107      	bne.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8fd 	bl	80041c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd0:	2b40      	cmp	r3, #64	@ 0x40
 8003fd2:	d12f      	bne.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ffa:	e001      	b.n	8004000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003ffc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4919      	ldr	r1, [pc, #100]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004008:	428b      	cmp	r3, r1
 800400a:	d101      	bne.n	8004010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800400c:	4b18      	ldr	r3, [pc, #96]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800400e:	e001      	b.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004010:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004014:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7ff fdfa 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0308 	and.w	r3, r3, #8
 800403a:	2b08      	cmp	r3, #8
 800403c:	d136      	bne.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d031      	beq.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a07      	ldr	r2, [pc, #28]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004052:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004054:	e001      	b.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004056:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4902      	ldr	r1, [pc, #8]	@ (800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d106      	bne.n	8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004066:	4b02      	ldr	r3, [pc, #8]	@ (8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004068:	e006      	b.n	8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800406a:	bf00      	nop
 800406c:	40003800 	.word	0x40003800
 8004070:	40003400 	.word	0x40003400
 8004074:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004078:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800407c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800408c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff fdc0 	bl	8003c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a8:	e000      	b.n	80040ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040aa:	bf00      	nop
}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c99      	adds	r1, r3, #2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6251      	str	r1, [r2, #36]	@ 0x24
 80040da:	881a      	ldrh	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ffc9 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004138:	1c99      	adds	r1, r3, #2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6251      	str	r1, [r2, #36]	@ 0x24
 800413e:	8819      	ldrh	r1, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1d      	ldr	r2, [pc, #116]	@ (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <I2SEx_TxISR_I2SExt+0x22>
 800414a:	4b1d      	ldr	r3, [pc, #116]	@ (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800414c:	e001      	b.n	8004152 <I2SEx_TxISR_I2SExt+0x26>
 800414e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004152:	460a      	mov	r2, r1
 8004154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d121      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <I2SEx_TxISR_I2SExt+0x50>
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800417a:	e001      	b.n	8004180 <I2SEx_TxISR_I2SExt+0x54>
 800417c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	490d      	ldr	r1, [pc, #52]	@ (80041bc <I2SEx_TxISR_I2SExt+0x90>)
 8004188:	428b      	cmp	r3, r1
 800418a:	d101      	bne.n	8004190 <I2SEx_TxISR_I2SExt+0x64>
 800418c:	4b0c      	ldr	r3, [pc, #48]	@ (80041c0 <I2SEx_TxISR_I2SExt+0x94>)
 800418e:	e001      	b.n	8004194 <I2SEx_TxISR_I2SExt+0x68>
 8004190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800419e:	b29b      	uxth	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f7ff ff81 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40003800 	.word	0x40003800
 80041c0:	40003400 	.word	0x40003400

080041c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68d8      	ldr	r0, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	1c99      	adds	r1, r3, #2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041dc:	b282      	uxth	r2, r0
 80041de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4a 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a20      	ldr	r2, [pc, #128]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d101      	bne.n	800423e <I2SEx_RxISR_I2SExt+0x16>
 800423a:	4b20      	ldr	r3, [pc, #128]	@ (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800423c:	e001      	b.n	8004242 <I2SEx_RxISR_I2SExt+0x1a>
 800423e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004242:	68d8      	ldr	r0, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	1c99      	adds	r1, r3, #2
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800424e:	b282      	uxth	r2, r0
 8004250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d121      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d101      	bne.n	8004278 <I2SEx_RxISR_I2SExt+0x50>
 8004274:	4b11      	ldr	r3, [pc, #68]	@ (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 8004276:	e001      	b.n	800427c <I2SEx_RxISR_I2SExt+0x54>
 8004278:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	490d      	ldr	r1, [pc, #52]	@ (80042b8 <I2SEx_RxISR_I2SExt+0x90>)
 8004284:	428b      	cmp	r3, r1
 8004286:	d101      	bne.n	800428c <I2SEx_RxISR_I2SExt+0x64>
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <I2SEx_RxISR_I2SExt+0x94>)
 800428a:	e001      	b.n	8004290 <I2SEx_RxISR_I2SExt+0x68>
 800428c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004290:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff03 	bl	80040b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40003800 	.word	0x40003800
 80042bc:	40003400 	.word	0x40003400

080042c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e267      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d075      	beq.n	80043ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042de:	4b88      	ldr	r3, [pc, #544]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d00c      	beq.n	8004304 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ea:	4b85      	ldr	r3, [pc, #532]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d112      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042f6:	4b82      	ldr	r3, [pc, #520]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004302:	d10b      	bne.n	800431c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	4b7e      	ldr	r3, [pc, #504]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05b      	beq.n	80043c8 <HAL_RCC_OscConfig+0x108>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d157      	bne.n	80043c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e242      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004324:	d106      	bne.n	8004334 <HAL_RCC_OscConfig+0x74>
 8004326:	4b76      	ldr	r3, [pc, #472]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a75      	ldr	r2, [pc, #468]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e01d      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433c:	d10c      	bne.n	8004358 <HAL_RCC_OscConfig+0x98>
 800433e:	4b70      	ldr	r3, [pc, #448]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a6f      	ldr	r2, [pc, #444]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b6d      	ldr	r3, [pc, #436]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6c      	ldr	r2, [pc, #432]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e00b      	b.n	8004370 <HAL_RCC_OscConfig+0xb0>
 8004358:	4b69      	ldr	r3, [pc, #420]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a68      	ldr	r2, [pc, #416]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800435e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b66      	ldr	r3, [pc, #408]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a65      	ldr	r2, [pc, #404]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800436a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800436e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d013      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fc fd78 	bl	8000e6c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fc fd74 	bl	8000e6c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	@ 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e207      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004392:	4b5b      	ldr	r3, [pc, #364]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d0f0      	beq.n	8004380 <HAL_RCC_OscConfig+0xc0>
 800439e:	e014      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fc fd64 	bl	8000e6c <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a8:	f7fc fd60 	bl	8000e6c <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b64      	cmp	r3, #100	@ 0x64
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e1f3      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ba:	4b51      	ldr	r3, [pc, #324]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0xe8>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d063      	beq.n	800449e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00b      	beq.n	80043fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b47      	ldr	r3, [pc, #284]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d11c      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ee:	4b44      	ldr	r3, [pc, #272]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d116      	bne.n	8004428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fa:	4b41      	ldr	r3, [pc, #260]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e1c7      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004412:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4937      	ldr	r1, [pc, #220]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004422:	4313      	orrs	r3, r2
 8004424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004426:	e03a      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d020      	beq.n	8004472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004430:	4b34      	ldr	r3, [pc, #208]	@ (8004504 <HAL_RCC_OscConfig+0x244>)
 8004432:	2201      	movs	r2, #1
 8004434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004436:	f7fc fd19 	bl	8000e6c <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800443e:	f7fc fd15 	bl	8000e6c <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e1a8      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004450:	4b2b      	ldr	r3, [pc, #172]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445c:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	4925      	ldr	r1, [pc, #148]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 800446c:	4313      	orrs	r3, r2
 800446e:	600b      	str	r3, [r1, #0]
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004472:	4b24      	ldr	r3, [pc, #144]	@ (8004504 <HAL_RCC_OscConfig+0x244>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fc fcf8 	bl	8000e6c <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004480:	f7fc fcf4 	bl	8000e6c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e187      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004492:	4b1b      	ldr	r3, [pc, #108]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d036      	beq.n	8004518 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b2:	4b15      	ldr	r3, [pc, #84]	@ (8004508 <HAL_RCC_OscConfig+0x248>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b8:	f7fc fcd8 	bl	8000e6c <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c0:	f7fc fcd4 	bl	8000e6c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e167      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d2:	4b0b      	ldr	r3, [pc, #44]	@ (8004500 <HAL_RCC_OscConfig+0x240>)
 80044d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x200>
 80044de:	e01b      	b.n	8004518 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044e0:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_OscConfig+0x248>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e6:	f7fc fcc1 	bl	8000e6c <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ec:	e00e      	b.n	800450c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ee:	f7fc fcbd 	bl	8000e6c <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d907      	bls.n	800450c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e150      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004500:	40023800 	.word	0x40023800
 8004504:	42470000 	.word	0x42470000
 8004508:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	4b88      	ldr	r3, [pc, #544]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800450e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1ea      	bne.n	80044ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8097 	beq.w	8004654 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004526:	2300      	movs	r3, #0
 8004528:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b81      	ldr	r3, [pc, #516]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800452c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10f      	bne.n	8004556 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	4b7d      	ldr	r3, [pc, #500]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453e:	4a7c      	ldr	r2, [pc, #496]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004544:	6413      	str	r3, [r2, #64]	@ 0x40
 8004546:	4b7a      	ldr	r3, [pc, #488]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454e:	60bb      	str	r3, [r7, #8]
 8004550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004552:	2301      	movs	r3, #1
 8004554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b77      	ldr	r3, [pc, #476]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d118      	bne.n	8004594 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004562:	4b74      	ldr	r3, [pc, #464]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a73      	ldr	r2, [pc, #460]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800456e:	f7fc fc7d 	bl	8000e6c <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004576:	f7fc fc79 	bl	8000e6c <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e10c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004588:	4b6a      	ldr	r3, [pc, #424]	@ (8004734 <HAL_RCC_OscConfig+0x474>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0f0      	beq.n	8004576 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d106      	bne.n	80045aa <HAL_RCC_OscConfig+0x2ea>
 800459c:	4b64      	ldr	r3, [pc, #400]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a63      	ldr	r2, [pc, #396]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	e01c      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d10c      	bne.n	80045cc <HAL_RCC_OscConfig+0x30c>
 80045b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045b8:	f043 0304 	orr.w	r3, r3, #4
 80045bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045be:	4b5c      	ldr	r3, [pc, #368]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80045ca:	e00b      	b.n	80045e4 <HAL_RCC_OscConfig+0x324>
 80045cc:	4b58      	ldr	r3, [pc, #352]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d0:	4a57      	ldr	r2, [pc, #348]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 0301 	bic.w	r3, r3, #1
 80045d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d8:	4b55      	ldr	r3, [pc, #340]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045dc:	4a54      	ldr	r2, [pc, #336]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80045de:	f023 0304 	bic.w	r3, r3, #4
 80045e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d015      	beq.n	8004618 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fc fc3e 	bl	8000e6c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f2:	e00a      	b.n	800460a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f4:	f7fc fc3a 	bl	8000e6c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004602:	4293      	cmp	r3, r2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e0cb      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460a:	4b49      	ldr	r3, [pc, #292]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800460c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ee      	beq.n	80045f4 <HAL_RCC_OscConfig+0x334>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004618:	f7fc fc28 	bl	8000e6c <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800461e:	e00a      	b.n	8004636 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004620:	f7fc fc24 	bl	8000e6c <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0b5      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004636:	4b3e      	ldr	r3, [pc, #248]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1ee      	bne.n	8004620 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004642:	7dfb      	ldrb	r3, [r7, #23]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d105      	bne.n	8004654 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004648:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464c:	4a38      	ldr	r2, [pc, #224]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 800464e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 80a1 	beq.w	80047a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800465e:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f003 030c 	and.w	r3, r3, #12
 8004666:	2b08      	cmp	r3, #8
 8004668:	d05c      	beq.n	8004724 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b02      	cmp	r3, #2
 8004670:	d141      	bne.n	80046f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004672:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fc fbf8 	bl	8000e6c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004680:	f7fc fbf4 	bl	8000e6c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e087      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	085b      	lsrs	r3, r3, #1
 80046b6:	3b01      	subs	r3, #1
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	491b      	ldr	r1, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ce:	f7fc fbcd 	bl	8000e6c <HAL_GetTick>
 80046d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046d6:	f7fc fbc9 	bl	8000e6c <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e05c      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e8:	4b11      	ldr	r3, [pc, #68]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x416>
 80046f4:	e054      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <HAL_RCC_OscConfig+0x478>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fc fbb6 	bl	8000e6c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004704:	f7fc fbb2 	bl	8000e6c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e045      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004716:	4b06      	ldr	r3, [pc, #24]	@ (8004730 <HAL_RCC_OscConfig+0x470>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x444>
 8004722:	e03d      	b.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d107      	bne.n	800473c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e038      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800473c:	4b1b      	ldr	r3, [pc, #108]	@ (80047ac <HAL_RCC_OscConfig+0x4ec>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d028      	beq.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d121      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004762:	429a      	cmp	r2, r3
 8004764:	d11a      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004772:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004774:	4293      	cmp	r3, r2
 8004776:	d111      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	3b01      	subs	r3, #1
 8004786:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004788:	429a      	cmp	r2, r3
 800478a:	d107      	bne.n	800479c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e000      	b.n	80047a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40023800 	.word	0x40023800

080047b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0cc      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047c4:	4b68      	ldr	r3, [pc, #416]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d90c      	bls.n	80047ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047d2:	4b65      	ldr	r3, [pc, #404]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047da:	4b63      	ldr	r3, [pc, #396]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d001      	beq.n	80047ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0b8      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d020      	beq.n	800483a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d005      	beq.n	8004810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004804:	4b59      	ldr	r3, [pc, #356]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	4a58      	ldr	r2, [pc, #352]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800480e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800481c:	4b53      	ldr	r3, [pc, #332]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a52      	ldr	r2, [pc, #328]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004828:	4b50      	ldr	r3, [pc, #320]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	494d      	ldr	r1, [pc, #308]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d044      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d119      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e07f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d003      	beq.n	800486e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800486a:	2b03      	cmp	r3, #3
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800486e:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e067      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800488e:	4b37      	ldr	r3, [pc, #220]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	4934      	ldr	r1, [pc, #208]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048a0:	f7fc fae4 	bl	8000e6c <HAL_GetTick>
 80048a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	e00a      	b.n	80048be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048a8:	f7fc fae0 	bl	8000e6c <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e04f      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048be:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 020c 	and.w	r2, r3, #12
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d1eb      	bne.n	80048a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048d0:	4b25      	ldr	r3, [pc, #148]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20c      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b22      	ldr	r3, [pc, #136]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	683a      	ldr	r2, [r7, #0]
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e6:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_RCC_ClockConfig+0x1b8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e032      	b.n	800495e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004904:	4b19      	ldr	r3, [pc, #100]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4916      	ldr	r1, [pc, #88]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d009      	beq.n	8004936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004922:	4b12      	ldr	r3, [pc, #72]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	490e      	ldr	r1, [pc, #56]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004936:	f000 f821 	bl	800497c <HAL_RCC_GetSysClockFreq>
 800493a:	4602      	mov	r2, r0
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_ClockConfig+0x1bc>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	490a      	ldr	r1, [pc, #40]	@ (8004970 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	5ccb      	ldrb	r3, [r1, r3]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	4a09      	ldr	r2, [pc, #36]	@ (8004974 <HAL_RCC_ClockConfig+0x1c4>)
 8004950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004952:	4b09      	ldr	r3, [pc, #36]	@ (8004978 <HAL_RCC_ClockConfig+0x1c8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7fc fa44 	bl	8000de4 <HAL_InitTick>

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	40023c00 	.word	0x40023c00
 800496c:	40023800 	.word	0x40023800
 8004970:	0800c354 	.word	0x0800c354
 8004974:	20000000 	.word	0x20000000
 8004978:	20000004 	.word	0x20000004

0800497c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800497c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004980:	b094      	sub	sp, #80	@ 0x50
 8004982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800498c:	2300      	movs	r3, #0
 800498e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004994:	4b79      	ldr	r3, [pc, #484]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d00d      	beq.n	80049bc <HAL_RCC_GetSysClockFreq+0x40>
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	f200 80e1 	bhi.w	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <HAL_RCC_GetSysClockFreq+0x34>
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ae:	e0db      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049b0:	4b73      	ldr	r3, [pc, #460]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 80049b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049b4:	e0db      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049b6:	4b73      	ldr	r3, [pc, #460]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x208>)
 80049b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049ba:	e0d8      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049bc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d063      	beq.n	8004a9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	099b      	lsrs	r3, r3, #6
 80049d8:	2200      	movs	r2, #0
 80049da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e6:	2300      	movs	r3, #0
 80049e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049ee:	4622      	mov	r2, r4
 80049f0:	462b      	mov	r3, r5
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4621      	mov	r1, r4
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	6139      	str	r1, [r7, #16]
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a20:	4659      	mov	r1, fp
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4651      	mov	r1, sl
 8004a30:	ebb2 0801 	subs.w	r8, r2, r1
 8004a34:	4659      	mov	r1, fp
 8004a36:	eb63 0901 	sbc.w	r9, r3, r1
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a4e:	4690      	mov	r8, r2
 8004a50:	4699      	mov	r9, r3
 8004a52:	4623      	mov	r3, r4
 8004a54:	eb18 0303 	adds.w	r3, r8, r3
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	462b      	mov	r3, r5
 8004a5c:	eb49 0303 	adc.w	r3, r9, r3
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	f04f 0300 	mov.w	r3, #0
 8004a6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a6e:	4629      	mov	r1, r5
 8004a70:	024b      	lsls	r3, r1, #9
 8004a72:	4621      	mov	r1, r4
 8004a74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a78:	4621      	mov	r1, r4
 8004a7a:	024a      	lsls	r2, r1, #9
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a82:	2200      	movs	r2, #0
 8004a84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a8c:	f7fb fba0 	bl	80001d0 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4613      	mov	r3, r2
 8004a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a98:	e058      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a9a:	4b38      	ldr	r3, [pc, #224]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	099b      	lsrs	r3, r3, #6
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	4611      	mov	r1, r2
 8004aa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aaa:	623b      	str	r3, [r7, #32]
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ab0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	f04f 0000 	mov.w	r0, #0
 8004abc:	f04f 0100 	mov.w	r1, #0
 8004ac0:	0159      	lsls	r1, r3, #5
 8004ac2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac6:	0150      	lsls	r0, r2, #5
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4641      	mov	r1, r8
 8004ace:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ae4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ae8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004aec:	ebb2 040a 	subs.w	r4, r2, sl
 8004af0:	eb63 050b 	sbc.w	r5, r3, fp
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	464b      	mov	r3, r9
 8004b10:	eb45 0303 	adc.w	r3, r5, r3
 8004b14:	607b      	str	r3, [r7, #4]
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b22:	4629      	mov	r1, r5
 8004b24:	028b      	lsls	r3, r1, #10
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	028a      	lsls	r2, r1, #10
 8004b30:	4610      	mov	r0, r2
 8004b32:	4619      	mov	r1, r3
 8004b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b36:	2200      	movs	r2, #0
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	61fa      	str	r2, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	f7fb fb46 	bl	80001d0 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4613      	mov	r3, r2
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	0c1b      	lsrs	r3, r3, #16
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b66:	e002      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b68:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3750      	adds	r7, #80	@ 0x50
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	007a1200 	.word	0x007a1200

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	@ (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000000 	.word	0x20000000

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	@ (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4903      	ldr	r1, [pc, #12]	@ (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5ccb      	ldrb	r3, [r1, r3]
 8004bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800c364 	.word	0x0800c364

08004bc8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d035      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bf0:	4b62      	ldr	r3, [pc, #392]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf6:	f7fc f939 	bl	8000e6c <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfe:	f7fc f935 	bl	8000e6c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0b0      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c10:	4b5b      	ldr	r3, [pc, #364]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f0      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	019a      	lsls	r2, r3, #6
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	071b      	lsls	r3, r3, #28
 8004c28:	4955      	ldr	r1, [pc, #340]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c30:	4b52      	ldr	r3, [pc, #328]	@ (8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c32:	2201      	movs	r2, #1
 8004c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c36:	f7fc f919 	bl	8000e6c <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c3e:	f7fc f915 	bl	8000e6c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e090      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c50:	4b4b      	ldr	r3, [pc, #300]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0f0      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8083 	beq.w	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	4b44      	ldr	r3, [pc, #272]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	4a43      	ldr	r2, [pc, #268]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c7a:	4b41      	ldr	r3, [pc, #260]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c86:	4b3f      	ldr	r3, [pc, #252]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c92:	f7fc f8eb 	bl	8000e6c <HAL_GetTick>
 8004c96:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c98:	e008      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9a:	f7fc f8e7 	bl	8000e6c <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e062      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004cac:	4b35      	ldr	r3, [pc, #212]	@ (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d0f0      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cb8:	4b31      	ldr	r3, [pc, #196]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cc0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02f      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d028      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cde:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ce0:	4b29      	ldr	r3, [pc, #164]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ce6:	4b28      	ldr	r3, [pc, #160]	@ (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004cec:	4a24      	ldr	r2, [pc, #144]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004cf2:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d114      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cfe:	f7fc f8b5 	bl	8000e6c <HAL_GetTick>
 8004d02:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d04:	e00a      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d06:	f7fc f8b1 	bl	8000e6c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e02a      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1c:	4b18      	ldr	r3, [pc, #96]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d0ee      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d34:	d10d      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d36:	4b12      	ldr	r3, [pc, #72]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d4a:	490d      	ldr	r1, [pc, #52]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	608b      	str	r3, [r1, #8]
 8004d50:	e005      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d52:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	4a0a      	ldr	r2, [pc, #40]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d5c:	6093      	str	r3, [r2, #8]
 8004d5e:	4b08      	ldr	r3, [pc, #32]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d6a:	4905      	ldr	r1, [pc, #20]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	42470068 	.word	0x42470068
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40007000 	.word	0x40007000
 8004d88:	42470e40 	.word	0x42470e40

08004d8c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d13f      	bne.n	8004e2a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004daa:	4b24      	ldr	r3, [pc, #144]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d006      	beq.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dc0:	d12f      	bne.n	8004e22 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dc4:	617b      	str	r3, [r7, #20]
          break;
 8004dc6:	e02f      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dd4:	d108      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004dd6:	4b19      	ldr	r3, [pc, #100]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dde:	4a19      	ldr	r2, [pc, #100]	@ (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	e007      	b.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004de8:	4b14      	ldr	r3, [pc, #80]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004df0:	4a15      	ldr	r2, [pc, #84]	@ (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004df8:	4b10      	ldr	r3, [pc, #64]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	fb02 f303 	mul.w	r3, r2, r3
 8004e0a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e12:	0f1b      	lsrs	r3, r3, #28
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	617b      	str	r3, [r7, #20]
          break;
 8004e20:	e002      	b.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
          break;
 8004e26:	bf00      	nop
        }
      }
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004e2a:	bf00      	nop
    }
  }
  return frequency;
 8004e2c:	697b      	ldr	r3, [r7, #20]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	00bb8000 	.word	0x00bb8000
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07b      	b.n	8004f56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e6e:	d009      	beq.n	8004e84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	61da      	str	r2, [r3, #28]
 8004e76:	e005      	b.n	8004e84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fb fe70 	bl	8000b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef4:	431a      	orrs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f08:	ea42 0103 	orr.w	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	0c1b      	lsrs	r3, r3, #16
 8004f22:	f003 0104 	and.w	r1, r3, #4
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	f003 0210 	and.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b082      	sub	sp, #8
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e041      	b.n	8004ff4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fb fe45 	bl	8000c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f000 f82d 	bl	8004ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a46      	ldr	r2, [pc, #280]	@ (8005128 <TIM_Base_SetConfig+0x12c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d013      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a43      	ldr	r2, [pc, #268]	@ (800512c <TIM_Base_SetConfig+0x130>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a42      	ldr	r2, [pc, #264]	@ (8005130 <TIM_Base_SetConfig+0x134>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a41      	ldr	r2, [pc, #260]	@ (8005134 <TIM_Base_SetConfig+0x138>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a40      	ldr	r2, [pc, #256]	@ (8005138 <TIM_Base_SetConfig+0x13c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d108      	bne.n	800504e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a35      	ldr	r2, [pc, #212]	@ (8005128 <TIM_Base_SetConfig+0x12c>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02b      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800505c:	d027      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a32      	ldr	r2, [pc, #200]	@ (800512c <TIM_Base_SetConfig+0x130>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d023      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a31      	ldr	r2, [pc, #196]	@ (8005130 <TIM_Base_SetConfig+0x134>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d01f      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a30      	ldr	r2, [pc, #192]	@ (8005134 <TIM_Base_SetConfig+0x138>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01b      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2f      	ldr	r2, [pc, #188]	@ (8005138 <TIM_Base_SetConfig+0x13c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d017      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2e      	ldr	r2, [pc, #184]	@ (800513c <TIM_Base_SetConfig+0x140>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d013      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2d      	ldr	r2, [pc, #180]	@ (8005140 <TIM_Base_SetConfig+0x144>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d00f      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2c      	ldr	r2, [pc, #176]	@ (8005144 <TIM_Base_SetConfig+0x148>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00b      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a2b      	ldr	r2, [pc, #172]	@ (8005148 <TIM_Base_SetConfig+0x14c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d007      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a2a      	ldr	r2, [pc, #168]	@ (800514c <TIM_Base_SetConfig+0x150>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a29      	ldr	r2, [pc, #164]	@ (8005150 <TIM_Base_SetConfig+0x154>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d108      	bne.n	80050c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4313      	orrs	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a10      	ldr	r2, [pc, #64]	@ (8005128 <TIM_Base_SetConfig+0x12c>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_Base_SetConfig+0xf8>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a12      	ldr	r2, [pc, #72]	@ (8005138 <TIM_Base_SetConfig+0x13c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d103      	bne.n	80050fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d105      	bne.n	800511a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f023 0201 	bic.w	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	611a      	str	r2, [r3, #16]
  }
}
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40010000 	.word	0x40010000
 800512c:	40000400 	.word	0x40000400
 8005130:	40000800 	.word	0x40000800
 8005134:	40000c00 	.word	0x40000c00
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800
 8005148:	40001800 	.word	0x40001800
 800514c:	40001c00 	.word	0x40001c00
 8005150:	40002000 	.word	0x40002000

08005154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005168:	2302      	movs	r3, #2
 800516a:	e05a      	b.n	8005222 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a21      	ldr	r2, [pc, #132]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b8:	d01d      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1d      	ldr	r2, [pc, #116]	@ (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1a      	ldr	r2, [pc, #104]	@ (800523c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a18      	ldr	r2, [pc, #96]	@ (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a17      	ldr	r2, [pc, #92]	@ (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a15      	ldr	r2, [pc, #84]	@ (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d10c      	bne.n	8005210 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	4313      	orrs	r3, r2
 8005206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	40010000 	.word	0x40010000
 8005234:	40000400 	.word	0x40000400
 8005238:	40000800 	.word	0x40000800
 800523c:	40000c00 	.word	0x40000c00
 8005240:	40010400 	.word	0x40010400
 8005244:	40014000 	.word	0x40014000
 8005248:	40001800 	.word	0x40001800

0800524c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800524c:	b084      	sub	sp, #16
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	f107 001c 	add.w	r0, r7, #28
 800525a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800525e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005262:	2b01      	cmp	r3, #1
 8005264:	d123      	bne.n	80052ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800526a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800527a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800528e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005292:	2b01      	cmp	r3, #1
 8005294:	d105      	bne.n	80052a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f9dc 	bl	8005660 <USB_CoreReset>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
 80052ac:	e01b      	b.n	80052e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f9d0 	bl	8005660 <USB_CoreReset>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80052d8:	e005      	b.n	80052e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052e6:	7fbb      	ldrb	r3, [r7, #30]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10b      	bne.n	8005304 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f043 0206 	orr.w	r2, r3, #6
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005310:	b004      	add	sp, #16
 8005312:	4770      	bx	lr

08005314 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f023 0201 	bic.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005374:	78fb      	ldrb	r3, [r7, #3]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d115      	bne.n	80053a6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005386:	200a      	movs	r0, #10
 8005388:	f7fb fd7c 	bl	8000e84 <HAL_Delay>
      ms += 10U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	330a      	adds	r3, #10
 8005390:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f956 	bl	8005644 <USB_GetMode>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d01e      	beq.n	80053dc <USB_SetCurrentMode+0x84>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2bc7      	cmp	r3, #199	@ 0xc7
 80053a2:	d9f0      	bls.n	8005386 <USB_SetCurrentMode+0x2e>
 80053a4:	e01a      	b.n	80053dc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d115      	bne.n	80053d8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80053b8:	200a      	movs	r0, #10
 80053ba:	f7fb fd63 	bl	8000e84 <HAL_Delay>
      ms += 10U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	330a      	adds	r3, #10
 80053c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f93d 	bl	8005644 <USB_GetMode>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d005      	beq.n	80053dc <USB_SetCurrentMode+0x84>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80053d4:	d9f0      	bls.n	80053b8 <USB_SetCurrentMode+0x60>
 80053d6:	e001      	b.n	80053dc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e005      	b.n	80053e8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2bc8      	cmp	r3, #200	@ 0xc8
 80053e0:	d101      	bne.n	80053e6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e000      	b.n	80053e8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3301      	adds	r3, #1
 8005402:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800540a:	d901      	bls.n	8005410 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e01b      	b.n	8005448 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	daf2      	bge.n	80053fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	019b      	lsls	r3, r3, #6
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005434:	d901      	bls.n	800543a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e006      	b.n	8005448 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0320 	and.w	r3, r3, #32
 8005442:	2b20      	cmp	r3, #32
 8005444:	d0f0      	beq.n	8005428 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800546c:	d901      	bls.n	8005472 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e018      	b.n	80054a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	daf2      	bge.n	8005460 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2210      	movs	r2, #16
 8005482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005490:	d901      	bls.n	8005496 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e006      	b.n	80054a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d0f0      	beq.n	8005484 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b089      	sub	sp, #36	@ 0x24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	4611      	mov	r1, r2
 80054bc:	461a      	mov	r2, r3
 80054be:	460b      	mov	r3, r1
 80054c0:	71fb      	strb	r3, [r7, #7]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80054ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d123      	bne.n	800551e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054d6:	88bb      	ldrh	r3, [r7, #4]
 80054d8:	3303      	adds	r3, #3
 80054da:	089b      	lsrs	r3, r3, #2
 80054dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e018      	b.n	8005516 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054e4:	79fb      	ldrb	r3, [r7, #7]
 80054e6:	031a      	lsls	r2, r3, #12
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054f0:	461a      	mov	r2, r3
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	3301      	adds	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3301      	adds	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	3301      	adds	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	3301      	adds	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3e2      	bcc.n	80054e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3724      	adds	r7, #36	@ 0x24
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800552c:	b480      	push	{r7}
 800552e:	b08b      	sub	sp, #44	@ 0x2c
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	089b      	lsrs	r3, r3, #2
 8005546:	b29b      	uxth	r3, r3
 8005548:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005552:	2300      	movs	r3, #0
 8005554:	623b      	str	r3, [r7, #32]
 8005556:	e014      	b.n	8005582 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005562:	601a      	str	r2, [r3, #0]
    pDest++;
 8005564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005566:	3301      	adds	r3, #1
 8005568:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	3301      	adds	r3, #1
 800556e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	3301      	adds	r3, #1
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	3301      	adds	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	3301      	adds	r3, #1
 8005580:	623b      	str	r3, [r7, #32]
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	429a      	cmp	r2, r3
 8005588:	d3e6      	bcc.n	8005558 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800558a:	8bfb      	ldrh	r3, [r7, #30]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800559a:	461a      	mov	r2, r3
 800559c:	f107 0310 	add.w	r3, r7, #16
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b4:	701a      	strb	r2, [r3, #0]
      i++;
 80055b6:	6a3b      	ldr	r3, [r7, #32]
 80055b8:	3301      	adds	r3, #1
 80055ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80055bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055be:	3301      	adds	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80055c2:	8bfb      	ldrh	r3, [r7, #30]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055c8:	8bfb      	ldrh	r3, [r7, #30]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1ea      	bne.n	80055a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	372c      	adds	r7, #44	@ 0x2c
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4013      	ands	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f4:	68fb      	ldr	r3, [r7, #12]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4413      	add	r3, r2
 800561a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	4013      	ands	r3, r2
 8005634:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005636:	68bb      	ldr	r3, [r7, #8]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0301 	and.w	r3, r3, #1
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005678:	d901      	bls.n	800567e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e01b      	b.n	80056b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	daf2      	bge.n	800566c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f043 0201 	orr.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056a2:	d901      	bls.n	80056a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e006      	b.n	80056b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d0f0      	beq.n	8005696 <USB_CoreReset+0x36>

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3714      	adds	r7, #20
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056c4:	b084      	sub	sp, #16
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b086      	sub	sp, #24
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
 80056ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80056d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056e4:	461a      	mov	r2, r3
 80056e6:	2300      	movs	r3, #0
 80056e8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005706:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005716:	2b00      	cmp	r3, #0
 8005718:	d119      	bne.n	800574e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800571a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10a      	bne.n	8005738 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	6013      	str	r3, [r2, #0]
 8005736:	e014      	b.n	8005762 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005746:	f023 0304 	bic.w	r3, r3, #4
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	e009      	b.n	8005762 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800575c:	f023 0304 	bic.w	r3, r3, #4
 8005760:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005762:	2110      	movs	r1, #16
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fe43 	bl	80053f0 <USB_FlushTxFifo>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff fe6d 	bl	8005454 <USB_FlushRxFifo>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d001      	beq.n	8005784 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	e015      	b.n	80057b6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005796:	461a      	mov	r2, r3
 8005798:	f04f 33ff 	mov.w	r3, #4294967295
 800579c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057aa:	461a      	mov	r2, r3
 80057ac:	2300      	movs	r3, #0
 80057ae:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3301      	adds	r3, #1
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057ba:	461a      	mov	r2, r3
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d3e3      	bcc.n	800578a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <USB_HostInit+0x170>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10b      	bne.n	80057f0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057de:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a15      	ldr	r2, [pc, #84]	@ (8005838 <USB_HostInit+0x174>)
 80057e4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a14      	ldr	r2, [pc, #80]	@ (800583c <USB_HostInit+0x178>)
 80057ea:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80057ee:	e009      	b.n	8005804 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2280      	movs	r2, #128	@ 0x80
 80057f4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a11      	ldr	r2, [pc, #68]	@ (8005840 <USB_HostInit+0x17c>)
 80057fa:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a11      	ldr	r2, [pc, #68]	@ (8005844 <USB_HostInit+0x180>)
 8005800:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005804:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f043 0210 	orr.w	r2, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	4b0a      	ldr	r3, [pc, #40]	@ (8005848 <USB_HostInit+0x184>)
 800581e:	4313      	orrs	r3, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005824:	7dfb      	ldrb	r3, [r7, #23]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005830:	b004      	add	sp, #16
 8005832:	4770      	bx	lr
 8005834:	40040000 	.word	0x40040000
 8005838:	01000200 	.word	0x01000200
 800583c:	00e00300 	.word	0x00e00300
 8005840:	00600080 	.word	0x00600080
 8005844:	004000e0 	.word	0x004000e0
 8005848:	a3200008 	.word	0xa3200008

0800584c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	460b      	mov	r3, r1
 8005856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800586a:	f023 0303 	bic.w	r3, r3, #3
 800586e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	68f9      	ldr	r1, [r7, #12]
 8005880:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005884:	4313      	orrs	r3, r2
 8005886:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005894:	461a      	mov	r2, r3
 8005896:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800589a:	6053      	str	r3, [r2, #4]
 800589c:	e00c      	b.n	80058b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d107      	bne.n	80058b4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058aa:	461a      	mov	r2, r3
 80058ac:	f241 7370 	movw	r3, #6000	@ 0x1770
 80058b0:	6053      	str	r3, [r2, #4]
 80058b2:	e001      	b.n	80058b8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80058e6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80058f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80058f6:	2064      	movs	r0, #100	@ 0x64
 80058f8:	f7fb fac4 	bl	8000e84 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005908:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800590a:	200a      	movs	r0, #10
 800590c:	f7fb faba 	bl	8000e84 <HAL_Delay>

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800593e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d109      	bne.n	800595e <USB_DriveVbus+0x44>
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005958:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800595c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005968:	d109      	bne.n	800597e <USB_DriveVbus+0x64>
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800597c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	0c5b      	lsrs	r3, r3, #17
 80059aa:	f003 0303 	and.w	r3, r3, #3
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	b29b      	uxth	r3, r3
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b088      	sub	sp, #32
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	4608      	mov	r0, r1
 80059e6:	4611      	mov	r1, r2
 80059e8:	461a      	mov	r2, r3
 80059ea:	4603      	mov	r3, r0
 80059ec:	70fb      	strb	r3, [r7, #3]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70bb      	strb	r3, [r7, #2]
 80059f2:	4613      	mov	r3, r2
 80059f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80059fe:	78fb      	ldrb	r3, [r7, #3]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a10:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005a12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d87c      	bhi.n	8005b14 <USB_HC_Init+0x138>
 8005a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a20 <USB_HC_Init+0x44>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005ad7 	.word	0x08005ad7
 8005a28:	08005a31 	.word	0x08005a31
 8005a2c:	08005a99 	.word	0x08005a99
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005a42:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005a44:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da10      	bge.n	8005a6e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005a4c:	78fb      	ldrb	r3, [r7, #3]
 8005a4e:	015a      	lsls	r2, r3, #5
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	4413      	add	r3, r2
 8005a54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	0151      	lsls	r1, r2, #5
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	440a      	add	r2, r1
 8005a62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a6a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005a6c:	e055      	b.n	8005b1a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a6f      	ldr	r2, [pc, #444]	@ (8005c30 <USB_HC_Init+0x254>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d151      	bne.n	8005b1a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005a76:	78fb      	ldrb	r3, [r7, #3]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	78fa      	ldrb	r2, [r7, #3]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a90:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a94:	60d3      	str	r3, [r2, #12]
      break;
 8005a96:	e040      	b.n	8005b1a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005a98:	78fb      	ldrb	r3, [r7, #3]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005aaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	da34      	bge.n	8005b1e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ab4:	78fb      	ldrb	r3, [r7, #3]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ad2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ad4:	e023      	b.n	8005b1e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ad6:	78fb      	ldrb	r3, [r7, #3]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f240 2325 	movw	r3, #549	@ 0x225
 8005ae8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005aea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da17      	bge.n	8005b22 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	78fa      	ldrb	r2, [r7, #3]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b0c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005b10:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005b12:	e006      	b.n	8005b22 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	77fb      	strb	r3, [r7, #31]
      break;
 8005b18:	e004      	b.n	8005b24 <USB_HC_Init+0x148>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <USB_HC_Init+0x148>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <USB_HC_Init+0x148>
      break;
 8005b22:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005b24:	78fb      	ldrb	r3, [r7, #3]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b30:	461a      	mov	r2, r3
 8005b32:	2300      	movs	r3, #0
 8005b34:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b50:	f043 0302 	orr.w	r3, r3, #2
 8005b54:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b5c:	699a      	ldr	r2, [r3, #24]
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	6939      	ldr	r1, [r7, #16]
 8005b6c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005b70:	4313      	orrs	r3, r2
 8005b72:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005b80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da03      	bge.n	8005b90 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005b88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b8c:	61bb      	str	r3, [r7, #24]
 8005b8e:	e001      	b.n	8005b94 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff fef9 	bl	800598c <USB_GetHostSpeed>
 8005b9a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d106      	bne.n	8005bb2 <USB_HC_Init+0x1d6>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d003      	beq.n	8005bb2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005baa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	e001      	b.n	8005bb6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bb6:	787b      	ldrb	r3, [r7, #1]
 8005bb8:	059b      	lsls	r3, r3, #22
 8005bba:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bbe:	78bb      	ldrb	r3, [r7, #2]
 8005bc0:	02db      	lsls	r3, r3, #11
 8005bc2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bc6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bcc:	049b      	lsls	r3, r3, #18
 8005bce:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005bd2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005bd4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005bda:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005be4:	78fa      	ldrb	r2, [r7, #3]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005bf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005bf4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005bf6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d003      	beq.n	8005c06 <USB_HC_Init+0x22a>
 8005bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10f      	bne.n	8005c26 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	0151      	lsls	r1, r2, #5
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	440a      	add	r2, r1
 8005c1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c24:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40040000 	.word	0x40040000

08005c34 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b08c      	sub	sp, #48	@ 0x30
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	785b      	ldrb	r3, [r3, #1]
 8005c4a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005c4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005c50:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4a5d      	ldr	r2, [pc, #372]	@ (8005dcc <USB_HC_StartXfer+0x198>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d12f      	bne.n	8005cba <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d11c      	bne.n	8005c9a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	7c9b      	ldrb	r3, [r3, #18]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <USB_HC_StartXfer+0x3c>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	7c9b      	ldrb	r3, [r3, #18]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d124      	bne.n	8005cba <USB_HC_StartXfer+0x86>
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	799b      	ldrb	r3, [r3, #6]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d120      	bne.n	8005cba <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	6a3a      	ldr	r2, [r7, #32]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c96:	60d3      	str	r3, [r2, #12]
 8005c98:	e00f      	b.n	8005cba <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	791b      	ldrb	r3, [r3, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10b      	bne.n	8005cba <USB_HC_StartXfer+0x86>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	795b      	ldrb	r3, [r3, #5]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 fb6b 	bl	800638c <USB_DoPing>
        return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e232      	b.n	8006120 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	799b      	ldrb	r3, [r3, #6]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d158      	bne.n	8005d74 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	78db      	ldrb	r3, [r3, #3]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005cce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	8a92      	ldrh	r2, [r2, #20]
 8005cd4:	fb03 f202 	mul.w	r2, r3, r2
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	61da      	str	r2, [r3, #28]
 8005cdc:	e07c      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	7c9b      	ldrb	r3, [r3, #18]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d130      	bne.n	8005d48 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	2bbc      	cmp	r3, #188	@ 0xbc
 8005cec:	d918      	bls.n	8005d20 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	8a9b      	ldrh	r3, [r3, #20]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	69da      	ldr	r2, [r3, #28]
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d003      	beq.n	8005d10 <USB_HC_StartXfer+0xdc>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d103      	bne.n	8005d18 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2202      	movs	r2, #2
 8005d14:	60da      	str	r2, [r3, #12]
 8005d16:	e05f      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e05b      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d007      	beq.n	8005d40 <USB_HC_StartXfer+0x10c>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d003      	beq.n	8005d40 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	60da      	str	r2, [r3, #12]
 8005d3e:	e04b      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	2203      	movs	r2, #3
 8005d44:	60da      	str	r2, [r3, #12]
 8005d46:	e047      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d10d      	bne.n	8005d6a <USB_HC_StartXfer+0x136>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	8a92      	ldrh	r2, [r2, #20]
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d907      	bls.n	8005d6a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	8a92      	ldrh	r2, [r2, #20]
 8005d60:	fb03 f202 	mul.w	r2, r3, r2
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	61da      	str	r2, [r3, #28]
 8005d68:	e036      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	6a1a      	ldr	r2, [r3, #32]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	61da      	str	r2, [r3, #28]
 8005d72:	e031      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d018      	beq.n	8005dae <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	8a92      	ldrh	r2, [r2, #20]
 8005d84:	4413      	add	r3, r2
 8005d86:	3b01      	subs	r3, #1
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	8a92      	ldrh	r2, [r2, #20]
 8005d8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d90:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005d92:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005d94:	8b7b      	ldrh	r3, [r7, #26]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d90b      	bls.n	8005db2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005d9a:	8b7b      	ldrh	r3, [r7, #26]
 8005d9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005d9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	8a92      	ldrh	r2, [r2, #20]
 8005da4:	fb03 f202 	mul.w	r2, r3, r2
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	61da      	str	r2, [r3, #28]
 8005dac:	e001      	b.n	8005db2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005dae:	2301      	movs	r3, #1
 8005db0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	78db      	ldrb	r3, [r3, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005dba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	8a92      	ldrh	r2, [r2, #20]
 8005dc0:	fb03 f202 	mul.w	r2, r3, r2
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61da      	str	r2, [r3, #28]
 8005dc8:	e006      	b.n	8005dd8 <USB_HC_StartXfer+0x1a4>
 8005dca:	bf00      	nop
 8005dcc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	6a1a      	ldr	r2, [r3, #32]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005de0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005de2:	04d9      	lsls	r1, r3, #19
 8005de4:	4ba3      	ldr	r3, [pc, #652]	@ (8006074 <USB_HC_StartXfer+0x440>)
 8005de6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005de8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	7d9b      	ldrb	r3, [r3, #22]
 8005dee:	075b      	lsls	r3, r3, #29
 8005df0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	0148      	lsls	r0, r1, #5
 8005df8:	6a39      	ldr	r1, [r7, #32]
 8005dfa:	4401      	add	r1, r0
 8005dfc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e00:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005e02:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	6999      	ldr	r1, [r3, #24]
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf0c      	ite	eq
 8005e2e:	2301      	moveq	r3, #1
 8005e30:	2300      	movne	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	69fa      	ldr	r2, [r7, #28]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	6a3a      	ldr	r2, [r7, #32]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e50:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e54:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	7e7b      	ldrb	r3, [r7, #25]
 8005e66:	075b      	lsls	r3, r3, #29
 8005e68:	69f9      	ldr	r1, [r7, #28]
 8005e6a:	0148      	lsls	r0, r1, #5
 8005e6c:	6a39      	ldr	r1, [r7, #32]
 8005e6e:	4401      	add	r1, r0
 8005e70:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005e74:	4313      	orrs	r3, r2
 8005e76:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	799b      	ldrb	r3, [r3, #6]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	f040 80c3 	bne.w	8006008 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	7c5b      	ldrb	r3, [r3, #17]
 8005e86:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	0151      	lsls	r1, r2, #5
 8005e92:	6a3a      	ldr	r2, [r7, #32]
 8005e94:	440a      	add	r2, r1
 8005e96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005e9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005e9e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	69fa      	ldr	r2, [r7, #28]
 8005eb0:	0151      	lsls	r1, r2, #5
 8005eb2:	6a3a      	ldr	r2, [r7, #32]
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eba:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ebe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	79db      	ldrb	r3, [r3, #7]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d123      	bne.n	8005f10 <USB_HC_StartXfer+0x2dc>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	78db      	ldrb	r3, [r3, #3]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d11f      	bne.n	8005f10 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	69fa      	ldr	r2, [r7, #28]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eee:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	7c9b      	ldrb	r3, [r3, #18]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d003      	beq.n	8005f20 <USB_HC_StartXfer+0x2ec>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	7c9b      	ldrb	r3, [r3, #18]
 8005f1c:	2b03      	cmp	r3, #3
 8005f1e:	d117      	bne.n	8005f50 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d113      	bne.n	8005f50 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	78db      	ldrb	r3, [r3, #3]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10f      	bne.n	8005f50 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	69fa      	ldr	r2, [r7, #28]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	6a3a      	ldr	r2, [r7, #32]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f4e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	7c9b      	ldrb	r3, [r3, #18]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d162      	bne.n	800601e <USB_HC_StartXfer+0x3ea>
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	78db      	ldrb	r3, [r3, #3]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d15e      	bne.n	800601e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d858      	bhi.n	800601c <USB_HC_StartXfer+0x3e8>
 8005f6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f70 <USB_HC_StartXfer+0x33c>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005f81 	.word	0x08005f81
 8005f74:	08005fa3 	.word	0x08005fa3
 8005f78:	08005fc5 	.word	0x08005fc5
 8005f7c:	08005fe7 	.word	0x08005fe7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	6a3a      	ldr	r2, [r7, #32]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f9e:	6053      	str	r3, [r2, #4]
          break;
 8005fa0:	e03d      	b.n	800601e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	6a3a      	ldr	r2, [r7, #32]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fbc:	f043 030e 	orr.w	r3, r3, #14
 8005fc0:	6053      	str	r3, [r2, #4]
          break;
 8005fc2:	e02c      	b.n	800601e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	0151      	lsls	r1, r2, #5
 8005fd6:	6a3a      	ldr	r2, [r7, #32]
 8005fd8:	440a      	add	r2, r1
 8005fda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fe2:	6053      	str	r3, [r2, #4]
          break;
 8005fe4:	e01b      	b.n	800601e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	69fa      	ldr	r2, [r7, #28]
 8005ff6:	0151      	lsls	r1, r2, #5
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006004:	6053      	str	r3, [r2, #4]
          break;
 8006006:	e00a      	b.n	800601e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006014:	461a      	mov	r2, r3
 8006016:	2300      	movs	r3, #0
 8006018:	6053      	str	r3, [r2, #4]
 800601a:	e000      	b.n	800601e <USB_HC_StartXfer+0x3ea>
          break;
 800601c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	4413      	add	r3, r2
 8006026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006034:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	78db      	ldrb	r3, [r3, #3]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	e003      	b.n	8006050 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800604e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006056:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	4413      	add	r3, r2
 8006060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006064:	461a      	mov	r2, r3
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006070:	2300      	movs	r3, #0
 8006072:	e055      	b.n	8006120 <USB_HC_StartXfer+0x4ec>
 8006074:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	78db      	ldrb	r3, [r3, #3]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d14e      	bne.n	800611e <USB_HC_StartXfer+0x4ea>
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d04a      	beq.n	800611e <USB_HC_StartXfer+0x4ea>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	79db      	ldrb	r3, [r3, #7]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d146      	bne.n	800611e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	7c9b      	ldrb	r3, [r3, #18]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d831      	bhi.n	80060fc <USB_HC_StartXfer+0x4c8>
 8006098:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <USB_HC_StartXfer+0x46c>)
 800609a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609e:	bf00      	nop
 80060a0:	080060b1 	.word	0x080060b1
 80060a4:	080060d5 	.word	0x080060d5
 80060a8:	080060b1 	.word	0x080060b1
 80060ac:	080060d5 	.word	0x080060d5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	3303      	adds	r3, #3
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80060ba:	8afa      	ldrh	r2, [r7, #22]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d91c      	bls.n	8006100 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f043 0220 	orr.w	r2, r3, #32
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	619a      	str	r2, [r3, #24]
        }
        break;
 80060d2:	e015      	b.n	8006100 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	3303      	adds	r3, #3
 80060da:	089b      	lsrs	r3, r3, #2
 80060dc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060de:	8afa      	ldrh	r2, [r7, #22]
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d90a      	bls.n	8006104 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	699b      	ldr	r3, [r3, #24]
 80060f2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80060fa:	e003      	b.n	8006104 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80060fc:	bf00      	nop
 80060fe:	e002      	b.n	8006106 <USB_HC_StartXfer+0x4d2>
        break;
 8006100:	bf00      	nop
 8006102:	e000      	b.n	8006106 <USB_HC_StartXfer+0x4d2>
        break;
 8006104:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6999      	ldr	r1, [r3, #24]
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	785a      	ldrb	r2, [r3, #1]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	b29b      	uxth	r3, r3
 8006114:	2000      	movs	r0, #0
 8006116:	9000      	str	r0, [sp, #0]
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff f9c9 	bl	80054b0 <USB_WritePacket>
  }

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3728      	adds	r7, #40	@ 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	b29b      	uxth	r3, r3
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800614a:	b480      	push	{r7}
 800614c:	b089      	sub	sp, #36	@ 0x24
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	0c9b      	lsrs	r3, r3, #18
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	0fdb      	lsrs	r3, r3, #31
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	4413      	add	r3, r2
 8006196:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	0fdb      	lsrs	r3, r3, #31
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b20      	cmp	r3, #32
 80061ae:	d10d      	bne.n	80061cc <USB_HC_Halt+0x82>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <USB_HC_Halt+0x82>
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d002      	beq.n	80061c8 <USB_HC_Halt+0x7e>
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d101      	bne.n	80061cc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e0d8      	b.n	800637e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <USB_HC_Halt+0x8e>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d173      	bne.n	80062c0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	69fa      	ldr	r2, [r7, #28]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061f6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d14a      	bne.n	800629a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d133      	bne.n	8006278 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	440a      	add	r2, r1
 8006226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800622a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800622e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	4413      	add	r3, r2
 8006238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	440a      	add	r2, r1
 8006246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800624a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800624e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	3301      	adds	r3, #1
 8006254:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800625c:	d82e      	bhi.n	80062bc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006274:	d0ec      	beq.n	8006250 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006276:	e081      	b.n	800637c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	0151      	lsls	r1, r2, #5
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	440a      	add	r2, r1
 800628e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006292:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006296:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006298:	e070      	b.n	800637c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	0151      	lsls	r1, r2, #5
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	440a      	add	r2, r1
 80062b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80062b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ba:	e05f      	b.n	800637c <USB_HC_Halt+0x232>
            break;
 80062bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062be:	e05d      	b.n	800637c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	69fb      	ldr	r3, [r7, #28]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	0151      	lsls	r1, r2, #5
 80062d2:	69fa      	ldr	r2, [r7, #28]
 80062d4:	440a      	add	r2, r1
 80062d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d133      	bne.n	8006358 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	69fa      	ldr	r2, [r7, #28]
 8006304:	440a      	add	r2, r1
 8006306:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800630a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800630e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	4413      	add	r3, r2
 8006318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	69ba      	ldr	r2, [r7, #24]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	69fa      	ldr	r2, [r7, #28]
 8006324:	440a      	add	r2, r1
 8006326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800632a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800632e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	3301      	adds	r3, #1
 8006334:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800633c:	d81d      	bhi.n	800637a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006354:	d0ec      	beq.n	8006330 <USB_HC_Halt+0x1e6>
 8006356:	e011      	b.n	800637c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	e000      	b.n	800637c <USB_HC_Halt+0x232>
          break;
 800637a:	bf00      	nop
    }
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3724      	adds	r7, #36	@ 0x24
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	460b      	mov	r3, r1
 8006396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800639c:	78fb      	ldrb	r3, [r7, #3]
 800639e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	04da      	lsls	r2, r3, #19
 80063a8:	4b15      	ldr	r3, [pc, #84]	@ (8006400 <USB_DoPing+0x74>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ea:	461a      	mov	r2, r3
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	1ff80000 	.word	0x1ff80000

08006404 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7fe ff8c 	bl	8005336 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800641e:	2110      	movs	r1, #16
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7fe ffe5 	bl	80053f0 <USB_FlushTxFifo>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff f80f 	bl	8005454 <USB_FlushRxFifo>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d001      	beq.n	8006440 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e01f      	b.n	8006486 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	015a      	lsls	r2, r3, #5
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	4413      	add	r3, r2
 800644e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800645c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006464:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800646c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800647a:	461a      	mov	r2, r3
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	3301      	adds	r3, #1
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b0f      	cmp	r3, #15
 800648a:	d9dc      	bls.n	8006446 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800648c:	2300      	movs	r3, #0
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e034      	b.n	80064fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c6:	461a      	mov	r2, r3
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064d8:	d80c      	bhi.n	80064f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064f0:	d0ec      	beq.n	80064cc <USB_StopHost+0xc8>
 80064f2:	e000      	b.n	80064f6 <USB_StopHost+0xf2>
        break;
 80064f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d9c7      	bls.n	8006492 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006508:	461a      	mov	r2, r3
 800650a:	f04f 33ff 	mov.w	r3, #4294967295
 800650e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f04f 32ff 	mov.w	r2, #4294967295
 8006516:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7fe fefb 	bl	8005314 <USB_EnableGlobalInt>

  return ret;
 800651e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006528:	b590      	push	{r4, r7, lr}
 800652a:	b089      	sub	sp, #36	@ 0x24
 800652c:	af04      	add	r7, sp, #16
 800652e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006530:	2301      	movs	r3, #1
 8006532:	2202      	movs	r2, #2
 8006534:	2102      	movs	r1, #2
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fcd1 	bl	8006ede <USBH_FindInterface>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2bff      	cmp	r3, #255	@ 0xff
 8006544:	d002      	beq.n	800654c <USBH_CDC_InterfaceInit+0x24>
 8006546:	7bfb      	ldrb	r3, [r7, #15]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d901      	bls.n	8006550 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800654c:	2302      	movs	r3, #2
 800654e:	e13d      	b.n	80067cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fca6 	bl	8006ea6 <USBH_SelectInterface>
 800655a:	4603      	mov	r3, r0
 800655c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800655e:	7bbb      	ldrb	r3, [r7, #14]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006564:	2302      	movs	r3, #2
 8006566:	e131      	b.n	80067cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800656e:	2050      	movs	r0, #80	@ 0x50
 8006570:	f005 fd5e 	bl	800c030 <malloc>
 8006574:	4603      	mov	r3, r0
 8006576:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006588:	2302      	movs	r3, #2
 800658a:	e11f      	b.n	80067cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800658c:	2250      	movs	r2, #80	@ 0x50
 800658e:	2100      	movs	r1, #0
 8006590:	68b8      	ldr	r0, [r7, #8]
 8006592:	f005 fe0b 	bl	800c1ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	211a      	movs	r1, #26
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	4413      	add	r3, r2
 80065a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	b25b      	sxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	da15      	bge.n	80065da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	211a      	movs	r1, #26
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	4413      	add	r3, r2
 80065ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80065be:	781a      	ldrb	r2, [r3, #0]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	211a      	movs	r1, #26
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80065d4:	881a      	ldrh	r2, [r3, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f002 fa18 	bl	8008a16 <USBH_AllocPipe>
 80065e6:	4603      	mov	r3, r0
 80065e8:	461a      	mov	r2, r3
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	7819      	ldrb	r1, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	7858      	ldrb	r0, [r3, #1]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	8952      	ldrh	r2, [r2, #10]
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	2203      	movs	r2, #3
 800660a:	9201      	str	r2, [sp, #4]
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4623      	mov	r3, r4
 8006610:	4602      	mov	r2, r0
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f002 f9d0 	bl	80089b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2200      	movs	r2, #0
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f005 fc7f 	bl	800bf24 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006626:	2300      	movs	r3, #0
 8006628:	2200      	movs	r2, #0
 800662a:	210a      	movs	r1, #10
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fc56 	bl	8006ede <USBH_FindInterface>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2bff      	cmp	r3, #255	@ 0xff
 800663a:	d002      	beq.n	8006642 <USBH_CDC_InterfaceInit+0x11a>
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d901      	bls.n	8006646 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006642:	2302      	movs	r3, #2
 8006644:	e0c2      	b.n	80067cc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006646:	7bfb      	ldrb	r3, [r7, #15]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	211a      	movs	r1, #26
 800664c:	fb01 f303 	mul.w	r3, r1, r3
 8006650:	4413      	add	r3, r2
 8006652:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	b25b      	sxtb	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	da16      	bge.n	800668c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	211a      	movs	r1, #26
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	4413      	add	r3, r2
 800666a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800666e:	781a      	ldrb	r2, [r3, #0]
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	211a      	movs	r1, #26
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	4413      	add	r3, r2
 8006680:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006684:	881a      	ldrh	r2, [r3, #0]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	835a      	strh	r2, [r3, #26]
 800668a:	e015      	b.n	80066b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	211a      	movs	r1, #26
 8006692:	fb01 f303 	mul.w	r3, r1, r3
 8006696:	4413      	add	r3, r2
 8006698:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800669c:	781a      	ldrb	r2, [r3, #0]
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	211a      	movs	r1, #26
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80066b2:	881a      	ldrh	r2, [r3, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	211a      	movs	r1, #26
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	b25b      	sxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da16      	bge.n	80066fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	211a      	movs	r1, #26
 80066d6:	fb01 f303 	mul.w	r3, r1, r3
 80066da:	4413      	add	r3, r2
 80066dc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80066e0:	781a      	ldrb	r2, [r3, #0]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	211a      	movs	r1, #26
 80066ec:	fb01 f303 	mul.w	r3, r1, r3
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80066f6:	881a      	ldrh	r2, [r3, #0]
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	835a      	strh	r2, [r3, #26]
 80066fc:	e015      	b.n	800672a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80066fe:	7bfb      	ldrb	r3, [r7, #15]
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	211a      	movs	r1, #26
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	4413      	add	r3, r2
 800670a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800670e:	781a      	ldrb	r2, [r3, #0]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	211a      	movs	r1, #26
 800671a:	fb01 f303 	mul.w	r3, r1, r3
 800671e:	4413      	add	r3, r2
 8006720:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006724:	881a      	ldrh	r2, [r3, #0]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	7b9b      	ldrb	r3, [r3, #14]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f002 f970 	bl	8008a16 <USBH_AllocPipe>
 8006736:	4603      	mov	r3, r0
 8006738:	461a      	mov	r2, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	7bdb      	ldrb	r3, [r3, #15]
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f002 f966 	bl	8008a16 <USBH_AllocPipe>
 800674a:	4603      	mov	r3, r0
 800674c:	461a      	mov	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	7b59      	ldrb	r1, [r3, #13]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	7b98      	ldrb	r0, [r3, #14]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	8b12      	ldrh	r2, [r2, #24]
 800676a:	9202      	str	r2, [sp, #8]
 800676c:	2202      	movs	r2, #2
 800676e:	9201      	str	r2, [sp, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	4623      	mov	r3, r4
 8006774:	4602      	mov	r2, r0
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f002 f91e 	bl	80089b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	7b19      	ldrb	r1, [r3, #12]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	7bd8      	ldrb	r0, [r3, #15]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	8b52      	ldrh	r2, [r2, #26]
 8006794:	9202      	str	r2, [sp, #8]
 8006796:	2202      	movs	r2, #2
 8006798:	9201      	str	r2, [sp, #4]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	4623      	mov	r3, r4
 800679e:	4602      	mov	r2, r0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f002 f909 	bl	80089b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	7b5b      	ldrb	r3, [r3, #13]
 80067b2:	2200      	movs	r2, #0
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f005 fbb4 	bl	800bf24 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	7b1b      	ldrb	r3, [r3, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f005 fbad 	bl	800bf24 <USBH_LL_SetToggle>

  return USBH_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}

080067d4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f002 f8fe 	bl	80089f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f002 f929 	bl	8008a58 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	7b1b      	ldrb	r3, [r3, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00e      	beq.n	8006832 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	7b1b      	ldrb	r3, [r3, #12]
 8006818:	4619      	mov	r1, r3
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f002 f8eb 	bl	80089f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	7b1b      	ldrb	r3, [r3, #12]
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f002 f916 	bl	8008a58 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	7b5b      	ldrb	r3, [r3, #13]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	7b5b      	ldrb	r3, [r3, #13]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f002 f8d8 	bl	80089f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	7b5b      	ldrb	r3, [r3, #13]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f002 f903 	bl	8008a58 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00b      	beq.n	800687c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800686a:	69db      	ldr	r3, [r3, #28]
 800686c:	4618      	mov	r0, r3
 800686e:	f005 fbe7 	bl	800c040 <free>
    phost->pActiveClass->pData = 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006878:	2200      	movs	r2, #0
 800687a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3340      	adds	r3, #64	@ 0x40
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f8b1 	bl	8006a06 <GetLineCoding>
 80068a4:	4603      	mov	r3, r0
 80068a6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80068a8:	7afb      	ldrb	r3, [r7, #11]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d105      	bne.n	80068ba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80068b4:	2102      	movs	r1, #2
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80068ba:	7afb      	ldrb	r3, [r7, #11]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80068cc:	2301      	movs	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d877      	bhi.n	80069d8 <USBH_CDC_Process+0x114>
 80068e8:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <USBH_CDC_Process+0x2c>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006905 	.word	0x08006905
 80068f4:	0800690b 	.word	0x0800690b
 80068f8:	0800693b 	.word	0x0800693b
 80068fc:	080069af 	.word	0x080069af
 8006900:	080069bd 	.word	0x080069bd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006904:	2300      	movs	r3, #0
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	e06d      	b.n	80069e6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800690e:	4619      	mov	r1, r3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f897 	bl	8006a44 <SetLineCoding>
 8006916:	4603      	mov	r3, r0
 8006918:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2202      	movs	r2, #2
 8006924:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006928:	e058      	b.n	80069dc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d055      	beq.n	80069dc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2204      	movs	r2, #4
 8006934:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006938:	e050      	b.n	80069dc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	3340      	adds	r3, #64	@ 0x40
 800693e:	4619      	mov	r1, r3
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 f860 	bl	8006a06 <GetLineCoding>
 8006946:	4603      	mov	r3, r0
 8006948:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d126      	bne.n	800699e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006962:	791b      	ldrb	r3, [r3, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d13b      	bne.n	80069e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006974:	429a      	cmp	r2, r3
 8006976:	d133      	bne.n	80069e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006982:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006984:	429a      	cmp	r2, r3
 8006986:	d12b      	bne.n	80069e0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006990:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006992:	429a      	cmp	r2, r3
 8006994:	d124      	bne.n	80069e0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f982 	bl	8006ca0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800699c:	e020      	b.n	80069e0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800699e:	7bbb      	ldrb	r3, [r7, #14]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d01d      	beq.n	80069e0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2204      	movs	r2, #4
 80069a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80069ac:	e018      	b.n	80069e0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f867 	bl	8006a82 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f8f6 	bl	8006ba6 <CDC_ProcessReception>
      break;
 80069ba:	e014      	b.n	80069e6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80069bc:	2100      	movs	r1, #0
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 f984 	bl	8007ccc <USBH_ClrFeature>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80069c8:	7bbb      	ldrb	r3, [r7, #14]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10a      	bne.n	80069e4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80069d6:	e005      	b.n	80069e4 <USBH_CDC_Process+0x120>

    default:
      break;
 80069d8:	bf00      	nop
 80069da:	e004      	b.n	80069e6 <USBH_CDC_Process+0x122>
      break;
 80069dc:	bf00      	nop
 80069de:	e002      	b.n	80069e6 <USBH_CDC_Process+0x122>
      break;
 80069e0:	bf00      	nop
 80069e2:	e000      	b.n	80069e6 <USBH_CDC_Process+0x122>
      break;
 80069e4:	bf00      	nop

  }

  return status;
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	22a1      	movs	r2, #161	@ 0xa1
 8006a14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2221      	movs	r2, #33	@ 0x21
 8006a1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2207      	movs	r2, #7
 8006a2c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	2207      	movs	r2, #7
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 fc7e 	bl	8008336 <USBH_CtlReq>
 8006a3a:	4603      	mov	r3, r0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2221      	movs	r2, #33	@ 0x21
 8006a52:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2207      	movs	r2, #7
 8006a6a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2207      	movs	r2, #7
 8006a70:	4619      	mov	r1, r3
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f001 fc5f 	bl	8008336 <USBH_CtlReq>
 8006a78:	4603      	mov	r3, r0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af02      	add	r7, sp, #8
 8006a88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a94:	2300      	movs	r3, #0
 8006a96:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d002      	beq.n	8006aa8 <CDC_ProcessTransmission+0x26>
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d023      	beq.n	8006aee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006aa6:	e07a      	b.n	8006b9e <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	8b12      	ldrh	r2, [r2, #24]
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d90b      	bls.n	8006acc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	69d9      	ldr	r1, [r3, #28]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	8b1a      	ldrh	r2, [r3, #24]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	7b5b      	ldrb	r3, [r3, #13]
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	9000      	str	r0, [sp, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 ff34 	bl	8008932 <USBH_BulkSendData>
 8006aca:	e00b      	b.n	8006ae4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	7b5b      	ldrb	r3, [r3, #13]
 8006ada:	2001      	movs	r0, #1
 8006adc:	9000      	str	r0, [sp, #0]
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f001 ff27 	bl	8008932 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006aec:	e057      	b.n	8006b9e <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	7b5b      	ldrb	r3, [r3, #13]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f005 f9eb 	bl	800bed0 <USBH_LL_GetURBState>
 8006afa:	4603      	mov	r3, r0
 8006afc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d136      	bne.n	8006b72 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	8b12      	ldrh	r2, [r2, #24]
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d90e      	bls.n	8006b2e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	8b12      	ldrh	r2, [r2, #24]
 8006b18:	1a9a      	subs	r2, r3, r2
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	8b12      	ldrh	r2, [r2, #24]
 8006b26:	441a      	add	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	61da      	str	r2, [r3, #28]
 8006b2c:	e002      	b.n	8006b34 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d004      	beq.n	8006b46 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006b44:	e006      	b.n	8006b54 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f892 	bl	8006c78 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f002 f954 	bl	8008e18 <osMessageQueuePut>
      break;
 8006b70:	e014      	b.n	8006b9c <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d111      	bne.n	8006b9c <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2204      	movs	r2, #4
 8006b84:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006b94:	2300      	movs	r3, #0
 8006b96:	2200      	movs	r2, #0
 8006b98:	f002 f93e 	bl	8008e18 <osMessageQueuePut>
      break;
 8006b9c:	bf00      	nop
  }
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b086      	sub	sp, #24
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bb4:	69db      	ldr	r3, [r3, #28]
 8006bb6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d002      	beq.n	8006bcc <CDC_ProcessReception+0x26>
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00e      	beq.n	8006be8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006bca:	e051      	b.n	8006c70 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	6a19      	ldr	r1, [r3, #32]
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	8b5a      	ldrh	r2, [r3, #26]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	7b1b      	ldrb	r3, [r3, #12]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f001 fecf 	bl	800897c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2204      	movs	r2, #4
 8006be2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006be6:	e043      	b.n	8006c70 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	7b1b      	ldrb	r3, [r3, #12]
 8006bec:	4619      	mov	r1, r3
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f005 f96e 	bl	800bed0 <USBH_LL_GetURBState>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006bf8:	7cfb      	ldrb	r3, [r7, #19]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d137      	bne.n	8006c6e <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	7b1b      	ldrb	r3, [r3, #12]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f005 f8d1 	bl	800bdac <USBH_LL_GetLastXferSize>
 8006c0a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d016      	beq.n	8006c44 <CDC_ProcessReception+0x9e>
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	8b5b      	ldrh	r3, [r3, #26]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d110      	bne.n	8006c44 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	1ad2      	subs	r2, r2, r3
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	6a1a      	ldr	r2, [r3, #32]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	441a      	add	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2203      	movs	r2, #3
 8006c3e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006c42:	e006      	b.n	8006c52 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f81d 	bl	8006c8c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2204      	movs	r2, #4
 8006c56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006c66:	2300      	movs	r3, #0
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f002 f8d5 	bl	8008e18 <osMessageQueuePut>
      break;
 8006c6e:	bf00      	nop
  }
}
 8006c70:	bf00      	nop
 8006c72:	3718      	adds	r7, #24
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c80:	bf00      	nop
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e044      	b.n	8006d56 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	79fa      	ldrb	r2, [r7, #7]
 8006cd0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f841 	bl	8006d6c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d003      	beq.n	8006d18 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2104      	movs	r1, #4
 8006d1c:	2010      	movs	r0, #16
 8006d1e:	f002 f808 	bl	8008d32 <osMessageQueueNew>
 8006d22:	4602      	mov	r2, r0
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <USBH_Init+0xac>)
 8006d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8006d64 <USBH_Init+0xb0>)
 8006d2e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8006d30:	4b0b      	ldr	r3, [pc, #44]	@ (8006d60 <USBH_Init+0xac>)
 8006d32:	2280      	movs	r2, #128	@ 0x80
 8006d34:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8006d36:	4b0a      	ldr	r3, [pc, #40]	@ (8006d60 <USBH_Init+0xac>)
 8006d38:	2218      	movs	r2, #24
 8006d3a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8006d3c:	4a08      	ldr	r2, [pc, #32]	@ (8006d60 <USBH_Init+0xac>)
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	4809      	ldr	r0, [pc, #36]	@ (8006d68 <USBH_Init+0xb4>)
 8006d42:	f001 ff49 	bl	8008bd8 <osThreadNew>
 8006d46:	4602      	mov	r2, r0
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f004 ff78 	bl	800bc44 <USBH_LL_Init>

  return USBH_OK;
 8006d54:	2300      	movs	r3, #0
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200001e4 	.word	0x200001e4
 8006d64:	0800c30c 	.word	0x0800c30c
 8006d68:	08007a1d 	.word	0x08007a1d

08006d6c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006d74:	2300      	movs	r3, #0
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]
 8006d7c:	e009      	b.n	8006d92 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	33e0      	adds	r3, #224	@ 0xe0
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	2200      	movs	r2, #0
 8006d8a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	60fb      	str	r3, [r7, #12]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2b0f      	cmp	r3, #15
 8006d96:	d9f2      	bls.n	8006d7e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e009      	b.n	8006db2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60fb      	str	r3, [r7, #12]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006db8:	d3f1      	bcc.n	8006d9e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2240      	movs	r2, #64	@ 0x40
 8006dde:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	331c      	adds	r3, #28
 8006e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f005 f9cb 	bl	800c1ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e20:	2100      	movs	r1, #0
 8006e22:	4618      	mov	r0, r3
 8006e24:	f005 f9c2 	bl	800c1ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006e2e:	2212      	movs	r2, #18
 8006e30:	2100      	movs	r1, #0
 8006e32:	4618      	mov	r0, r3
 8006e34:	f005 f9ba 	bl	800c1ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006e3e:	223e      	movs	r2, #62	@ 0x3e
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f005 f9b2 	bl	800c1ac <memset>

  return USBH_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d016      	beq.n	8006e94 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d10e      	bne.n	8006e8e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e76:	1c59      	adds	r1, r3, #1
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	33de      	adds	r3, #222	@ 0xde
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]
 8006e8c:	e004      	b.n	8006e98 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	e001      	b.n	8006e98 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006e94:	2302      	movs	r3, #2
 8006e96:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006ebc:	78fa      	ldrb	r2, [r7, #3]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d204      	bcs.n	8006ecc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006eca:	e001      	b.n	8006ed0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b087      	sub	sp, #28
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	4608      	mov	r0, r1
 8006ee8:	4611      	mov	r1, r2
 8006eea:	461a      	mov	r2, r3
 8006eec:	4603      	mov	r3, r0
 8006eee:	70fb      	strb	r3, [r7, #3]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70bb      	strb	r3, [r7, #2]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006f06:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f08:	e025      	b.n	8006f56 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	221a      	movs	r2, #26
 8006f0e:	fb02 f303 	mul.w	r3, r2, r3
 8006f12:	3308      	adds	r3, #8
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	3302      	adds	r3, #2
 8006f1a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	795b      	ldrb	r3, [r3, #5]
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d002      	beq.n	8006f2c <USBH_FindInterface+0x4e>
 8006f26:	78fb      	ldrb	r3, [r7, #3]
 8006f28:	2bff      	cmp	r3, #255	@ 0xff
 8006f2a:	d111      	bne.n	8006f50 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006f30:	78ba      	ldrb	r2, [r7, #2]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d002      	beq.n	8006f3c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f36:	78bb      	ldrb	r3, [r7, #2]
 8006f38:	2bff      	cmp	r3, #255	@ 0xff
 8006f3a:	d109      	bne.n	8006f50 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006f40:	787a      	ldrb	r2, [r7, #1]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d002      	beq.n	8006f4c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006f46:	787b      	ldrb	r3, [r7, #1]
 8006f48:	2bff      	cmp	r3, #255	@ 0xff
 8006f4a:	d101      	bne.n	8006f50 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
 8006f4e:	e006      	b.n	8006f5e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006f50:	7dfb      	ldrb	r3, [r7, #23]
 8006f52:	3301      	adds	r3, #1
 8006f54:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d9d6      	bls.n	8006f0a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006f5c:	23ff      	movs	r3, #255	@ 0xff
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f004 fea2 	bl	800bcbc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006f78:	2101      	movs	r1, #1
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f004 ffbb 	bl	800bef6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af04      	add	r7, sp, #16
 8006f92:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006f94:	2302      	movs	r3, #2
 8006f96:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d102      	bne.n	8006fae <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2203      	movs	r2, #3
 8006fac:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b0b      	cmp	r3, #11
 8006fb6:	f200 8244 	bhi.w	8007442 <USBH_Process+0x4b6>
 8006fba:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc0 <USBH_Process+0x34>)
 8006fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	0800703f 	.word	0x0800703f
 8006fc8:	080070c3 	.word	0x080070c3
 8006fcc:	080073c1 	.word	0x080073c1
 8006fd0:	08007443 	.word	0x08007443
 8006fd4:	0800717f 	.word	0x0800717f
 8006fd8:	0800734b 	.word	0x0800734b
 8006fdc:	080071d1 	.word	0x080071d1
 8006fe0:	0800720d 	.word	0x0800720d
 8006fe4:	08007245 	.word	0x08007245
 8006fe8:	080072a3 	.word	0x080072a3
 8006fec:	080073a9 	.word	0x080073a9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8224 	beq.w	8007446 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007004:	20c8      	movs	r0, #200	@ 0xc8
 8007006:	f004 ffc0 	bl	800bf8a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f004 feb3 	bl	800bd76 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	f001 feee 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800703c:	e203      	b.n	8007446 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007044:	2b01      	cmp	r3, #1
 8007046:	d107      	bne.n	8007058 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	e025      	b.n	80070a4 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800705e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007062:	d914      	bls.n	800708e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800706a:	3301      	adds	r3, #1
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800707a:	2b03      	cmp	r3, #3
 800707c:	d903      	bls.n	8007086 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	220d      	movs	r2, #13
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	e00e      	b.n	80070a4 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
 800708c:	e00a      	b.n	80070a4 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007094:	f103 020a 	add.w	r2, r3, #10
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800709e:	200a      	movs	r0, #10
 80070a0:	f004 ff73 	bl	800bf8a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80070b8:	2300      	movs	r3, #0
 80070ba:	2200      	movs	r2, #0
 80070bc:	f001 feac 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 80070c0:	e1c8      	b.n	8007454 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80070d2:	2104      	movs	r1, #4
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80070d8:	2064      	movs	r0, #100	@ 0x64
 80070da:	f004 ff56 	bl	800bf8a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f004 fe22 	bl	800bd28 <USBH_LL_GetSpeed>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2205      	movs	r2, #5
 80070f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80070f4:	2100      	movs	r1, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 fc8d 	bl	8008a16 <USBH_AllocPipe>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461a      	mov	r2, r3
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007104:	2180      	movs	r1, #128	@ 0x80
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f001 fc85 	bl	8008a16 <USBH_AllocPipe>
 800710c:	4603      	mov	r3, r0
 800710e:	461a      	mov	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7919      	ldrb	r1, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007128:	9202      	str	r2, [sp, #8]
 800712a:	2200      	movs	r2, #0
 800712c:	9201      	str	r2, [sp, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	4603      	mov	r3, r0
 8007132:	2280      	movs	r2, #128	@ 0x80
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fc3f 	bl	80089b8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7959      	ldrb	r1, [r3, #5]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800714e:	9202      	str	r2, [sp, #8]
 8007150:	2200      	movs	r2, #0
 8007152:	9201      	str	r2, [sp, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4603      	mov	r3, r0
 8007158:	2200      	movs	r2, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f001 fc2c 	bl	80089b8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007174:	2300      	movs	r3, #0
 8007176:	2200      	movs	r2, #0
 8007178:	f001 fe4e 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 800717c:	e16a      	b.n	8007454 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f96e 	bl	8007460 <USBH_HandleEnum>
 8007184:	4603      	mov	r3, r0
 8007186:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	f040 815c 	bne.w	800744a <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d103      	bne.n	80071ac <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2208      	movs	r2, #8
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	e002      	b.n	80071b2 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2207      	movs	r2, #7
 80071b0:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2205      	movs	r2, #5
 80071b6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80071c6:	2300      	movs	r3, #0
 80071c8:	2200      	movs	r2, #0
 80071ca:	f001 fe25 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80071ce:	e13c      	b.n	800744a <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 8139 	beq.w	800744e <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80071e2:	2101      	movs	r1, #1
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2208      	movs	r2, #8
 80071ec:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2205      	movs	r2, #5
 80071f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007202:	2300      	movs	r3, #0
 8007204:	2200      	movs	r2, #0
 8007206:	f001 fe07 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800720a:	e120      	b.n	800744e <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007212:	4619      	mov	r1, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fd12 	bl	8007c3e <USBH_SetCfg>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d102      	bne.n	8007226 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2209      	movs	r2, #9
 8007224:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2201      	movs	r2, #1
 800722a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800723a:	2300      	movs	r3, #0
 800723c:	2200      	movs	r2, #0
 800723e:	f001 fdeb 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 8007242:	e107      	b.n	8007454 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800724a:	f003 0320 	and.w	r3, r3, #32
 800724e:	2b00      	cmp	r3, #0
 8007250:	d015      	beq.n	800727e <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007252:	2101      	movs	r1, #1
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fd15 	bl	8007c84 <USBH_SetFeature>
 800725a:	4603      	mov	r3, r0
 800725c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800725e:	7bbb      	ldrb	r3, [r7, #14]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	220a      	movs	r2, #10
 800726a:	701a      	strb	r2, [r3, #0]
 800726c:	e00a      	b.n	8007284 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b03      	cmp	r3, #3
 8007274:	d106      	bne.n	8007284 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	220a      	movs	r2, #10
 800727a:	701a      	strb	r2, [r3, #0]
 800727c:	e002      	b.n	8007284 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	220a      	movs	r2, #10
 8007282:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007298:	2300      	movs	r3, #0
 800729a:	2200      	movs	r2, #0
 800729c:	f001 fdbc 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 80072a0:	e0d8      	b.n	8007454 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d03f      	beq.n	800732c <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
 80072b8:	e016      	b.n	80072e8 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80072ba:	7bfa      	ldrb	r2, [r7, #15]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	32de      	adds	r2, #222	@ 0xde
 80072c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c4:	791a      	ldrb	r2, [r3, #4]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d108      	bne.n	80072e2 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	32de      	adds	r2, #222	@ 0xde
 80072d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80072e0:	e005      	b.n	80072ee <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
 80072e4:	3301      	adds	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0e5      	beq.n	80072ba <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d016      	beq.n	8007326 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2206      	movs	r2, #6
 800730e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007316:	2103      	movs	r1, #3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	4798      	blx	r3
 800731c:	e006      	b.n	800732c <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	220d      	movs	r2, #13
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e002      	b.n	800732c <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	220d      	movs	r2, #13
 800732a:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2205      	movs	r2, #5
 8007330:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007340:	2300      	movs	r3, #0
 8007342:	2200      	movs	r2, #0
 8007344:	f001 fd68 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 8007348:	e084      	b.n	8007454 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d017      	beq.n	8007384 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
 8007360:	4603      	mov	r3, r0
 8007362:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d103      	bne.n	8007374 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	220b      	movs	r2, #11
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	e00a      	b.n	800738a <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d106      	bne.n	800738a <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	220d      	movs	r2, #13
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	e002      	b.n	800738a <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	220d      	movs	r2, #13
 8007388:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2205      	movs	r2, #5
 800738e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800739e:	2300      	movs	r3, #0
 80073a0:	2200      	movs	r2, #0
 80073a2:	f001 fd39 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 80073a6:	e055      	b.n	8007454 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d04f      	beq.n	8007452 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	4798      	blx	r3
      }
      break;
 80073be:	e048      	b.n	8007452 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff fccf 	bl	8006d6c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d009      	beq.n	80073ec <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d005      	beq.n	8007402 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073fc:	2105      	movs	r1, #5
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b01      	cmp	r3, #1
 800740c:	d107      	bne.n	800741e <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff fda7 	bl	8006f6a <USBH_Start>
 800741c:	e002      	b.n	8007424 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f004 fc4c 	bl	800bcbc <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007438:	2300      	movs	r3, #0
 800743a:	2200      	movs	r2, #0
 800743c:	f001 fcec 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      break;
 8007440:	e008      	b.n	8007454 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007442:	bf00      	nop
 8007444:	e006      	b.n	8007454 <USBH_Process+0x4c8>
      break;
 8007446:	bf00      	nop
 8007448:	e004      	b.n	8007454 <USBH_Process+0x4c8>
      break;
 800744a:	bf00      	nop
 800744c:	e002      	b.n	8007454 <USBH_Process+0x4c8>
    break;
 800744e:	bf00      	nop
 8007450:	e000      	b.n	8007454 <USBH_Process+0x4c8>
      break;
 8007452:	bf00      	nop
  }
  return USBH_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop

08007460 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b088      	sub	sp, #32
 8007464:	af04      	add	r7, sp, #16
 8007466:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007468:	2301      	movs	r3, #1
 800746a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800746c:	2301      	movs	r3, #1
 800746e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b07      	cmp	r3, #7
 8007476:	f200 8204 	bhi.w	8007882 <USBH_HandleEnum+0x422>
 800747a:	a201      	add	r2, pc, #4	@ (adr r2, 8007480 <USBH_HandleEnum+0x20>)
 800747c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007480:	080074a1 	.word	0x080074a1
 8007484:	0800755b 	.word	0x0800755b
 8007488:	080075c5 	.word	0x080075c5
 800748c:	0800764f 	.word	0x0800764f
 8007490:	080076b9 	.word	0x080076b9
 8007494:	08007729 	.word	0x08007729
 8007498:	080077c5 	.word	0x080077c5
 800749c:	08007843 	.word	0x08007843
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074a0:	2108      	movs	r1, #8
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fae8 	bl	8007a78 <USBH_Get_DevDesc>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074ac:	7bbb      	ldrb	r3, [r7, #14]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d12e      	bne.n	8007510 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7919      	ldrb	r1, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80074d6:	9202      	str	r2, [sp, #8]
 80074d8:	2200      	movs	r2, #0
 80074da:	9201      	str	r2, [sp, #4]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	4603      	mov	r3, r0
 80074e0:	2280      	movs	r2, #128	@ 0x80
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fa68 	bl	80089b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	7959      	ldrb	r1, [r3, #5]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80074fc:	9202      	str	r2, [sp, #8]
 80074fe:	2200      	movs	r2, #0
 8007500:	9201      	str	r2, [sp, #4]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	4603      	mov	r3, r0
 8007506:	2200      	movs	r2, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fa55 	bl	80089b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800750e:	e1ba      	b.n	8007886 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	2b03      	cmp	r3, #3
 8007514:	f040 81b7 	bne.w	8007886 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800751e:	3301      	adds	r3, #1
 8007520:	b2da      	uxtb	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800752e:	2b03      	cmp	r3, #3
 8007530:	d903      	bls.n	800753a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	220d      	movs	r2, #13
 8007536:	701a      	strb	r2, [r3, #0]
      break;
 8007538:	e1a5      	b.n	8007886 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	795b      	ldrb	r3, [r3, #5]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fa89 	bl	8008a58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	791b      	ldrb	r3, [r3, #4]
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fa83 	bl	8008a58 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
      break;
 8007558:	e195      	b.n	8007886 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800755a:	2112      	movs	r1, #18
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 fa8b 	bl	8007a78 <USBH_Get_DevDesc>
 8007562:	4603      	mov	r3, r0
 8007564:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007572:	e18a      	b.n	800788a <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b03      	cmp	r3, #3
 8007578:	f040 8187 	bne.w	800788a <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007582:	3301      	adds	r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007592:	2b03      	cmp	r3, #3
 8007594:	d903      	bls.n	800759e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	220d      	movs	r2, #13
 800759a:	701a      	strb	r2, [r3, #0]
      break;
 800759c:	e175      	b.n	800788a <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	795b      	ldrb	r3, [r3, #5]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fa57 	bl	8008a58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	791b      	ldrb	r3, [r3, #4]
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 fa51 	bl	8008a58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	701a      	strb	r2, [r3, #0]
      break;
 80075c2:	e162      	b.n	800788a <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80075c4:	2101      	movs	r1, #1
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb15 	bl	8007bf6 <USBH_SetAddress>
 80075cc:	4603      	mov	r3, r0
 80075ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075d0:	7bbb      	ldrb	r3, [r7, #14]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d130      	bne.n	8007638 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80075d6:	2002      	movs	r0, #2
 80075d8:	f004 fcd7 	bl	800bf8a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2203      	movs	r2, #3
 80075e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	7919      	ldrb	r1, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80075fe:	9202      	str	r2, [sp, #8]
 8007600:	2200      	movs	r2, #0
 8007602:	9201      	str	r2, [sp, #4]
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	4603      	mov	r3, r0
 8007608:	2280      	movs	r2, #128	@ 0x80
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 f9d4 	bl	80089b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7959      	ldrb	r1, [r3, #5]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007624:	9202      	str	r2, [sp, #8]
 8007626:	2200      	movs	r2, #0
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	4603      	mov	r3, r0
 800762e:	2200      	movs	r2, #0
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f9c1 	bl	80089b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007636:	e12a      	b.n	800788e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007638:	7bbb      	ldrb	r3, [r7, #14]
 800763a:	2b03      	cmp	r3, #3
 800763c:	f040 8127 	bne.w	800788e <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	220d      	movs	r2, #13
 8007644:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	705a      	strb	r2, [r3, #1]
      break;
 800764c:	e11f      	b.n	800788e <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800764e:	2109      	movs	r1, #9
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fa3d 	bl	8007ad0 <USBH_Get_CfgDesc>
 8007656:	4603      	mov	r3, r0
 8007658:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2204      	movs	r2, #4
 8007664:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007666:	e114      	b.n	8007892 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	2b03      	cmp	r3, #3
 800766c:	f040 8111 	bne.w	8007892 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007676:	3301      	adds	r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007686:	2b03      	cmp	r3, #3
 8007688:	d903      	bls.n	8007692 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	220d      	movs	r2, #13
 800768e:	701a      	strb	r2, [r3, #0]
      break;
 8007690:	e0ff      	b.n	8007892 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	795b      	ldrb	r3, [r3, #5]
 8007696:	4619      	mov	r1, r3
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 f9dd 	bl	8008a58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	791b      	ldrb	r3, [r3, #4]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f001 f9d7 	bl	8008a58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
      break;
 80076b6:	e0ec      	b.n	8007892 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80076be:	4619      	mov	r1, r3
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fa05 	bl	8007ad0 <USBH_Get_CfgDesc>
 80076c6:	4603      	mov	r3, r0
 80076c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d103      	bne.n	80076d8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2205      	movs	r2, #5
 80076d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076d6:	e0de      	b.n	8007896 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076d8:	7bbb      	ldrb	r3, [r7, #14]
 80076da:	2b03      	cmp	r3, #3
 80076dc:	f040 80db 	bne.w	8007896 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076e6:	3301      	adds	r3, #1
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d903      	bls.n	8007702 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	220d      	movs	r2, #13
 80076fe:	701a      	strb	r2, [r3, #0]
      break;
 8007700:	e0c9      	b.n	8007896 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	795b      	ldrb	r3, [r3, #5]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 f9a5 	bl	8008a58 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	791b      	ldrb	r3, [r3, #4]
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f99f 	bl	8008a58 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
      break;
 8007726:	e0b6      	b.n	8007896 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800772e:	2b00      	cmp	r3, #0
 8007730:	d036      	beq.n	80077a0 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800773e:	23ff      	movs	r3, #255	@ 0xff
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9ef 	bl	8007b24 <USBH_Get_StringDesc>
 8007746:	4603      	mov	r3, r0
 8007748:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800774a:	7bbb      	ldrb	r3, [r7, #14]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d111      	bne.n	8007774 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2206      	movs	r2, #6
 8007754:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2205      	movs	r2, #5
 800775a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800776a:	2300      	movs	r3, #0
 800776c:	2200      	movs	r2, #0
 800776e:	f001 fb53 	bl	8008e18 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007772:	e092      	b.n	800789a <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007774:	7bbb      	ldrb	r3, [r7, #14]
 8007776:	2b03      	cmp	r3, #3
 8007778:	f040 808f 	bne.w	800789a <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2206      	movs	r2, #6
 8007780:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2205      	movs	r2, #5
 8007786:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007796:	2300      	movs	r3, #0
 8007798:	2200      	movs	r2, #0
 800779a:	f001 fb3d 	bl	8008e18 <osMessageQueuePut>
      break;
 800779e:	e07c      	b.n	800789a <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2206      	movs	r2, #6
 80077a4:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2205      	movs	r2, #5
 80077aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80077ba:	2300      	movs	r3, #0
 80077bc:	2200      	movs	r2, #0
 80077be:	f001 fb2b 	bl	8008e18 <osMessageQueuePut>
      break;
 80077c2:	e06a      	b.n	800789a <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d027      	beq.n	800781e <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077da:	23ff      	movs	r3, #255	@ 0xff
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9a1 	bl	8007b24 <USBH_Get_StringDesc>
 80077e2:	4603      	mov	r3, r0
 80077e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077e6:	7bbb      	ldrb	r3, [r7, #14]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d103      	bne.n	80077f4 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2207      	movs	r2, #7
 80077f0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077f2:	e054      	b.n	800789e <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d151      	bne.n	800789e <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2207      	movs	r2, #7
 80077fe:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2205      	movs	r2, #5
 8007804:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007814:	2300      	movs	r3, #0
 8007816:	2200      	movs	r2, #0
 8007818:	f001 fafe 	bl	8008e18 <osMessageQueuePut>
      break;
 800781c:	e03f      	b.n	800789e <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2207      	movs	r2, #7
 8007822:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2205      	movs	r2, #5
 8007828:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007838:	2300      	movs	r3, #0
 800783a:	2200      	movs	r2, #0
 800783c:	f001 faec 	bl	8008e18 <osMessageQueuePut>
      break;
 8007840:	e02d      	b.n	800789e <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007848:	2b00      	cmp	r3, #0
 800784a:	d017      	beq.n	800787c <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007858:	23ff      	movs	r3, #255	@ 0xff
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f962 	bl	8007b24 <USBH_Get_StringDesc>
 8007860:	4603      	mov	r3, r0
 8007862:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007864:	7bbb      	ldrb	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d102      	bne.n	8007870 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800786e:	e018      	b.n	80078a2 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b03      	cmp	r3, #3
 8007874:	d115      	bne.n	80078a2 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
      break;
 800787a:	e012      	b.n	80078a2 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
      break;
 8007880:	e00f      	b.n	80078a2 <USBH_HandleEnum+0x442>

    default:
      break;
 8007882:	bf00      	nop
 8007884:	e00e      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 8007886:	bf00      	nop
 8007888:	e00c      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 800788a:	bf00      	nop
 800788c:	e00a      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 800788e:	bf00      	nop
 8007890:	e008      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 8007892:	bf00      	nop
 8007894:	e006      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 8007896:	bf00      	nop
 8007898:	e004      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 800789a:	bf00      	nop
 800789c:	e002      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 800789e:	bf00      	nop
 80078a0:	e000      	b.n	80078a4 <USBH_HandleEnum+0x444>
      break;
 80078a2:	bf00      	nop
  }
  return Status;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop

080078b0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	683a      	ldr	r2, [r7, #0]
 80078be:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f804 	bl	80078f2 <USBH_HandleSof>
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	2b0b      	cmp	r3, #11
 8007902:	d10a      	bne.n	800791a <USBH_HandleSof+0x28>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
  }
}
 800791a:	bf00      	nop
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2201      	movs	r2, #1
 8007936:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007946:	2300      	movs	r3, #0
 8007948:	2200      	movs	r2, #0
 800794a:	f001 fa65 	bl	8008e18 <osMessageQueuePut>
#endif
#endif

  return;
 800794e:	bf00      	nop
}
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007966:	bf00      	nop
}
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2201      	movs	r2, #1
 8007996:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80079a6:	2300      	movs	r3, #0
 80079a8:	2200      	movs	r2, #0
 80079aa:	f001 fa35 	bl	8008e18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f004 f98a 	bl	800bcf2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	791b      	ldrb	r3, [r3, #4]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f837 	bl	8008a58 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	795b      	ldrb	r3, [r3, #5]
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 f831 	bl	8008a58 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f001 fa03 	bl	8008e18 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007a30:	f04f 33ff 	mov.w	r3, #4294967295
 8007a34:	2200      	movs	r2, #0
 8007a36:	f001 fa4f 	bl	8008ed8 <osMessageQueueGet>
 8007a3a:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f0      	bne.n	8007a24 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7ff faa2 	bl	8006f8c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8007a48:	e7ec      	b.n	8007a24 <USBH_Process_OS+0x8>

08007a4a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007a66:	2300      	movs	r3, #0
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f001 f9d5 	bl	8008e18 <osMessageQueuePut>
#endif

  return USBH_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007a84:	887b      	ldrh	r3, [r7, #2]
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a8a:	d901      	bls.n	8007a90 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e01b      	b.n	8007ac8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007a96:	887b      	ldrh	r3, [r7, #2]
 8007a98:	9300      	str	r3, [sp, #0]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f872 	bl	8007b8c <USBH_GetDescriptor>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007aac:	7bfb      	ldrb	r3, [r7, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d109      	bne.n	8007ac6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ab8:	887a      	ldrh	r2, [r7, #2]
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f929 	bl	8007d14 <USBH_ParseDevDesc>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	331c      	adds	r3, #28
 8007ae0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007ae2:	887b      	ldrh	r3, [r7, #2]
 8007ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ae8:	d901      	bls.n	8007aee <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e016      	b.n	8007b1c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007aee:	887b      	ldrh	r3, [r7, #2]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007af8:	2100      	movs	r1, #0
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f846 	bl	8007b8c <USBH_GetDescriptor>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d107      	bne.n	8007b1a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f9af 	bl	8007e74 <USBH_ParseCfgDesc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b088      	sub	sp, #32
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	607a      	str	r2, [r7, #4]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	460b      	mov	r3, r1
 8007b32:	72fb      	strb	r3, [r7, #11]
 8007b34:	4613      	mov	r3, r2
 8007b36:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007b38:	893b      	ldrh	r3, [r7, #8]
 8007b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b3e:	d802      	bhi.n	8007b46 <USBH_Get_StringDesc+0x22>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e01c      	b.n	8007b84 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007b4a:	7afb      	ldrb	r3, [r7, #11]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007b52:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007b5a:	893b      	ldrh	r3, [r7, #8]
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	2100      	movs	r1, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 f812 	bl	8007b8c <USBH_GetDescriptor>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d107      	bne.n	8007b82 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b78:	893a      	ldrh	r2, [r7, #8]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fb8d 	bl	800829c <USBH_ParseStringDesc>
  }

  return status;
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	607b      	str	r3, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	72fb      	strb	r3, [r7, #11]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	789b      	ldrb	r3, [r3, #2]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d11c      	bne.n	8007be0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ba6:	7afb      	ldrb	r3, [r7, #11]
 8007ba8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2206      	movs	r2, #6
 8007bb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	893a      	ldrh	r2, [r7, #8]
 8007bbc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007bbe:	893b      	ldrh	r3, [r7, #8]
 8007bc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bc8:	d104      	bne.n	8007bd4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f240 4209 	movw	r2, #1033	@ 0x409
 8007bd0:	829a      	strh	r2, [r3, #20]
 8007bd2:	e002      	b.n	8007bda <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8b3a      	ldrh	r2, [r7, #24]
 8007bde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007be0:	8b3b      	ldrh	r3, [r7, #24]
 8007be2:	461a      	mov	r2, r3
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 fba5 	bl	8008336 <USBH_CtlReq>
 8007bec:	4603      	mov	r3, r0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3710      	adds	r7, #16
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b082      	sub	sp, #8
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	789b      	ldrb	r3, [r3, #2]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d10f      	bne.n	8007c2a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2205      	movs	r2, #5
 8007c14:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007c16:	78fb      	ldrb	r3, [r7, #3]
 8007c18:	b29a      	uxth	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2200      	movs	r2, #0
 8007c22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fb81 	bl	8008336 <USBH_CtlReq>
 8007c34:	4603      	mov	r3, r0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b082      	sub	sp, #8
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	460b      	mov	r3, r1
 8007c48:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	789b      	ldrb	r3, [r3, #2]
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d10e      	bne.n	8007c70 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2209      	movs	r2, #9
 8007c5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	887a      	ldrh	r2, [r7, #2]
 8007c62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fb5e 	bl	8008336 <USBH_CtlReq>
 8007c7a:	4603      	mov	r3, r0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10f      	bne.n	8007cb8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2203      	movs	r2, #3
 8007ca2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007ca4:	78fb      	ldrb	r3, [r7, #3]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fb3a 	bl	8008336 <USBH_CtlReq>
 8007cc2:	4603      	mov	r3, r0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	789b      	ldrb	r3, [r3, #2]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d10f      	bne.n	8007d00 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2202      	movs	r2, #2
 8007ce4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007d00:	2200      	movs	r2, #0
 8007d02:	2100      	movs	r1, #0
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fb16 	bl	8008336 <USBH_CtlReq>
 8007d0a:	4603      	mov	r3, r0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007d28:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d101      	bne.n	8007d38 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007d34:	2302      	movs	r3, #2
 8007d36:	e094      	b.n	8007e62 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	781a      	ldrb	r2, [r3, #0]
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	785a      	ldrb	r2, [r3, #1]
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	3302      	adds	r3, #2
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	3303      	adds	r3, #3
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	021b      	lsls	r3, r3, #8
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	791a      	ldrb	r2, [r3, #4]
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	795a      	ldrb	r2, [r3, #5]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	799a      	ldrb	r2, [r3, #6]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	79da      	ldrb	r2, [r3, #7]
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d004      	beq.n	8007d96 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d11b      	bne.n	8007dce <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	79db      	ldrb	r3, [r3, #7]
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	dc0f      	bgt.n	8007dbe <USBH_ParseDevDesc+0xaa>
 8007d9e:	2b08      	cmp	r3, #8
 8007da0:	db0f      	blt.n	8007dc2 <USBH_ParseDevDesc+0xae>
 8007da2:	3b08      	subs	r3, #8
 8007da4:	4a32      	ldr	r2, [pc, #200]	@ (8007e70 <USBH_ParseDevDesc+0x15c>)
 8007da6:	fa22 f303 	lsr.w	r3, r2, r3
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <USBH_ParseDevDesc+0xb6>
 8007dbc:	e001      	b.n	8007dc2 <USBH_ParseDevDesc+0xae>
 8007dbe:	2b40      	cmp	r3, #64	@ 0x40
 8007dc0:	d003      	beq.n	8007dca <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2208      	movs	r2, #8
 8007dc6:	71da      	strb	r2, [r3, #7]
        break;
 8007dc8:	e000      	b.n	8007dcc <USBH_ParseDevDesc+0xb8>
        break;
 8007dca:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007dcc:	e00e      	b.n	8007dec <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d107      	bne.n	8007de8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	79db      	ldrb	r3, [r3, #7]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d005      	beq.n	8007dec <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2208      	movs	r2, #8
 8007de4:	71da      	strb	r2, [r3, #7]
 8007de6:	e001      	b.n	8007dec <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007de8:	2303      	movs	r3, #3
 8007dea:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	2b08      	cmp	r3, #8
 8007df0:	d936      	bls.n	8007e60 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	3308      	adds	r3, #8
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	3309      	adds	r3, #9
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4313      	orrs	r3, r2
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	330a      	adds	r3, #10
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	330b      	adds	r3, #11
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	330c      	adds	r3, #12
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	330d      	adds	r3, #13
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	021b      	lsls	r3, r3, #8
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	b29a      	uxth	r2, r3
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7b9a      	ldrb	r2, [r3, #14]
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	7bda      	ldrb	r2, [r3, #15]
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	7c1a      	ldrb	r2, [r3, #16]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	7c5a      	ldrb	r2, [r3, #17]
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	01000101 	.word	0x01000101

08007e74 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08c      	sub	sp, #48	@ 0x30
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e88:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007e96:	2300      	movs	r3, #0
 8007e98:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e0da      	b.n	800805c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	2b09      	cmp	r3, #9
 8007eb0:	d002      	beq.n	8007eb8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	2209      	movs	r2, #9
 8007eb6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	781a      	ldrb	r2, [r3, #0]
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	785a      	ldrb	r2, [r3, #1]
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	3302      	adds	r3, #2
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	3303      	adds	r3, #3
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	021b      	lsls	r3, r3, #8
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	4313      	orrs	r3, r2
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee2:	bf28      	it	cs
 8007ee4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8007ee8:	b29a      	uxth	r2, r3
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	791a      	ldrb	r2, [r3, #4]
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	795a      	ldrb	r2, [r3, #5]
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	799a      	ldrb	r2, [r3, #6]
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	79da      	ldrb	r2, [r3, #7]
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	7a1a      	ldrb	r2, [r3, #8]
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	f240 809d 	bls.w	8008058 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007f1e:	2309      	movs	r3, #9
 8007f20:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007f26:	e081      	b.n	800802c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f28:	f107 0316 	add.w	r3, r7, #22
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f30:	f000 f9e7 	bl	8008302 <USBH_GetNextDesc>
 8007f34:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f38:	785b      	ldrb	r3, [r3, #1]
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	d176      	bne.n	800802c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d002      	beq.n	8007f4c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f48:	2209      	movs	r2, #9
 8007f4a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f50:	221a      	movs	r2, #26
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
 8007f56:	3308      	adds	r3, #8
 8007f58:	6a3a      	ldr	r2, [r7, #32]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3302      	adds	r3, #2
 8007f5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007f60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f62:	69f8      	ldr	r0, [r7, #28]
 8007f64:	f000 f87e 	bl	8008064 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007f72:	e043      	b.n	8007ffc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007f74:	f107 0316 	add.w	r3, r7, #22
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f7c:	f000 f9c1 	bl	8008302 <USBH_GetNextDesc>
 8007f80:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f84:	785b      	ldrb	r3, [r3, #1]
 8007f86:	2b05      	cmp	r3, #5
 8007f88:	d138      	bne.n	8007ffc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	795b      	ldrb	r3, [r3, #5]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d113      	bne.n	8007fba <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d003      	beq.n	8007fa2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	799b      	ldrb	r3, [r3, #6]
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d10b      	bne.n	8007fba <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	79db      	ldrb	r3, [r3, #7]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10b      	bne.n	8007fc2 <USBH_ParseCfgDesc+0x14e>
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d007      	beq.n	8007fc2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb4:	2209      	movs	r2, #9
 8007fb6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fb8:	e003      	b.n	8007fc2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbc:	2207      	movs	r2, #7
 8007fbe:	701a      	strb	r2, [r3, #0]
 8007fc0:	e000      	b.n	8007fc4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007fc2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fc8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007fcc:	3201      	adds	r2, #1
 8007fce:	00d2      	lsls	r2, r2, #3
 8007fd0:	211a      	movs	r1, #26
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	3308      	adds	r3, #8
 8007fda:	6a3a      	ldr	r2, [r7, #32]
 8007fdc:	4413      	add	r3, r2
 8007fde:	3304      	adds	r3, #4
 8007fe0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007fe2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fe4:	69b9      	ldr	r1, [r7, #24]
 8007fe6:	68f8      	ldr	r0, [r7, #12]
 8007fe8:	f000 f870 	bl	80080cc <USBH_ParseEPDesc>
 8007fec:	4603      	mov	r3, r0
 8007fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007ff2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008004:	429a      	cmp	r2, r3
 8008006:	d204      	bcs.n	8008012 <USBH_ParseCfgDesc+0x19e>
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	885a      	ldrh	r2, [r3, #2]
 800800c:	8afb      	ldrh	r3, [r7, #22]
 800800e:	429a      	cmp	r2, r3
 8008010:	d8b0      	bhi.n	8007f74 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	791b      	ldrb	r3, [r3, #4]
 8008016:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800801a:	429a      	cmp	r2, r3
 800801c:	d201      	bcs.n	8008022 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800801e:	2303      	movs	r3, #3
 8008020:	e01c      	b.n	800805c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008026:	3301      	adds	r3, #1
 8008028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800802c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008030:	2b01      	cmp	r3, #1
 8008032:	d805      	bhi.n	8008040 <USBH_ParseCfgDesc+0x1cc>
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	885a      	ldrh	r2, [r3, #2]
 8008038:	8afb      	ldrh	r3, [r7, #22]
 800803a:	429a      	cmp	r2, r3
 800803c:	f63f af74 	bhi.w	8007f28 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	791b      	ldrb	r3, [r3, #4]
 8008044:	2b02      	cmp	r3, #2
 8008046:	bf28      	it	cs
 8008048:	2302      	movcs	r3, #2
 800804a:	b2db      	uxtb	r3, r3
 800804c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008050:	429a      	cmp	r2, r3
 8008052:	d201      	bcs.n	8008058 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008054:	2303      	movs	r3, #3
 8008056:	e001      	b.n	800805c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008058:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800805c:	4618      	mov	r0, r3
 800805e:	3730      	adds	r7, #48	@ 0x30
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781a      	ldrb	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	785a      	ldrb	r2, [r3, #1]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	789a      	ldrb	r2, [r3, #2]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	78da      	ldrb	r2, [r3, #3]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	3304      	adds	r3, #4
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b02      	cmp	r3, #2
 8008096:	bf28      	it	cs
 8008098:	2302      	movcs	r3, #2
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	795a      	ldrb	r2, [r3, #5]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	799a      	ldrb	r2, [r3, #6]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	79da      	ldrb	r2, [r3, #7]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	7a1a      	ldrb	r2, [r3, #8]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	721a      	strb	r2, [r3, #8]
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	781a      	ldrb	r2, [r3, #0]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	785a      	ldrb	r2, [r3, #1]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	789a      	ldrb	r2, [r3, #2]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	78da      	ldrb	r2, [r3, #3]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	461a      	mov	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	3305      	adds	r3, #5
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	b29b      	uxth	r3, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	b29a      	uxth	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	799a      	ldrb	r2, [r3, #6]
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	889b      	ldrh	r3, [r3, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800812a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800812e:	d804      	bhi.n	800813a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008138:	d901      	bls.n	800813e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800813a:	2303      	movs	r3, #3
 800813c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008144:	2b00      	cmp	r3, #0
 8008146:	d136      	bne.n	80081b6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	78db      	ldrb	r3, [r3, #3]
 800814c:	f003 0303 	and.w	r3, r3, #3
 8008150:	2b02      	cmp	r3, #2
 8008152:	d108      	bne.n	8008166 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	889b      	ldrh	r3, [r3, #4]
 8008158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800815c:	f240 8097 	bls.w	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008160:	2303      	movs	r3, #3
 8008162:	75fb      	strb	r3, [r7, #23]
 8008164:	e093      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	78db      	ldrb	r3, [r3, #3]
 800816a:	f003 0303 	and.w	r3, r3, #3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d107      	bne.n	8008182 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	889b      	ldrh	r3, [r3, #4]
 8008176:	2b40      	cmp	r3, #64	@ 0x40
 8008178:	f240 8089 	bls.w	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800817c:	2303      	movs	r3, #3
 800817e:	75fb      	strb	r3, [r7, #23]
 8008180:	e085      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	78db      	ldrb	r3, [r3, #3]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d005      	beq.n	800819a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	78db      	ldrb	r3, [r3, #3]
 8008192:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008196:	2b03      	cmp	r3, #3
 8008198:	d10a      	bne.n	80081b0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	799b      	ldrb	r3, [r3, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <USBH_ParseEPDesc+0xde>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	799b      	ldrb	r3, [r3, #6]
 80081a6:	2b10      	cmp	r3, #16
 80081a8:	d970      	bls.n	800828c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80081aa:	2303      	movs	r3, #3
 80081ac:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80081ae:	e06d      	b.n	800828c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80081b0:	2303      	movs	r3, #3
 80081b2:	75fb      	strb	r3, [r7, #23]
 80081b4:	e06b      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d13c      	bne.n	800823a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	78db      	ldrb	r3, [r3, #3]
 80081c4:	f003 0303 	and.w	r3, r3, #3
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d005      	beq.n	80081d8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	78db      	ldrb	r3, [r3, #3]
 80081d0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d106      	bne.n	80081e6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	889b      	ldrh	r3, [r3, #4]
 80081dc:	2b40      	cmp	r3, #64	@ 0x40
 80081de:	d956      	bls.n	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80081e0:	2303      	movs	r3, #3
 80081e2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80081e4:	e053      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	78db      	ldrb	r3, [r3, #3]
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d10e      	bne.n	8008210 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	799b      	ldrb	r3, [r3, #6]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d007      	beq.n	800820a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d803      	bhi.n	800820a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008206:	2b40      	cmp	r3, #64	@ 0x40
 8008208:	d941      	bls.n	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800820a:	2303      	movs	r3, #3
 800820c:	75fb      	strb	r3, [r7, #23]
 800820e:	e03e      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	78db      	ldrb	r3, [r3, #3]
 8008214:	f003 0303 	and.w	r3, r3, #3
 8008218:	2b03      	cmp	r3, #3
 800821a:	d10b      	bne.n	8008234 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	799b      	ldrb	r3, [r3, #6]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <USBH_ParseEPDesc+0x162>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	889b      	ldrh	r3, [r3, #4]
 8008228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800822c:	d32f      	bcc.n	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800822e:	2303      	movs	r3, #3
 8008230:	75fb      	strb	r3, [r7, #23]
 8008232:	e02c      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008234:	2303      	movs	r3, #3
 8008236:	75fb      	strb	r3, [r7, #23]
 8008238:	e029      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008240:	2b02      	cmp	r3, #2
 8008242:	d120      	bne.n	8008286 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	78db      	ldrb	r3, [r3, #3]
 8008248:	f003 0303 	and.w	r3, r3, #3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d106      	bne.n	800825e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	889b      	ldrh	r3, [r3, #4]
 8008254:	2b08      	cmp	r3, #8
 8008256:	d01a      	beq.n	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008258:	2303      	movs	r3, #3
 800825a:	75fb      	strb	r3, [r7, #23]
 800825c:	e017      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	78db      	ldrb	r3, [r3, #3]
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	2b03      	cmp	r3, #3
 8008268:	d10a      	bne.n	8008280 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	799b      	ldrb	r3, [r3, #6]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <USBH_ParseEPDesc+0x1ae>
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	889b      	ldrh	r3, [r3, #4]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d909      	bls.n	800828e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800827a:	2303      	movs	r3, #3
 800827c:	75fb      	strb	r3, [r7, #23]
 800827e:	e006      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008280:	2303      	movs	r3, #3
 8008282:	75fb      	strb	r3, [r7, #23]
 8008284:	e003      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
 800828a:	e000      	b.n	800828e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800828c:	bf00      	nop
  }

  return status;
 800828e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4613      	mov	r3, r2
 80082a8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d120      	bne.n	80082f6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	1e9a      	subs	r2, r3, #2
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	4293      	cmp	r3, r2
 80082be:	bf28      	it	cs
 80082c0:	4613      	movcs	r3, r2
 80082c2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3302      	adds	r3, #2
 80082c8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80082ca:	2300      	movs	r3, #0
 80082cc:	82fb      	strh	r3, [r7, #22]
 80082ce:	e00b      	b.n	80082e8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80082d0:	8afb      	ldrh	r3, [r7, #22]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	4413      	add	r3, r2
 80082d6:	781a      	ldrb	r2, [r3, #0]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	701a      	strb	r2, [r3, #0]
      pdest++;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	3301      	adds	r3, #1
 80082e0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80082e2:	8afb      	ldrh	r3, [r7, #22]
 80082e4:	3302      	adds	r3, #2
 80082e6:	82fb      	strh	r3, [r7, #22]
 80082e8:	8afa      	ldrh	r2, [r7, #22]
 80082ea:	8abb      	ldrh	r3, [r7, #20]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d3ef      	bcc.n	80082d0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2200      	movs	r2, #0
 80082f4:	701a      	strb	r2, [r3, #0]
  }
}
 80082f6:	bf00      	nop
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008302:	b480      	push	{r7}
 8008304:	b085      	sub	sp, #20
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	881b      	ldrh	r3, [r3, #0]
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	7812      	ldrb	r2, [r2, #0]
 8008314:	4413      	add	r3, r2
 8008316:	b29a      	uxth	r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4413      	add	r3, r2
 8008326:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008328:	68fb      	ldr	r3, [r7, #12]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3714      	adds	r7, #20
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	60f8      	str	r0, [r7, #12]
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	4613      	mov	r3, r2
 8008342:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008344:	2301      	movs	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	789b      	ldrb	r3, [r3, #2]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d002      	beq.n	8008356 <USBH_CtlReq+0x20>
 8008350:	2b02      	cmp	r3, #2
 8008352:	d01d      	beq.n	8008390 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008354:	e043      	b.n	80083de <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	88fa      	ldrh	r2, [r7, #6]
 8008360:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2201      	movs	r2, #1
 8008366:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2202      	movs	r2, #2
 800836c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2203      	movs	r2, #3
 8008376:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008386:	2300      	movs	r3, #0
 8008388:	2200      	movs	r2, #0
 800838a:	f000 fd45 	bl	8008e18 <osMessageQueuePut>
      break;
 800838e:	e026      	b.n	80083de <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 f829 	bl	80083e8 <USBH_HandleControl>
 8008396:	4603      	mov	r3, r0
 8008398:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800839a:	7dfb      	ldrb	r3, [r7, #23]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d002      	beq.n	80083a6 <USBH_CtlReq+0x70>
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d106      	bne.n	80083b4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	761a      	strb	r2, [r3, #24]
 80083b2:	e005      	b.n	80083c0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d102      	bne.n	80083c0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2203      	movs	r2, #3
 80083c4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80083d4:	2300      	movs	r3, #0
 80083d6:	2200      	movs	r2, #0
 80083d8:	f000 fd1e 	bl	8008e18 <osMessageQueuePut>
      break;
 80083dc:	bf00      	nop
  }
  return status;
 80083de:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3718      	adds	r7, #24
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80083f0:	2301      	movs	r3, #1
 80083f2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7e1b      	ldrb	r3, [r3, #24]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	2b0a      	cmp	r3, #10
 8008400:	f200 8229 	bhi.w	8008856 <USBH_HandleControl+0x46e>
 8008404:	a201      	add	r2, pc, #4	@ (adr r2, 800840c <USBH_HandleControl+0x24>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	08008439 	.word	0x08008439
 8008410:	08008453 	.word	0x08008453
 8008414:	080084f5 	.word	0x080084f5
 8008418:	0800851b 	.word	0x0800851b
 800841c:	080085a7 	.word	0x080085a7
 8008420:	080085d1 	.word	0x080085d1
 8008424:	08008693 	.word	0x08008693
 8008428:	080086b5 	.word	0x080086b5
 800842c:	08008747 	.word	0x08008747
 8008430:	0800876d 	.word	0x0800876d
 8008434:	080087ff 	.word	0x080087ff
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f103 0110 	add.w	r1, r3, #16
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	795b      	ldrb	r3, [r3, #5]
 8008442:	461a      	mov	r2, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa17 	bl	8008878 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	761a      	strb	r2, [r3, #24]
      break;
 8008450:	e20c      	b.n	800886c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	795b      	ldrb	r3, [r3, #5]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f003 fd39 	bl	800bed0 <USBH_LL_GetURBState>
 800845e:	4603      	mov	r3, r0
 8008460:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008462:	7bbb      	ldrb	r3, [r7, #14]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d12c      	bne.n	80084c2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	7c1b      	ldrb	r3, [r3, #16]
 800846c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008470:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	8adb      	ldrh	r3, [r3, #22]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800847a:	7b7b      	ldrb	r3, [r7, #13]
 800847c:	2b80      	cmp	r3, #128	@ 0x80
 800847e:	d103      	bne.n	8008488 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2203      	movs	r2, #3
 8008484:	761a      	strb	r2, [r3, #24]
 8008486:	e00d      	b.n	80084a4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2205      	movs	r2, #5
 800848c:	761a      	strb	r2, [r3, #24]
 800848e:	e009      	b.n	80084a4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8008490:	7b7b      	ldrb	r3, [r7, #13]
 8008492:	2b80      	cmp	r3, #128	@ 0x80
 8008494:	d103      	bne.n	800849e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2209      	movs	r2, #9
 800849a:	761a      	strb	r2, [r3, #24]
 800849c:	e002      	b.n	80084a4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2207      	movs	r2, #7
 80084a2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2203      	movs	r2, #3
 80084a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084b8:	2300      	movs	r3, #0
 80084ba:	2200      	movs	r2, #0
 80084bc:	f000 fcac 	bl	8008e18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084c0:	e1cb      	b.n	800885a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d003      	beq.n	80084d0 <USBH_HandleControl+0xe8>
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	f040 81c5 	bne.w	800885a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	220b      	movs	r2, #11
 80084d4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2203      	movs	r2, #3
 80084da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80084ea:	2300      	movs	r3, #0
 80084ec:	2200      	movs	r2, #0
 80084ee:	f000 fc93 	bl	8008e18 <osMessageQueuePut>
      break;
 80084f2:	e1b2      	b.n	800885a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6899      	ldr	r1, [r3, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	899a      	ldrh	r2, [r3, #12]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	791b      	ldrb	r3, [r3, #4]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f9f2 	bl	80088f6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2204      	movs	r2, #4
 8008516:	761a      	strb	r2, [r3, #24]
      break;
 8008518:	e1a8      	b.n	800886c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	791b      	ldrb	r3, [r3, #4]
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f003 fcd5 	bl	800bed0 <USBH_LL_GetURBState>
 8008526:	4603      	mov	r3, r0
 8008528:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800852a:	7bbb      	ldrb	r3, [r7, #14]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d110      	bne.n	8008552 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2209      	movs	r2, #9
 8008534:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2203      	movs	r2, #3
 800853a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800854a:	2300      	movs	r3, #0
 800854c:	2200      	movs	r2, #0
 800854e:	f000 fc63 	bl	8008e18 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	2b05      	cmp	r3, #5
 8008556:	d110      	bne.n	800857a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008558:	2303      	movs	r3, #3
 800855a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2203      	movs	r2, #3
 8008560:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008570:	2300      	movs	r3, #0
 8008572:	2200      	movs	r2, #0
 8008574:	f000 fc50 	bl	8008e18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008578:	e171      	b.n	800885e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b04      	cmp	r3, #4
 800857e:	f040 816e 	bne.w	800885e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	220b      	movs	r2, #11
 8008586:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2203      	movs	r2, #3
 800858c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800859c:	2300      	movs	r3, #0
 800859e:	2200      	movs	r2, #0
 80085a0:	f000 fc3a 	bl	8008e18 <osMessageQueuePut>
      break;
 80085a4:	e15b      	b.n	800885e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6899      	ldr	r1, [r3, #8]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	899a      	ldrh	r2, [r3, #12]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	795b      	ldrb	r3, [r3, #5]
 80085b2:	2001      	movs	r0, #1
 80085b4:	9000      	str	r0, [sp, #0]
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f978 	bl	80088ac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2206      	movs	r2, #6
 80085cc:	761a      	strb	r2, [r3, #24]
      break;
 80085ce:	e14d      	b.n	800886c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	795b      	ldrb	r3, [r3, #5]
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f003 fc7a 	bl	800bed0 <USBH_LL_GetURBState>
 80085dc:	4603      	mov	r3, r0
 80085de:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d111      	bne.n	800860a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2207      	movs	r2, #7
 80085ea:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2203      	movs	r2, #3
 80085f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008600:	2300      	movs	r3, #0
 8008602:	2200      	movs	r2, #0
 8008604:	f000 fc08 	bl	8008e18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008608:	e12b      	b.n	8008862 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b05      	cmp	r3, #5
 800860e:	d113      	bne.n	8008638 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	220c      	movs	r2, #12
 8008614:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2203      	movs	r2, #3
 800861e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800862e:	2300      	movs	r3, #0
 8008630:	2200      	movs	r2, #0
 8008632:	f000 fbf1 	bl	8008e18 <osMessageQueuePut>
      break;
 8008636:	e114      	b.n	8008862 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	2b02      	cmp	r3, #2
 800863c:	d111      	bne.n	8008662 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2205      	movs	r2, #5
 8008642:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2203      	movs	r2, #3
 8008648:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008658:	2300      	movs	r3, #0
 800865a:	2200      	movs	r2, #0
 800865c:	f000 fbdc 	bl	8008e18 <osMessageQueuePut>
      break;
 8008660:	e0ff      	b.n	8008862 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b04      	cmp	r3, #4
 8008666:	f040 80fc 	bne.w	8008862 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	220b      	movs	r2, #11
 800866e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008670:	2302      	movs	r3, #2
 8008672:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2203      	movs	r2, #3
 8008678:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008688:	2300      	movs	r3, #0
 800868a:	2200      	movs	r2, #0
 800868c:	f000 fbc4 	bl	8008e18 <osMessageQueuePut>
      break;
 8008690:	e0e7      	b.n	8008862 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	791b      	ldrb	r3, [r3, #4]
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f92b 	bl	80088f6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2208      	movs	r2, #8
 80086b0:	761a      	strb	r2, [r3, #24]

      break;
 80086b2:	e0db      	b.n	800886c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	791b      	ldrb	r3, [r3, #4]
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f003 fc08 	bl	800bed0 <USBH_LL_GetURBState>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d113      	bne.n	80086f2 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	220d      	movs	r2, #13
 80086ce:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2203      	movs	r2, #3
 80086d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80086e8:	2300      	movs	r3, #0
 80086ea:	2200      	movs	r2, #0
 80086ec:	f000 fb94 	bl	8008e18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80086f0:	e0b9      	b.n	8008866 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 80086f2:	7bbb      	ldrb	r3, [r7, #14]
 80086f4:	2b04      	cmp	r3, #4
 80086f6:	d111      	bne.n	800871c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	220b      	movs	r2, #11
 80086fc:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2203      	movs	r2, #3
 8008702:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008712:	2300      	movs	r3, #0
 8008714:	2200      	movs	r2, #0
 8008716:	f000 fb7f 	bl	8008e18 <osMessageQueuePut>
      break;
 800871a:	e0a4      	b.n	8008866 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	2b05      	cmp	r3, #5
 8008720:	f040 80a1 	bne.w	8008866 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008724:	2303      	movs	r3, #3
 8008726:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2203      	movs	r2, #3
 800872c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800873c:	2300      	movs	r3, #0
 800873e:	2200      	movs	r2, #0
 8008740:	f000 fb6a 	bl	8008e18 <osMessageQueuePut>
      break;
 8008744:	e08f      	b.n	8008866 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	795b      	ldrb	r3, [r3, #5]
 800874a:	2201      	movs	r2, #1
 800874c:	9200      	str	r2, [sp, #0]
 800874e:	2200      	movs	r2, #0
 8008750:	2100      	movs	r1, #0
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f8aa 	bl	80088ac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800875e:	b29a      	uxth	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	220a      	movs	r2, #10
 8008768:	761a      	strb	r2, [r3, #24]
      break;
 800876a:	e07f      	b.n	800886c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	795b      	ldrb	r3, [r3, #5]
 8008770:	4619      	mov	r1, r3
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f003 fbac 	bl	800bed0 <USBH_LL_GetURBState>
 8008778:	4603      	mov	r3, r0
 800877a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800877c:	7bbb      	ldrb	r3, [r7, #14]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d113      	bne.n	80087aa <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	220d      	movs	r2, #13
 800878a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2203      	movs	r2, #3
 8008790:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	f000 fb38 	bl	8008e18 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087a8:	e05f      	b.n	800886a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d111      	bne.n	80087d4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2209      	movs	r2, #9
 80087b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2203      	movs	r2, #3
 80087ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087ca:	2300      	movs	r3, #0
 80087cc:	2200      	movs	r2, #0
 80087ce:	f000 fb23 	bl	8008e18 <osMessageQueuePut>
      break;
 80087d2:	e04a      	b.n	800886a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b04      	cmp	r3, #4
 80087d8:	d147      	bne.n	800886a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	220b      	movs	r2, #11
 80087de:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2203      	movs	r2, #3
 80087e4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087f4:	2300      	movs	r3, #0
 80087f6:	2200      	movs	r2, #0
 80087f8:	f000 fb0e 	bl	8008e18 <osMessageQueuePut>
      break;
 80087fc:	e035      	b.n	800886a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7e5b      	ldrb	r3, [r3, #25]
 8008802:	3301      	adds	r3, #1
 8008804:	b2da      	uxtb	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	765a      	strb	r2, [r3, #25]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	7e5b      	ldrb	r3, [r3, #25]
 800880e:	2b02      	cmp	r3, #2
 8008810:	d806      	bhi.n	8008820 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800881e:	e025      	b.n	800886c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008826:	2106      	movs	r1, #6
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	795b      	ldrb	r3, [r3, #5]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 f90d 	bl	8008a58 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	791b      	ldrb	r3, [r3, #4]
 8008842:	4619      	mov	r1, r3
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f907 	bl	8008a58 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008850:	2302      	movs	r3, #2
 8008852:	73fb      	strb	r3, [r7, #15]
      break;
 8008854:	e00a      	b.n	800886c <USBH_HandleControl+0x484>

    default:
      break;
 8008856:	bf00      	nop
 8008858:	e008      	b.n	800886c <USBH_HandleControl+0x484>
      break;
 800885a:	bf00      	nop
 800885c:	e006      	b.n	800886c <USBH_HandleControl+0x484>
      break;
 800885e:	bf00      	nop
 8008860:	e004      	b.n	800886c <USBH_HandleControl+0x484>
      break;
 8008862:	bf00      	nop
 8008864:	e002      	b.n	800886c <USBH_HandleControl+0x484>
      break;
 8008866:	bf00      	nop
 8008868:	e000      	b.n	800886c <USBH_HandleControl+0x484>
      break;
 800886a:	bf00      	nop
  }

  return status;
 800886c:	7bfb      	ldrb	r3, [r7, #15]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop

08008878 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af04      	add	r7, sp, #16
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	4613      	mov	r3, r2
 8008884:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008886:	79f9      	ldrb	r1, [r7, #7]
 8008888:	2300      	movs	r3, #0
 800888a:	9303      	str	r3, [sp, #12]
 800888c:	2308      	movs	r3, #8
 800888e:	9302      	str	r3, [sp, #8]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	2300      	movs	r3, #0
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	2300      	movs	r3, #0
 800889a:	2200      	movs	r2, #0
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f003 fae6 	bl	800be6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b088      	sub	sp, #32
 80088b0:	af04      	add	r7, sp, #16
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	4611      	mov	r1, r2
 80088b8:	461a      	mov	r2, r3
 80088ba:	460b      	mov	r3, r1
 80088bc:	80fb      	strh	r3, [r7, #6]
 80088be:	4613      	mov	r3, r2
 80088c0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d001      	beq.n	80088d0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80088d0:	7979      	ldrb	r1, [r7, #5]
 80088d2:	7e3b      	ldrb	r3, [r7, #24]
 80088d4:	9303      	str	r3, [sp, #12]
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	9302      	str	r3, [sp, #8]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	2301      	movs	r3, #1
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	2300      	movs	r3, #0
 80088e4:	2200      	movs	r2, #0
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f003 fac1 	bl	800be6e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b088      	sub	sp, #32
 80088fa:	af04      	add	r7, sp, #16
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	4611      	mov	r1, r2
 8008902:	461a      	mov	r2, r3
 8008904:	460b      	mov	r3, r1
 8008906:	80fb      	strh	r3, [r7, #6]
 8008908:	4613      	mov	r3, r2
 800890a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800890c:	7979      	ldrb	r1, [r7, #5]
 800890e:	2300      	movs	r3, #0
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	88fb      	ldrh	r3, [r7, #6]
 8008914:	9302      	str	r3, [sp, #8]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	9301      	str	r3, [sp, #4]
 800891a:	2301      	movs	r3, #1
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	2300      	movs	r3, #0
 8008920:	2201      	movs	r2, #1
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f003 faa3 	bl	800be6e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008928:	2300      	movs	r3, #0

}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b088      	sub	sp, #32
 8008936:	af04      	add	r7, sp, #16
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	4611      	mov	r1, r2
 800893e:	461a      	mov	r2, r3
 8008940:	460b      	mov	r3, r1
 8008942:	80fb      	strh	r3, [r7, #6]
 8008944:	4613      	mov	r3, r2
 8008946:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008956:	7979      	ldrb	r1, [r7, #5]
 8008958:	7e3b      	ldrb	r3, [r7, #24]
 800895a:	9303      	str	r3, [sp, #12]
 800895c:	88fb      	ldrh	r3, [r7, #6]
 800895e:	9302      	str	r3, [sp, #8]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	2301      	movs	r3, #1
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	2302      	movs	r3, #2
 800896a:	2200      	movs	r2, #0
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f003 fa7e 	bl	800be6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3710      	adds	r7, #16
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af04      	add	r7, sp, #16
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4611      	mov	r1, r2
 8008988:	461a      	mov	r2, r3
 800898a:	460b      	mov	r3, r1
 800898c:	80fb      	strh	r3, [r7, #6]
 800898e:	4613      	mov	r3, r2
 8008990:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008992:	7979      	ldrb	r1, [r7, #5]
 8008994:	2300      	movs	r3, #0
 8008996:	9303      	str	r3, [sp, #12]
 8008998:	88fb      	ldrh	r3, [r7, #6]
 800899a:	9302      	str	r3, [sp, #8]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	2301      	movs	r3, #1
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	2302      	movs	r3, #2
 80089a6:	2201      	movs	r2, #1
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f003 fa60 	bl	800be6e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af04      	add	r7, sp, #16
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	4608      	mov	r0, r1
 80089c2:	4611      	mov	r1, r2
 80089c4:	461a      	mov	r2, r3
 80089c6:	4603      	mov	r3, r0
 80089c8:	70fb      	strb	r3, [r7, #3]
 80089ca:	460b      	mov	r3, r1
 80089cc:	70bb      	strb	r3, [r7, #2]
 80089ce:	4613      	mov	r3, r2
 80089d0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80089d2:	7878      	ldrb	r0, [r7, #1]
 80089d4:	78ba      	ldrb	r2, [r7, #2]
 80089d6:	78f9      	ldrb	r1, [r7, #3]
 80089d8:	8b3b      	ldrh	r3, [r7, #24]
 80089da:	9302      	str	r3, [sp, #8]
 80089dc:	7d3b      	ldrb	r3, [r7, #20]
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	7c3b      	ldrb	r3, [r7, #16]
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	4603      	mov	r3, r0
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f003 f9f3 	bl	800bdd2 <USBH_LL_OpenPipe>

  return USBH_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b082      	sub	sp, #8
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f003 fa12 	bl	800be30 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	460b      	mov	r3, r1
 8008a20:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f836 	bl	8008a94 <USBH_GetFreePipe>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008a2c:	89fb      	ldrh	r3, [r7, #14]
 8008a2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00a      	beq.n	8008a4c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	89fb      	ldrh	r3, [r7, #14]
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a42:	6879      	ldr	r1, [r7, #4]
 8008a44:	33e0      	adds	r3, #224	@ 0xe0
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	440b      	add	r3, r1
 8008a4a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
 8008a4e:	b2db      	uxtb	r3, r3
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008a64:	78fb      	ldrb	r3, [r7, #3]
 8008a66:	2b0f      	cmp	r3, #15
 8008a68:	d80d      	bhi.n	8008a86 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008a6a:	78fb      	ldrb	r3, [r7, #3]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	33e0      	adds	r3, #224	@ 0xe0
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	685a      	ldr	r2, [r3, #4]
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	33e0      	adds	r3, #224	@ 0xe0
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	440b      	add	r3, r1
 8008a84:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
 8008aa4:	e00f      	b.n	8008ac6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	33e0      	adds	r3, #224	@ 0xe0
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d102      	bne.n	8008ac0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008aba:	7bfb      	ldrb	r3, [r7, #15]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	e007      	b.n	8008ad0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b0f      	cmp	r3, #15
 8008aca:	d9ec      	bls.n	8008aa6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008acc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <__NVIC_SetPriority>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	db0a      	blt.n	8008b06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	490c      	ldr	r1, [pc, #48]	@ (8008b28 <__NVIC_SetPriority+0x4c>)
 8008af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008afa:	0112      	lsls	r2, r2, #4
 8008afc:	b2d2      	uxtb	r2, r2
 8008afe:	440b      	add	r3, r1
 8008b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008b04:	e00a      	b.n	8008b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	4908      	ldr	r1, [pc, #32]	@ (8008b2c <__NVIC_SetPriority+0x50>)
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	3b04      	subs	r3, #4
 8008b14:	0112      	lsls	r2, r2, #4
 8008b16:	b2d2      	uxtb	r2, r2
 8008b18:	440b      	add	r3, r1
 8008b1a:	761a      	strb	r2, [r3, #24]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	e000e100 	.word	0xe000e100
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b34:	2100      	movs	r1, #0
 8008b36:	f06f 0004 	mvn.w	r0, #4
 8008b3a:	f7ff ffcf 	bl	8008adc <__NVIC_SetPriority>
#endif
}
 8008b3e:	bf00      	nop
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b44:	b480      	push	{r7}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b4a:	f3ef 8305 	mrs	r3, IPSR
 8008b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8008b50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b56:	f06f 0305 	mvn.w	r3, #5
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	e00c      	b.n	8008b78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b88 <osKernelInitialize+0x44>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d105      	bne.n	8008b72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b66:	4b08      	ldr	r3, [pc, #32]	@ (8008b88 <osKernelInitialize+0x44>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	607b      	str	r3, [r7, #4]
 8008b70:	e002      	b.n	8008b78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b72:	f04f 33ff 	mov.w	r3, #4294967295
 8008b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b78:	687b      	ldr	r3, [r7, #4]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000208 	.word	0x20000208

08008b8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b92:	f3ef 8305 	mrs	r3, IPSR
 8008b96:	603b      	str	r3, [r7, #0]
  return(result);
 8008b98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008b9e:	f06f 0305 	mvn.w	r3, #5
 8008ba2:	607b      	str	r3, [r7, #4]
 8008ba4:	e010      	b.n	8008bc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd4 <osKernelStart+0x48>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d109      	bne.n	8008bc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bae:	f7ff ffbf 	bl	8008b30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008bb2:	4b08      	ldr	r3, [pc, #32]	@ (8008bd4 <osKernelStart+0x48>)
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008bb8:	f001 fa68 	bl	800a08c <vTaskStartScheduler>
      stat = osOK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	e002      	b.n	8008bc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bc8:	687b      	ldr	r3, [r7, #4]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000208 	.word	0x20000208

08008bd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08e      	sub	sp, #56	@ 0x38
 8008bdc:	af04      	add	r7, sp, #16
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008be8:	f3ef 8305 	mrs	r3, IPSR
 8008bec:	617b      	str	r3, [r7, #20]
  return(result);
 8008bee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d17e      	bne.n	8008cf2 <osThreadNew+0x11a>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d07b      	beq.n	8008cf2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008bfa:	2380      	movs	r3, #128	@ 0x80
 8008bfc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008bfe:	2318      	movs	r3, #24
 8008c00:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c06:	f04f 33ff 	mov.w	r3, #4294967295
 8008c0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d045      	beq.n	8008c9e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <osThreadNew+0x48>
        name = attr->name;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d008      	beq.n	8008c46 <osThreadNew+0x6e>
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	2b38      	cmp	r3, #56	@ 0x38
 8008c38:	d805      	bhi.n	8008c46 <osThreadNew+0x6e>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <osThreadNew+0x72>
        return (NULL);
 8008c46:	2300      	movs	r3, #0
 8008c48:	e054      	b.n	8008cf4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00e      	beq.n	8008c80 <osThreadNew+0xa8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	2b5b      	cmp	r3, #91	@ 0x5b
 8008c68:	d90a      	bls.n	8008c80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d006      	beq.n	8008c80 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695b      	ldr	r3, [r3, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <osThreadNew+0xa8>
        mem = 1;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	e010      	b.n	8008ca2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10c      	bne.n	8008ca2 <osThreadNew+0xca>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d108      	bne.n	8008ca2 <osThreadNew+0xca>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d104      	bne.n	8008ca2 <osThreadNew+0xca>
          mem = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61bb      	str	r3, [r7, #24]
 8008c9c:	e001      	b.n	8008ca2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d110      	bne.n	8008cca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008cb0:	9202      	str	r2, [sp, #8]
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	6a3a      	ldr	r2, [r7, #32]
 8008cbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f001 f808 	bl	8009cd4 <xTaskCreateStatic>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	613b      	str	r3, [r7, #16]
 8008cc8:	e013      	b.n	8008cf2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d110      	bne.n	8008cf2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008cd0:	6a3b      	ldr	r3, [r7, #32]
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	f107 0310 	add.w	r3, r7, #16
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	9300      	str	r3, [sp, #0]
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	f001 f856 	bl	8009d94 <xTaskCreate>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d001      	beq.n	8008cf2 <osThreadNew+0x11a>
            hTask = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008cf2:	693b      	ldr	r3, [r7, #16]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3728      	adds	r7, #40	@ 0x28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d04:	f3ef 8305 	mrs	r3, IPSR
 8008d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d0a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d003      	beq.n	8008d18 <osDelay+0x1c>
    stat = osErrorISR;
 8008d10:	f06f 0305 	mvn.w	r3, #5
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	e007      	b.n	8008d28 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d002      	beq.n	8008d28 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f001 f97c 	bl	800a020 <vTaskDelay>
    }
  }

  return (stat);
 8008d28:	68fb      	ldr	r3, [r7, #12]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b08a      	sub	sp, #40	@ 0x28
 8008d36:	af02      	add	r7, sp, #8
 8008d38:	60f8      	str	r0, [r7, #12]
 8008d3a:	60b9      	str	r1, [r7, #8]
 8008d3c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d42:	f3ef 8305 	mrs	r3, IPSR
 8008d46:	613b      	str	r3, [r7, #16]
  return(result);
 8008d48:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d15f      	bne.n	8008e0e <osMessageQueueNew+0xdc>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d05c      	beq.n	8008e0e <osMessageQueueNew+0xdc>
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d059      	beq.n	8008e0e <osMessageQueueNew+0xdc>
    mem = -1;
 8008d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d029      	beq.n	8008dba <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d012      	beq.n	8008d94 <osMessageQueueNew+0x62>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	2b4f      	cmp	r3, #79	@ 0x4f
 8008d74:	d90e      	bls.n	8008d94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	695a      	ldr	r2, [r3, #20]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	68b9      	ldr	r1, [r7, #8]
 8008d86:	fb01 f303 	mul.w	r3, r1, r3
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <osMessageQueueNew+0x62>
        mem = 1;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	e014      	b.n	8008dbe <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d110      	bne.n	8008dbe <osMessageQueueNew+0x8c>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d10c      	bne.n	8008dbe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d108      	bne.n	8008dbe <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d104      	bne.n	8008dbe <osMessageQueueNew+0x8c>
          mem = 0;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	e001      	b.n	8008dbe <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d10b      	bne.n	8008ddc <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	691a      	ldr	r2, [r3, #16]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	2100      	movs	r1, #0
 8008dce:	9100      	str	r1, [sp, #0]
 8008dd0:	68b9      	ldr	r1, [r7, #8]
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fa30 	bl	8009238 <xQueueGenericCreateStatic>
 8008dd8:	61f8      	str	r0, [r7, #28]
 8008dda:	e008      	b.n	8008dee <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008de2:	2200      	movs	r2, #0
 8008de4:	68b9      	ldr	r1, [r7, #8]
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 faa3 	bl	8009332 <xQueueGenericCreate>
 8008dec:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00c      	beq.n	8008e0e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e001      	b.n	8008e06 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008e06:	6979      	ldr	r1, [r7, #20]
 8008e08:	69f8      	ldr	r0, [r7, #28]
 8008e0a:	f000 ff05 	bl	8009c18 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008e0e:	69fb      	ldr	r3, [r7, #28]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	4613      	mov	r3, r2
 8008e26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e30:	f3ef 8305 	mrs	r3, IPSR
 8008e34:	617b      	str	r3, [r7, #20]
  return(result);
 8008e36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d028      	beq.n	8008e8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d005      	beq.n	8008e4e <osMessageQueuePut+0x36>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <osMessageQueuePut+0x36>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d003      	beq.n	8008e56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008e4e:	f06f 0303 	mvn.w	r3, #3
 8008e52:	61fb      	str	r3, [r7, #28]
 8008e54:	e038      	b.n	8008ec8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008e56:	2300      	movs	r3, #0
 8008e58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e5a:	f107 0210 	add.w	r2, r7, #16
 8008e5e:	2300      	movs	r3, #0
 8008e60:	68b9      	ldr	r1, [r7, #8]
 8008e62:	69b8      	ldr	r0, [r7, #24]
 8008e64:	f000 fbc6 	bl	80095f4 <xQueueGenericSendFromISR>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d003      	beq.n	8008e76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008e6e:	f06f 0302 	mvn.w	r3, #2
 8008e72:	61fb      	str	r3, [r7, #28]
 8008e74:	e028      	b.n	8008ec8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d025      	beq.n	8008ec8 <osMessageQueuePut+0xb0>
 8008e7c:	4b15      	ldr	r3, [pc, #84]	@ (8008ed4 <osMessageQueuePut+0xbc>)
 8008e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e82:	601a      	str	r2, [r3, #0]
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	e01c      	b.n	8008ec8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <osMessageQueuePut+0x82>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d103      	bne.n	8008ea2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008e9a:	f06f 0303 	mvn.w	r3, #3
 8008e9e:	61fb      	str	r3, [r7, #28]
 8008ea0:	e012      	b.n	8008ec8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	69b8      	ldr	r0, [r7, #24]
 8008eaa:	f000 faa1 	bl	80093f0 <xQueueGenericSend>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d009      	beq.n	8008ec8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008eba:	f06f 0301 	mvn.w	r3, #1
 8008ebe:	61fb      	str	r3, [r7, #28]
 8008ec0:	e002      	b.n	8008ec8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008ec2:	f06f 0302 	mvn.w	r3, #2
 8008ec6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ec8:	69fb      	ldr	r3, [r7, #28]
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3720      	adds	r7, #32
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	e000ed04 	.word	0xe000ed04

08008ed8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eee:	f3ef 8305 	mrs	r3, IPSR
 8008ef2:	617b      	str	r3, [r7, #20]
  return(result);
 8008ef4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d028      	beq.n	8008f4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <osMessageQueueGet+0x34>
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d002      	beq.n	8008f0c <osMessageQueueGet+0x34>
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008f0c:	f06f 0303 	mvn.w	r3, #3
 8008f10:	61fb      	str	r3, [r7, #28]
 8008f12:	e037      	b.n	8008f84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008f14:	2300      	movs	r3, #0
 8008f16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f18:	f107 0310 	add.w	r3, r7, #16
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	69b8      	ldr	r0, [r7, #24]
 8008f22:	f000 fce7 	bl	80098f4 <xQueueReceiveFromISR>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d003      	beq.n	8008f34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008f2c:	f06f 0302 	mvn.w	r3, #2
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e027      	b.n	8008f84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d024      	beq.n	8008f84 <osMessageQueueGet+0xac>
 8008f3a:	4b15      	ldr	r3, [pc, #84]	@ (8008f90 <osMessageQueueGet+0xb8>)
 8008f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	e01b      	b.n	8008f84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <osMessageQueueGet+0x80>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008f58:	f06f 0303 	mvn.w	r3, #3
 8008f5c:	61fb      	str	r3, [r7, #28]
 8008f5e:	e011      	b.n	8008f84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	69b8      	ldr	r0, [r7, #24]
 8008f66:	f000 fbe3 	bl	8009730 <xQueueReceive>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d009      	beq.n	8008f84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008f76:	f06f 0301 	mvn.w	r3, #1
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e002      	b.n	8008f84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008f7e:	f06f 0302 	mvn.w	r3, #2
 8008f82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008f84:	69fb      	ldr	r3, [r7, #28]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3720      	adds	r7, #32
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	e000ed04 	.word	0xe000ed04

08008f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4a07      	ldr	r2, [pc, #28]	@ (8008fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	4a06      	ldr	r2, [pc, #24]	@ (8008fc4 <vApplicationGetIdleTaskMemory+0x30>)
 8008faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2280      	movs	r2, #128	@ 0x80
 8008fb0:	601a      	str	r2, [r3, #0]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	2000020c 	.word	0x2000020c
 8008fc4:	20000268 	.word	0x20000268

08008fc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4a07      	ldr	r2, [pc, #28]	@ (8008ff4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008fd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	4a06      	ldr	r2, [pc, #24]	@ (8008ff8 <vApplicationGetTimerTaskMemory+0x30>)
 8008fde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fe6:	601a      	str	r2, [r3, #0]
}
 8008fe8:	bf00      	nop
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	20000468 	.word	0x20000468
 8008ff8:	200004c4 	.word	0x200004c4

08008ffc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f103 0208 	add.w	r2, r3, #8
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f04f 32ff 	mov.w	r2, #4294967295
 8009014:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f103 0208 	add.w	r2, r3, #8
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f103 0208 	add.w	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800904a:	bf00      	nop
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	601a      	str	r2, [r3, #0]
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b4:	d103      	bne.n	80090be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	60fb      	str	r3, [r7, #12]
 80090bc:	e00c      	b.n	80090d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3308      	adds	r3, #8
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e002      	b.n	80090cc <vListInsert+0x2e>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d2f6      	bcs.n	80090c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	683a      	ldr	r2, [r7, #0]
 80090f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	6892      	ldr	r2, [r2, #8]
 8009126:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6852      	ldr	r2, [r2, #4]
 8009130:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	d103      	bne.n	8009144 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	1e5a      	subs	r2, r3, #1
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d10b      	bne.n	8009190 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800918a:	bf00      	nop
 800918c:	bf00      	nop
 800918e:	e7fd      	b.n	800918c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009190:	f002 f93a 	bl	800b408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800919c:	68f9      	ldr	r1, [r7, #12]
 800919e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091a0:	fb01 f303 	mul.w	r3, r1, r3
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2200      	movs	r2, #0
 80091ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c0:	3b01      	subs	r3, #1
 80091c2:	68f9      	ldr	r1, [r7, #12]
 80091c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091c6:	fb01 f303 	mul.w	r3, r1, r3
 80091ca:	441a      	add	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	22ff      	movs	r2, #255	@ 0xff
 80091d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	22ff      	movs	r2, #255	@ 0xff
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d114      	bne.n	8009210 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01a      	beq.n	8009224 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	3310      	adds	r3, #16
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 f9d8 	bl	800a5a8 <xTaskRemoveFromEventList>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d012      	beq.n	8009224 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009234 <xQueueGenericReset+0xd0>)
 8009200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	e009      	b.n	8009224 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3310      	adds	r3, #16
 8009214:	4618      	mov	r0, r3
 8009216:	f7ff fef1 	bl	8008ffc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	3324      	adds	r3, #36	@ 0x24
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff feec 	bl	8008ffc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009224:	f002 f922 	bl	800b46c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009228:	2301      	movs	r3, #1
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	e000ed04 	.word	0xe000ed04

08009238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08e      	sub	sp, #56	@ 0x38
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10b      	bne.n	8009264 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800925e:	bf00      	nop
 8009260:	bf00      	nop
 8009262:	e7fd      	b.n	8009260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10b      	bne.n	8009282 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800926a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800927c:	bf00      	nop
 800927e:	bf00      	nop
 8009280:	e7fd      	b.n	800927e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d002      	beq.n	800928e <xQueueGenericCreateStatic+0x56>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <xQueueGenericCreateStatic+0x5a>
 800928e:	2301      	movs	r3, #1
 8009290:	e000      	b.n	8009294 <xQueueGenericCreateStatic+0x5c>
 8009292:	2300      	movs	r3, #0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d10b      	bne.n	80092b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	623b      	str	r3, [r7, #32]
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <xQueueGenericCreateStatic+0x84>
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <xQueueGenericCreateStatic+0x88>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <xQueueGenericCreateStatic+0x8a>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	61fb      	str	r3, [r7, #28]
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	e7fd      	b.n	80092da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092de:	2350      	movs	r3, #80	@ 0x50
 80092e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b50      	cmp	r3, #80	@ 0x50
 80092e6:	d00b      	beq.n	8009300 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	61bb      	str	r3, [r7, #24]
}
 80092fa:	bf00      	nop
 80092fc:	bf00      	nop
 80092fe:	e7fd      	b.n	80092fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009300:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00d      	beq.n	8009328 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800930c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930e:	2201      	movs	r2, #1
 8009310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009314:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	4613      	mov	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	68b9      	ldr	r1, [r7, #8]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 f840 	bl	80093a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800932a:	4618      	mov	r0, r3
 800932c:	3730      	adds	r7, #48	@ 0x30
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009332:	b580      	push	{r7, lr}
 8009334:	b08a      	sub	sp, #40	@ 0x28
 8009336:	af02      	add	r7, sp, #8
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	4613      	mov	r3, r2
 800933e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10b      	bne.n	800935e <xQueueGenericCreate+0x2c>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	613b      	str	r3, [r7, #16]
}
 8009358:	bf00      	nop
 800935a:	bf00      	nop
 800935c:	e7fd      	b.n	800935a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	fb02 f303 	mul.w	r3, r2, r3
 8009366:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	3350      	adds	r3, #80	@ 0x50
 800936c:	4618      	mov	r0, r3
 800936e:	f002 f96d 	bl	800b64c <pvPortMalloc>
 8009372:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d011      	beq.n	800939e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	3350      	adds	r3, #80	@ 0x50
 8009382:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800938c:	79fa      	ldrb	r2, [r7, #7]
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	4613      	mov	r3, r2
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f805 	bl	80093a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800939e:	69bb      	ldr	r3, [r7, #24]
	}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3720      	adds	r7, #32
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d103      	bne.n	80093c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	69ba      	ldr	r2, [r7, #24]
 80093c0:	601a      	str	r2, [r3, #0]
 80093c2:	e002      	b.n	80093ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093d0:	69bb      	ldr	r3, [r7, #24]
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093d6:	2101      	movs	r1, #1
 80093d8:	69b8      	ldr	r0, [r7, #24]
 80093da:	f7ff fec3 	bl	8009164 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	78fa      	ldrb	r2, [r7, #3]
 80093e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093e6:	bf00      	nop
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08e      	sub	sp, #56	@ 0x38
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093fe:	2300      	movs	r3, #0
 8009400:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10b      	bne.n	8009424 <xQueueGenericSend+0x34>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800941e:	bf00      	nop
 8009420:	bf00      	nop
 8009422:	e7fd      	b.n	8009420 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d103      	bne.n	8009432 <xQueueGenericSend+0x42>
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <xQueueGenericSend+0x46>
 8009432:	2301      	movs	r3, #1
 8009434:	e000      	b.n	8009438 <xQueueGenericSend+0x48>
 8009436:	2300      	movs	r3, #0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10b      	bne.n	8009454 <xQueueGenericSend+0x64>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800944e:	bf00      	nop
 8009450:	bf00      	nop
 8009452:	e7fd      	b.n	8009450 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b02      	cmp	r3, #2
 8009458:	d103      	bne.n	8009462 <xQueueGenericSend+0x72>
 800945a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800945e:	2b01      	cmp	r3, #1
 8009460:	d101      	bne.n	8009466 <xQueueGenericSend+0x76>
 8009462:	2301      	movs	r3, #1
 8009464:	e000      	b.n	8009468 <xQueueGenericSend+0x78>
 8009466:	2300      	movs	r3, #0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10b      	bne.n	8009484 <xQueueGenericSend+0x94>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	623b      	str	r3, [r7, #32]
}
 800947e:	bf00      	nop
 8009480:	bf00      	nop
 8009482:	e7fd      	b.n	8009480 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009484:	f001 fa50 	bl	800a928 <xTaskGetSchedulerState>
 8009488:	4603      	mov	r3, r0
 800948a:	2b00      	cmp	r3, #0
 800948c:	d102      	bne.n	8009494 <xQueueGenericSend+0xa4>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <xQueueGenericSend+0xa8>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <xQueueGenericSend+0xaa>
 8009498:	2300      	movs	r3, #0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d10b      	bne.n	80094b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800949e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a2:	f383 8811 	msr	BASEPRI, r3
 80094a6:	f3bf 8f6f 	isb	sy
 80094aa:	f3bf 8f4f 	dsb	sy
 80094ae:	61fb      	str	r3, [r7, #28]
}
 80094b0:	bf00      	nop
 80094b2:	bf00      	nop
 80094b4:	e7fd      	b.n	80094b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094b6:	f001 ffa7 	bl	800b408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d302      	bcc.n	80094cc <xQueueGenericSend+0xdc>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d129      	bne.n	8009520 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094cc:	683a      	ldr	r2, [r7, #0]
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80094d2:	f000 fa91 	bl	80099f8 <prvCopyDataToQueue>
 80094d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d010      	beq.n	8009502 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	3324      	adds	r3, #36	@ 0x24
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 f85f 	bl	800a5a8 <xTaskRemoveFromEventList>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d013      	beq.n	8009518 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094f0:	4b3f      	ldr	r3, [pc, #252]	@ (80095f0 <xQueueGenericSend+0x200>)
 80094f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	f3bf 8f6f 	isb	sy
 8009500:	e00a      	b.n	8009518 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d007      	beq.n	8009518 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009508:	4b39      	ldr	r3, [pc, #228]	@ (80095f0 <xQueueGenericSend+0x200>)
 800950a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009518:	f001 ffa8 	bl	800b46c <vPortExitCritical>
				return pdPASS;
 800951c:	2301      	movs	r3, #1
 800951e:	e063      	b.n	80095e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d103      	bne.n	800952e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009526:	f001 ffa1 	bl	800b46c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800952a:	2300      	movs	r3, #0
 800952c:	e05c      	b.n	80095e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800952e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009534:	f107 0314 	add.w	r3, r7, #20
 8009538:	4618      	mov	r0, r3
 800953a:	f001 f899 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800953e:	2301      	movs	r3, #1
 8009540:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009542:	f001 ff93 	bl	800b46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009546:	f000 fe09 	bl	800a15c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800954a:	f001 ff5d 	bl	800b408 <vPortEnterCritical>
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009554:	b25b      	sxtb	r3, r3
 8009556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955a:	d103      	bne.n	8009564 <xQueueGenericSend+0x174>
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	2200      	movs	r2, #0
 8009560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800956a:	b25b      	sxtb	r3, r3
 800956c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009570:	d103      	bne.n	800957a <xQueueGenericSend+0x18a>
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800957a:	f001 ff77 	bl	800b46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800957e:	1d3a      	adds	r2, r7, #4
 8009580:	f107 0314 	add.w	r3, r7, #20
 8009584:	4611      	mov	r1, r2
 8009586:	4618      	mov	r0, r3
 8009588:	f001 f888 	bl	800a69c <xTaskCheckForTimeOut>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d124      	bne.n	80095dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009594:	f000 fb28 	bl	8009be8 <prvIsQueueFull>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d018      	beq.n	80095d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	3310      	adds	r3, #16
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 ffac 	bl	800a504 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095ae:	f000 fab3 	bl	8009b18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095b2:	f000 fde1 	bl	800a178 <xTaskResumeAll>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f47f af7c 	bne.w	80094b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80095be:	4b0c      	ldr	r3, [pc, #48]	@ (80095f0 <xQueueGenericSend+0x200>)
 80095c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	e772      	b.n	80094b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095d2:	f000 faa1 	bl	8009b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095d6:	f000 fdcf 	bl	800a178 <xTaskResumeAll>
 80095da:	e76c      	b.n	80094b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095de:	f000 fa9b 	bl	8009b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095e2:	f000 fdc9 	bl	800a178 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3738      	adds	r7, #56	@ 0x38
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	e000ed04 	.word	0xe000ed04

080095f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b090      	sub	sp, #64	@ 0x40
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
 8009600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10b      	bne.n	8009624 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800961e:	bf00      	nop
 8009620:	bf00      	nop
 8009622:	e7fd      	b.n	8009620 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d103      	bne.n	8009632 <xQueueGenericSendFromISR+0x3e>
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d101      	bne.n	8009636 <xQueueGenericSendFromISR+0x42>
 8009632:	2301      	movs	r3, #1
 8009634:	e000      	b.n	8009638 <xQueueGenericSendFromISR+0x44>
 8009636:	2300      	movs	r3, #0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10b      	bne.n	8009654 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800964e:	bf00      	nop
 8009650:	bf00      	nop
 8009652:	e7fd      	b.n	8009650 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	2b02      	cmp	r3, #2
 8009658:	d103      	bne.n	8009662 <xQueueGenericSendFromISR+0x6e>
 800965a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965e:	2b01      	cmp	r3, #1
 8009660:	d101      	bne.n	8009666 <xQueueGenericSendFromISR+0x72>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <xQueueGenericSendFromISR+0x74>
 8009666:	2300      	movs	r3, #0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	623b      	str	r3, [r7, #32]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009684:	f001 ffa0 	bl	800b5c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009688:	f3ef 8211 	mrs	r2, BASEPRI
 800968c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	61fa      	str	r2, [r7, #28]
 800969e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096a0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096a2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d302      	bcc.n	80096b6 <xQueueGenericSendFromISR+0xc2>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	2b02      	cmp	r3, #2
 80096b4:	d12f      	bne.n	8009716 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80096bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096c6:	683a      	ldr	r2, [r7, #0]
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80096cc:	f000 f994 	bl	80099f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096d0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80096d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d8:	d112      	bne.n	8009700 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d016      	beq.n	8009710 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e4:	3324      	adds	r3, #36	@ 0x24
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 ff5e 	bl	800a5a8 <xTaskRemoveFromEventList>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d00e      	beq.n	8009710 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00b      	beq.n	8009710 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	e007      	b.n	8009710 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009700:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009704:	3301      	adds	r3, #1
 8009706:	b2db      	uxtb	r3, r3
 8009708:	b25a      	sxtb	r2, r3
 800970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009710:	2301      	movs	r3, #1
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009714:	e001      	b.n	800971a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009716:	2300      	movs	r3, #0
 8009718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800971a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800971c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009724:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009728:	4618      	mov	r0, r3
 800972a:	3740      	adds	r7, #64	@ 0x40
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08c      	sub	sp, #48	@ 0x30
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800973c:	2300      	movs	r3, #0
 800973e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10b      	bne.n	8009762 <xQueueReceive+0x32>
	__asm volatile
 800974a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800974e:	f383 8811 	msr	BASEPRI, r3
 8009752:	f3bf 8f6f 	isb	sy
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	623b      	str	r3, [r7, #32]
}
 800975c:	bf00      	nop
 800975e:	bf00      	nop
 8009760:	e7fd      	b.n	800975e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <xQueueReceive+0x40>
 8009768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	2b00      	cmp	r3, #0
 800976e:	d101      	bne.n	8009774 <xQueueReceive+0x44>
 8009770:	2301      	movs	r3, #1
 8009772:	e000      	b.n	8009776 <xQueueReceive+0x46>
 8009774:	2300      	movs	r3, #0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d10b      	bne.n	8009792 <xQueueReceive+0x62>
	__asm volatile
 800977a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61fb      	str	r3, [r7, #28]
}
 800978c:	bf00      	nop
 800978e:	bf00      	nop
 8009790:	e7fd      	b.n	800978e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009792:	f001 f8c9 	bl	800a928 <xTaskGetSchedulerState>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <xQueueReceive+0x72>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <xQueueReceive+0x76>
 80097a2:	2301      	movs	r3, #1
 80097a4:	e000      	b.n	80097a8 <xQueueReceive+0x78>
 80097a6:	2300      	movs	r3, #0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10b      	bne.n	80097c4 <xQueueReceive+0x94>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	61bb      	str	r3, [r7, #24]
}
 80097be:	bf00      	nop
 80097c0:	bf00      	nop
 80097c2:	e7fd      	b.n	80097c0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097c4:	f001 fe20 	bl	800b408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097cc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01f      	beq.n	8009814 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097d8:	f000 f978 	bl	8009acc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097de:	1e5a      	subs	r2, r3, #1
 80097e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00f      	beq.n	800980c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ee:	3310      	adds	r3, #16
 80097f0:	4618      	mov	r0, r3
 80097f2:	f000 fed9 	bl	800a5a8 <xTaskRemoveFromEventList>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d007      	beq.n	800980c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097fc:	4b3c      	ldr	r3, [pc, #240]	@ (80098f0 <xQueueReceive+0x1c0>)
 80097fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800980c:	f001 fe2e 	bl	800b46c <vPortExitCritical>
				return pdPASS;
 8009810:	2301      	movs	r3, #1
 8009812:	e069      	b.n	80098e8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800981a:	f001 fe27 	bl	800b46c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800981e:	2300      	movs	r3, #0
 8009820:	e062      	b.n	80098e8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	2b00      	cmp	r3, #0
 8009826:	d106      	bne.n	8009836 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009828:	f107 0310 	add.w	r3, r7, #16
 800982c:	4618      	mov	r0, r3
 800982e:	f000 ff1f 	bl	800a670 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009832:	2301      	movs	r3, #1
 8009834:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009836:	f001 fe19 	bl	800b46c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800983a:	f000 fc8f 	bl	800a15c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800983e:	f001 fde3 	bl	800b408 <vPortEnterCritical>
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009848:	b25b      	sxtb	r3, r3
 800984a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984e:	d103      	bne.n	8009858 <xQueueReceive+0x128>
 8009850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009852:	2200      	movs	r2, #0
 8009854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800985a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800985e:	b25b      	sxtb	r3, r3
 8009860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009864:	d103      	bne.n	800986e <xQueueReceive+0x13e>
 8009866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800986e:	f001 fdfd 	bl	800b46c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009872:	1d3a      	adds	r2, r7, #4
 8009874:	f107 0310 	add.w	r3, r7, #16
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f000 ff0e 	bl	800a69c <xTaskCheckForTimeOut>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d123      	bne.n	80098ce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009888:	f000 f998 	bl	8009bbc <prvIsQueueEmpty>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d017      	beq.n	80098c2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009894:	3324      	adds	r3, #36	@ 0x24
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	4611      	mov	r1, r2
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fe32 	bl	800a504 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098a2:	f000 f939 	bl	8009b18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098a6:	f000 fc67 	bl	800a178 <xTaskResumeAll>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d189      	bne.n	80097c4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80098b0:	4b0f      	ldr	r3, [pc, #60]	@ (80098f0 <xQueueReceive+0x1c0>)
 80098b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	e780      	b.n	80097c4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098c4:	f000 f928 	bl	8009b18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098c8:	f000 fc56 	bl	800a178 <xTaskResumeAll>
 80098cc:	e77a      	b.n	80097c4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098d0:	f000 f922 	bl	8009b18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098d4:	f000 fc50 	bl	800a178 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098da:	f000 f96f 	bl	8009bbc <prvIsQueueEmpty>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f43f af6f 	beq.w	80097c4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3730      	adds	r7, #48	@ 0x30
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	e000ed04 	.word	0xe000ed04

080098f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b08e      	sub	sp, #56	@ 0x38
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	2b00      	cmp	r3, #0
 8009908:	d10b      	bne.n	8009922 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	623b      	str	r3, [r7, #32]
}
 800991c:	bf00      	nop
 800991e:	bf00      	nop
 8009920:	e7fd      	b.n	800991e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d103      	bne.n	8009930 <xQueueReceiveFromISR+0x3c>
 8009928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <xQueueReceiveFromISR+0x40>
 8009930:	2301      	movs	r3, #1
 8009932:	e000      	b.n	8009936 <xQueueReceiveFromISR+0x42>
 8009934:	2300      	movs	r3, #0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10b      	bne.n	8009952 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	61fb      	str	r3, [r7, #28]
}
 800994c:	bf00      	nop
 800994e:	bf00      	nop
 8009950:	e7fd      	b.n	800994e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009952:	f001 fe39 	bl	800b5c8 <vPortValidateInterruptPriority>
	__asm volatile
 8009956:	f3ef 8211 	mrs	r2, BASEPRI
 800995a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	61ba      	str	r2, [r7, #24]
 800996c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800996e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009970:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009976:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997a:	2b00      	cmp	r3, #0
 800997c:	d02f      	beq.n	80099de <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800997e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800998c:	f000 f89e 	bl	8009acc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009992:	1e5a      	subs	r2, r3, #1
 8009994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009996:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009998:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d112      	bne.n	80099c8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d016      	beq.n	80099d8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	3310      	adds	r3, #16
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fdfa 	bl	800a5a8 <xTaskRemoveFromEventList>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00e      	beq.n	80099d8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2201      	movs	r2, #1
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	e007      	b.n	80099d8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099cc:	3301      	adds	r3, #1
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	b25a      	sxtb	r2, r3
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80099d8:	2301      	movs	r3, #1
 80099da:	637b      	str	r3, [r7, #52]	@ 0x34
 80099dc:	e001      	b.n	80099e2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80099de:	2300      	movs	r3, #0
 80099e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f383 8811 	msr	BASEPRI, r3
}
 80099ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3738      	adds	r7, #56	@ 0x38
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10d      	bne.n	8009a32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d14d      	bne.n	8009aba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 ff9e 	bl	800a964 <xTaskPriorityDisinherit>
 8009a28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	609a      	str	r2, [r3, #8]
 8009a30:	e043      	b.n	8009aba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d119      	bne.n	8009a6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6858      	ldr	r0, [r3, #4]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a40:	461a      	mov	r2, r3
 8009a42:	68b9      	ldr	r1, [r7, #8]
 8009a44:	f002 fbf6 	bl	800c234 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a50:	441a      	add	r2, r3
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d32b      	bcc.n	8009aba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	605a      	str	r2, [r3, #4]
 8009a6a:	e026      	b.n	8009aba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	68d8      	ldr	r0, [r3, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a74:	461a      	mov	r2, r3
 8009a76:	68b9      	ldr	r1, [r7, #8]
 8009a78:	f002 fbdc 	bl	800c234 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a84:	425b      	negs	r3, r3
 8009a86:	441a      	add	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d207      	bcs.n	8009aa8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	689a      	ldr	r2, [r3, #8]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa0:	425b      	negs	r3, r3
 8009aa2:	441a      	add	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d105      	bne.n	8009aba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	1c5a      	adds	r2, r3, #1
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009ac2:	697b      	ldr	r3, [r7, #20]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3718      	adds	r7, #24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d018      	beq.n	8009b10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae6:	441a      	add	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d303      	bcc.n	8009b00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68d9      	ldr	r1, [r3, #12]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6838      	ldr	r0, [r7, #0]
 8009b0c:	f002 fb92 	bl	800c234 <memcpy>
	}
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b20:	f001 fc72 	bl	800b408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b2c:	e011      	b.n	8009b52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d012      	beq.n	8009b5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3324      	adds	r3, #36	@ 0x24
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f000 fd34 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b46:	f000 fe0d 	bl	800a764 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dce9      	bgt.n	8009b2e <prvUnlockQueue+0x16>
 8009b5a:	e000      	b.n	8009b5e <prvUnlockQueue+0x46>
					break;
 8009b5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	22ff      	movs	r2, #255	@ 0xff
 8009b62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009b66:	f001 fc81 	bl	800b46c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b6a:	f001 fc4d 	bl	800b408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b76:	e011      	b.n	8009b9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d012      	beq.n	8009ba6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3310      	adds	r3, #16
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 fd0f 	bl	800a5a8 <xTaskRemoveFromEventList>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b90:	f000 fde8 	bl	800a764 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dce9      	bgt.n	8009b78 <prvUnlockQueue+0x60>
 8009ba4:	e000      	b.n	8009ba8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ba6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	22ff      	movs	r2, #255	@ 0xff
 8009bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009bb0:	f001 fc5c 	bl	800b46c <vPortExitCritical>
}
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc4:	f001 fc20 	bl	800b408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d102      	bne.n	8009bd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e001      	b.n	8009bda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bda:	f001 fc47 	bl	800b46c <vPortExitCritical>

	return xReturn;
 8009bde:	68fb      	ldr	r3, [r7, #12]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bf0:	f001 fc0a 	bl	800b408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d102      	bne.n	8009c06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c00:	2301      	movs	r3, #1
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e001      	b.n	8009c0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c0a:	f001 fc2f 	bl	800b46c <vPortExitCritical>

	return xReturn;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3710      	adds	r7, #16
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
 8009c26:	e014      	b.n	8009c52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c28:	4a0f      	ldr	r2, [pc, #60]	@ (8009c68 <vQueueAddToRegistry+0x50>)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10b      	bne.n	8009c4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c34:	490c      	ldr	r1, [pc, #48]	@ (8009c68 <vQueueAddToRegistry+0x50>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8009c68 <vQueueAddToRegistry+0x50>)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	00db      	lsls	r3, r3, #3
 8009c44:	4413      	add	r3, r2
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c4a:	e006      	b.n	8009c5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b07      	cmp	r3, #7
 8009c56:	d9e7      	bls.n	8009c28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c58:	bf00      	nop
 8009c5a:	bf00      	nop
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	200008c4 	.word	0x200008c4

08009c6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c7c:	f001 fbc4 	bl	800b408 <vPortEnterCritical>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c86:	b25b      	sxtb	r3, r3
 8009c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8c:	d103      	bne.n	8009c96 <vQueueWaitForMessageRestricted+0x2a>
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	2200      	movs	r2, #0
 8009c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c9c:	b25b      	sxtb	r3, r3
 8009c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca2:	d103      	bne.n	8009cac <vQueueWaitForMessageRestricted+0x40>
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cac:	f001 fbde 	bl	800b46c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	3324      	adds	r3, #36	@ 0x24
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fc45 	bl	800a550 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009cc6:	6978      	ldr	r0, [r7, #20]
 8009cc8:	f7ff ff26 	bl	8009b18 <prvUnlockQueue>
	}
 8009ccc:	bf00      	nop
 8009cce:	3718      	adds	r7, #24
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b08e      	sub	sp, #56	@ 0x38
 8009cd8:	af04      	add	r7, sp, #16
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10b      	bne.n	8009d00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	623b      	str	r3, [r7, #32]
}
 8009cfa:	bf00      	nop
 8009cfc:	bf00      	nop
 8009cfe:	e7fd      	b.n	8009cfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d10b      	bne.n	8009d1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	61fb      	str	r3, [r7, #28]
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop
 8009d1c:	e7fd      	b.n	8009d1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d1e:	235c      	movs	r3, #92	@ 0x5c
 8009d20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	2b5c      	cmp	r3, #92	@ 0x5c
 8009d26:	d00b      	beq.n	8009d40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	61bb      	str	r3, [r7, #24]
}
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	e7fd      	b.n	8009d3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d01e      	beq.n	8009d86 <xTaskCreateStatic+0xb2>
 8009d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d01b      	beq.n	8009d86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d60:	2300      	movs	r3, #0
 8009d62:	9303      	str	r3, [sp, #12]
 8009d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d66:	9302      	str	r3, [sp, #8]
 8009d68:	f107 0314 	add.w	r3, r7, #20
 8009d6c:	9301      	str	r3, [sp, #4]
 8009d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f850 	bl	8009e1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d80:	f000 f8de 	bl	8009f40 <prvAddNewTaskToReadyList>
 8009d84:	e001      	b.n	8009d8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d8a:	697b      	ldr	r3, [r7, #20]
	}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3728      	adds	r7, #40	@ 0x28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08c      	sub	sp, #48	@ 0x30
 8009d98:	af04      	add	r7, sp, #16
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	4613      	mov	r3, r2
 8009da2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009da4:	88fb      	ldrh	r3, [r7, #6]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 fc4f 	bl	800b64c <pvPortMalloc>
 8009dae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00e      	beq.n	8009dd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009db6:	205c      	movs	r0, #92	@ 0x5c
 8009db8:	f001 fc48 	bl	800b64c <pvPortMalloc>
 8009dbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009dca:	e005      	b.n	8009dd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009dcc:	6978      	ldr	r0, [r7, #20]
 8009dce:	f001 fd0b 	bl	800b7e8 <vPortFree>
 8009dd2:	e001      	b.n	8009dd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009dd8:	69fb      	ldr	r3, [r7, #28]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d017      	beq.n	8009e0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009de6:	88fa      	ldrh	r2, [r7, #6]
 8009de8:	2300      	movs	r3, #0
 8009dea:	9303      	str	r3, [sp, #12]
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	9302      	str	r3, [sp, #8]
 8009df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df2:	9301      	str	r3, [sp, #4]
 8009df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	68b9      	ldr	r1, [r7, #8]
 8009dfc:	68f8      	ldr	r0, [r7, #12]
 8009dfe:	f000 f80e 	bl	8009e1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e02:	69f8      	ldr	r0, [r7, #28]
 8009e04:	f000 f89c 	bl	8009f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	61bb      	str	r3, [r7, #24]
 8009e0c:	e002      	b.n	8009e14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e14:	69bb      	ldr	r3, [r7, #24]
	}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3720      	adds	r7, #32
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b088      	sub	sp, #32
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	60f8      	str	r0, [r7, #12]
 8009e26:	60b9      	str	r1, [r7, #8]
 8009e28:	607a      	str	r2, [r7, #4]
 8009e2a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	461a      	mov	r2, r3
 8009e36:	21a5      	movs	r1, #165	@ 0xa5
 8009e38:	f002 f9b8 	bl	800c1ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e46:	3b01      	subs	r3, #1
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	4413      	add	r3, r2
 8009e4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	f023 0307 	bic.w	r3, r3, #7
 8009e54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	f003 0307 	and.w	r3, r3, #7
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00b      	beq.n	8009e78 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	617b      	str	r3, [r7, #20]
}
 8009e72:	bf00      	nop
 8009e74:	bf00      	nop
 8009e76:	e7fd      	b.n	8009e74 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d01f      	beq.n	8009ebe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	e012      	b.n	8009eaa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	4413      	add	r3, r2
 8009e8a:	7819      	ldrb	r1, [r3, #0]
 8009e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	4413      	add	r3, r2
 8009e92:	3334      	adds	r3, #52	@ 0x34
 8009e94:	460a      	mov	r2, r1
 8009e96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d006      	beq.n	8009eb2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	2b0f      	cmp	r3, #15
 8009eae:	d9e9      	bls.n	8009e84 <prvInitialiseNewTask+0x66>
 8009eb0:	e000      	b.n	8009eb4 <prvInitialiseNewTask+0x96>
			{
				break;
 8009eb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ebc:	e003      	b.n	8009ec6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	2b37      	cmp	r3, #55	@ 0x37
 8009eca:	d901      	bls.n	8009ed0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ecc:	2337      	movs	r3, #55	@ 0x37
 8009ece:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eda:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	2200      	movs	r2, #0
 8009ee0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff f8a8 	bl	800903c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	3318      	adds	r3, #24
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff f8a3 	bl	800903c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009efa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0e:	2200      	movs	r2, #0
 8009f10:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f1a:	683a      	ldr	r2, [r7, #0]
 8009f1c:	68f9      	ldr	r1, [r7, #12]
 8009f1e:	69b8      	ldr	r0, [r7, #24]
 8009f20:	f001 f93e 	bl	800b1a0 <pxPortInitialiseStack>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d002      	beq.n	8009f36 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f36:	bf00      	nop
 8009f38:	3720      	adds	r7, #32
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f48:	f001 fa5e 	bl	800b408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f4c:	4b2d      	ldr	r3, [pc, #180]	@ (800a004 <prvAddNewTaskToReadyList+0xc4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3301      	adds	r3, #1
 8009f52:	4a2c      	ldr	r2, [pc, #176]	@ (800a004 <prvAddNewTaskToReadyList+0xc4>)
 8009f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f56:	4b2c      	ldr	r3, [pc, #176]	@ (800a008 <prvAddNewTaskToReadyList+0xc8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f5e:	4a2a      	ldr	r2, [pc, #168]	@ (800a008 <prvAddNewTaskToReadyList+0xc8>)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f64:	4b27      	ldr	r3, [pc, #156]	@ (800a004 <prvAddNewTaskToReadyList+0xc4>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d110      	bne.n	8009f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f6c:	f000 fc1e 	bl	800a7ac <prvInitialiseTaskLists>
 8009f70:	e00d      	b.n	8009f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f72:	4b26      	ldr	r3, [pc, #152]	@ (800a00c <prvAddNewTaskToReadyList+0xcc>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d109      	bne.n	8009f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f7a:	4b23      	ldr	r3, [pc, #140]	@ (800a008 <prvAddNewTaskToReadyList+0xc8>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d802      	bhi.n	8009f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f88:	4a1f      	ldr	r2, [pc, #124]	@ (800a008 <prvAddNewTaskToReadyList+0xc8>)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f8e:	4b20      	ldr	r3, [pc, #128]	@ (800a010 <prvAddNewTaskToReadyList+0xd0>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	3301      	adds	r3, #1
 8009f94:	4a1e      	ldr	r2, [pc, #120]	@ (800a010 <prvAddNewTaskToReadyList+0xd0>)
 8009f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f98:	4b1d      	ldr	r3, [pc, #116]	@ (800a010 <prvAddNewTaskToReadyList+0xd0>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa4:	4b1b      	ldr	r3, [pc, #108]	@ (800a014 <prvAddNewTaskToReadyList+0xd4>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d903      	bls.n	8009fb4 <prvAddNewTaskToReadyList+0x74>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fb0:	4a18      	ldr	r2, [pc, #96]	@ (800a014 <prvAddNewTaskToReadyList+0xd4>)
 8009fb2:	6013      	str	r3, [r2, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fb8:	4613      	mov	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	4a15      	ldr	r2, [pc, #84]	@ (800a018 <prvAddNewTaskToReadyList+0xd8>)
 8009fc2:	441a      	add	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	4619      	mov	r1, r3
 8009fca:	4610      	mov	r0, r2
 8009fcc:	f7ff f843 	bl	8009056 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fd0:	f001 fa4c 	bl	800b46c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800a00c <prvAddNewTaskToReadyList+0xcc>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d00e      	beq.n	8009ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	@ (800a008 <prvAddNewTaskToReadyList+0xc8>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d207      	bcs.n	8009ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fea:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <prvAddNewTaskToReadyList+0xdc>)
 8009fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	f3bf 8f4f 	dsb	sy
 8009ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ffa:	bf00      	nop
 8009ffc:	3708      	adds	r7, #8
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	20000dd8 	.word	0x20000dd8
 800a008:	20000904 	.word	0x20000904
 800a00c:	20000de4 	.word	0x20000de4
 800a010:	20000df4 	.word	0x20000df4
 800a014:	20000de0 	.word	0x20000de0
 800a018:	20000908 	.word	0x20000908
 800a01c:	e000ed04 	.word	0xe000ed04

0800a020 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d018      	beq.n	800a064 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a032:	4b14      	ldr	r3, [pc, #80]	@ (800a084 <vTaskDelay+0x64>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d00b      	beq.n	800a052 <vTaskDelay+0x32>
	__asm volatile
 800a03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03e:	f383 8811 	msr	BASEPRI, r3
 800a042:	f3bf 8f6f 	isb	sy
 800a046:	f3bf 8f4f 	dsb	sy
 800a04a:	60bb      	str	r3, [r7, #8]
}
 800a04c:	bf00      	nop
 800a04e:	bf00      	nop
 800a050:	e7fd      	b.n	800a04e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a052:	f000 f883 	bl	800a15c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a056:	2100      	movs	r1, #0
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 fcf3 	bl	800aa44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a05e:	f000 f88b 	bl	800a178 <xTaskResumeAll>
 800a062:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d107      	bne.n	800a07a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a06a:	4b07      	ldr	r3, [pc, #28]	@ (800a088 <vTaskDelay+0x68>)
 800a06c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a070:	601a      	str	r2, [r3, #0]
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a07a:	bf00      	nop
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000e00 	.word	0x20000e00
 800a088:	e000ed04 	.word	0xe000ed04

0800a08c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	@ 0x28
 800a090:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a09a:	463a      	mov	r2, r7
 800a09c:	1d39      	adds	r1, r7, #4
 800a09e:	f107 0308 	add.w	r3, r7, #8
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fe ff76 	bl	8008f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	9202      	str	r2, [sp, #8]
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	460a      	mov	r2, r1
 800a0ba:	4922      	ldr	r1, [pc, #136]	@ (800a144 <vTaskStartScheduler+0xb8>)
 800a0bc:	4822      	ldr	r0, [pc, #136]	@ (800a148 <vTaskStartScheduler+0xbc>)
 800a0be:	f7ff fe09 	bl	8009cd4 <xTaskCreateStatic>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	4a21      	ldr	r2, [pc, #132]	@ (800a14c <vTaskStartScheduler+0xc0>)
 800a0c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0c8:	4b20      	ldr	r3, [pc, #128]	@ (800a14c <vTaskStartScheduler+0xc0>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	617b      	str	r3, [r7, #20]
 800a0d4:	e001      	b.n	800a0da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d102      	bne.n	800a0e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0e0:	f000 fd04 	bl	800aaec <xTimerCreateTimerTask>
 800a0e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d116      	bne.n	800a11a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a0ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	613b      	str	r3, [r7, #16]
}
 800a0fe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a100:	4b13      	ldr	r3, [pc, #76]	@ (800a150 <vTaskStartScheduler+0xc4>)
 800a102:	f04f 32ff 	mov.w	r2, #4294967295
 800a106:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a108:	4b12      	ldr	r3, [pc, #72]	@ (800a154 <vTaskStartScheduler+0xc8>)
 800a10a:	2201      	movs	r2, #1
 800a10c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a10e:	4b12      	ldr	r3, [pc, #72]	@ (800a158 <vTaskStartScheduler+0xcc>)
 800a110:	2200      	movs	r2, #0
 800a112:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a114:	f001 f8d4 	bl	800b2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a118:	e00f      	b.n	800a13a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a120:	d10b      	bne.n	800a13a <vTaskStartScheduler+0xae>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	60fb      	str	r3, [r7, #12]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <vTaskStartScheduler+0xaa>
}
 800a13a:	bf00      	nop
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	0800c318 	.word	0x0800c318
 800a148:	0800a77d 	.word	0x0800a77d
 800a14c:	20000dfc 	.word	0x20000dfc
 800a150:	20000df8 	.word	0x20000df8
 800a154:	20000de4 	.word	0x20000de4
 800a158:	20000ddc 	.word	0x20000ddc

0800a15c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a160:	4b04      	ldr	r3, [pc, #16]	@ (800a174 <vTaskSuspendAll+0x18>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3301      	adds	r3, #1
 800a166:	4a03      	ldr	r2, [pc, #12]	@ (800a174 <vTaskSuspendAll+0x18>)
 800a168:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a16a:	bf00      	nop
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	20000e00 	.word	0x20000e00

0800a178 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a17e:	2300      	movs	r3, #0
 800a180:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a186:	4b42      	ldr	r3, [pc, #264]	@ (800a290 <xTaskResumeAll+0x118>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10b      	bne.n	800a1a6 <xTaskResumeAll+0x2e>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	603b      	str	r3, [r7, #0]
}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	e7fd      	b.n	800a1a2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1a6:	f001 f92f 	bl	800b408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1aa:	4b39      	ldr	r3, [pc, #228]	@ (800a290 <xTaskResumeAll+0x118>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	4a37      	ldr	r2, [pc, #220]	@ (800a290 <xTaskResumeAll+0x118>)
 800a1b2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1b4:	4b36      	ldr	r3, [pc, #216]	@ (800a290 <xTaskResumeAll+0x118>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d162      	bne.n	800a282 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1bc:	4b35      	ldr	r3, [pc, #212]	@ (800a294 <xTaskResumeAll+0x11c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d05e      	beq.n	800a282 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1c4:	e02f      	b.n	800a226 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1c6:	4b34      	ldr	r3, [pc, #208]	@ (800a298 <xTaskResumeAll+0x120>)
 800a1c8:	68db      	ldr	r3, [r3, #12]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3318      	adds	r3, #24
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7fe ff9c 	bl	8009110 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe ff97 	bl	8009110 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1e6:	4b2d      	ldr	r3, [pc, #180]	@ (800a29c <xTaskResumeAll+0x124>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d903      	bls.n	800a1f6 <xTaskResumeAll+0x7e>
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a29c <xTaskResumeAll+0x124>)
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1fa:	4613      	mov	r3, r2
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4a27      	ldr	r2, [pc, #156]	@ (800a2a0 <xTaskResumeAll+0x128>)
 800a204:	441a      	add	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3304      	adds	r3, #4
 800a20a:	4619      	mov	r1, r3
 800a20c:	4610      	mov	r0, r2
 800a20e:	f7fe ff22 	bl	8009056 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a216:	4b23      	ldr	r3, [pc, #140]	@ (800a2a4 <xTaskResumeAll+0x12c>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d302      	bcc.n	800a226 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a220:	4b21      	ldr	r3, [pc, #132]	@ (800a2a8 <xTaskResumeAll+0x130>)
 800a222:	2201      	movs	r2, #1
 800a224:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a226:	4b1c      	ldr	r3, [pc, #112]	@ (800a298 <xTaskResumeAll+0x120>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1cb      	bne.n	800a1c6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a234:	f000 fb58 	bl	800a8e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a238:	4b1c      	ldr	r3, [pc, #112]	@ (800a2ac <xTaskResumeAll+0x134>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d010      	beq.n	800a266 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a244:	f000 f846 	bl	800a2d4 <xTaskIncrementTick>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a24e:	4b16      	ldr	r3, [pc, #88]	@ (800a2a8 <xTaskResumeAll+0x130>)
 800a250:	2201      	movs	r2, #1
 800a252:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3b01      	subs	r3, #1
 800a258:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1f1      	bne.n	800a244 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a260:	4b12      	ldr	r3, [pc, #72]	@ (800a2ac <xTaskResumeAll+0x134>)
 800a262:	2200      	movs	r2, #0
 800a264:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a266:	4b10      	ldr	r3, [pc, #64]	@ (800a2a8 <xTaskResumeAll+0x130>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d009      	beq.n	800a282 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a26e:	2301      	movs	r3, #1
 800a270:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a272:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b0 <xTaskResumeAll+0x138>)
 800a274:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a278:	601a      	str	r2, [r3, #0]
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a282:	f001 f8f3 	bl	800b46c <vPortExitCritical>

	return xAlreadyYielded;
 800a286:	68bb      	ldr	r3, [r7, #8]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20000e00 	.word	0x20000e00
 800a294:	20000dd8 	.word	0x20000dd8
 800a298:	20000d98 	.word	0x20000d98
 800a29c:	20000de0 	.word	0x20000de0
 800a2a0:	20000908 	.word	0x20000908
 800a2a4:	20000904 	.word	0x20000904
 800a2a8:	20000dec 	.word	0x20000dec
 800a2ac:	20000de8 	.word	0x20000de8
 800a2b0:	e000ed04 	.word	0xe000ed04

0800a2b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b083      	sub	sp, #12
 800a2b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2ba:	4b05      	ldr	r3, [pc, #20]	@ (800a2d0 <xTaskGetTickCount+0x1c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2c0:	687b      	ldr	r3, [r7, #4]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr
 800a2ce:	bf00      	nop
 800a2d0:	20000ddc 	.word	0x20000ddc

0800a2d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2de:	4b4f      	ldr	r3, [pc, #316]	@ (800a41c <xTaskIncrementTick+0x148>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 8090 	bne.w	800a408 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2e8:	4b4d      	ldr	r3, [pc, #308]	@ (800a420 <xTaskIncrementTick+0x14c>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2f0:	4a4b      	ldr	r2, [pc, #300]	@ (800a420 <xTaskIncrementTick+0x14c>)
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d121      	bne.n	800a340 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2fc:	4b49      	ldr	r3, [pc, #292]	@ (800a424 <xTaskIncrementTick+0x150>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00b      	beq.n	800a31e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	603b      	str	r3, [r7, #0]
}
 800a318:	bf00      	nop
 800a31a:	bf00      	nop
 800a31c:	e7fd      	b.n	800a31a <xTaskIncrementTick+0x46>
 800a31e:	4b41      	ldr	r3, [pc, #260]	@ (800a424 <xTaskIncrementTick+0x150>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	4b40      	ldr	r3, [pc, #256]	@ (800a428 <xTaskIncrementTick+0x154>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a3e      	ldr	r2, [pc, #248]	@ (800a424 <xTaskIncrementTick+0x150>)
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	4a3e      	ldr	r2, [pc, #248]	@ (800a428 <xTaskIncrementTick+0x154>)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	4b3e      	ldr	r3, [pc, #248]	@ (800a42c <xTaskIncrementTick+0x158>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3301      	adds	r3, #1
 800a338:	4a3c      	ldr	r2, [pc, #240]	@ (800a42c <xTaskIncrementTick+0x158>)
 800a33a:	6013      	str	r3, [r2, #0]
 800a33c:	f000 fad4 	bl	800a8e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a340:	4b3b      	ldr	r3, [pc, #236]	@ (800a430 <xTaskIncrementTick+0x15c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	693a      	ldr	r2, [r7, #16]
 800a346:	429a      	cmp	r2, r3
 800a348:	d349      	bcc.n	800a3de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a34a:	4b36      	ldr	r3, [pc, #216]	@ (800a424 <xTaskIncrementTick+0x150>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a354:	4b36      	ldr	r3, [pc, #216]	@ (800a430 <xTaskIncrementTick+0x15c>)
 800a356:	f04f 32ff 	mov.w	r2, #4294967295
 800a35a:	601a      	str	r2, [r3, #0]
					break;
 800a35c:	e03f      	b.n	800a3de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a35e:	4b31      	ldr	r3, [pc, #196]	@ (800a424 <xTaskIncrementTick+0x150>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d203      	bcs.n	800a37e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a376:	4a2e      	ldr	r2, [pc, #184]	@ (800a430 <xTaskIncrementTick+0x15c>)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a37c:	e02f      	b.n	800a3de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	3304      	adds	r3, #4
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe fec4 	bl	8009110 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	3318      	adds	r3, #24
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe febb 	bl	8009110 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a39e:	4b25      	ldr	r3, [pc, #148]	@ (800a434 <xTaskIncrementTick+0x160>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d903      	bls.n	800a3ae <xTaskIncrementTick+0xda>
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3aa:	4a22      	ldr	r2, [pc, #136]	@ (800a434 <xTaskIncrementTick+0x160>)
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4a1f      	ldr	r2, [pc, #124]	@ (800a438 <xTaskIncrementTick+0x164>)
 800a3bc:	441a      	add	r2, r3
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7fe fe46 	bl	8009056 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ce:	4b1b      	ldr	r3, [pc, #108]	@ (800a43c <xTaskIncrementTick+0x168>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d3b8      	bcc.n	800a34a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3dc:	e7b5      	b.n	800a34a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3de:	4b17      	ldr	r3, [pc, #92]	@ (800a43c <xTaskIncrementTick+0x168>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e4:	4914      	ldr	r1, [pc, #80]	@ (800a438 <xTaskIncrementTick+0x164>)
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	440b      	add	r3, r1
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d901      	bls.n	800a3fa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a3fa:	4b11      	ldr	r3, [pc, #68]	@ (800a440 <xTaskIncrementTick+0x16c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d007      	beq.n	800a412 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a402:	2301      	movs	r3, #1
 800a404:	617b      	str	r3, [r7, #20]
 800a406:	e004      	b.n	800a412 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a408:	4b0e      	ldr	r3, [pc, #56]	@ (800a444 <xTaskIncrementTick+0x170>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3301      	adds	r3, #1
 800a40e:	4a0d      	ldr	r2, [pc, #52]	@ (800a444 <xTaskIncrementTick+0x170>)
 800a410:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a412:	697b      	ldr	r3, [r7, #20]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3718      	adds	r7, #24
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}
 800a41c:	20000e00 	.word	0x20000e00
 800a420:	20000ddc 	.word	0x20000ddc
 800a424:	20000d90 	.word	0x20000d90
 800a428:	20000d94 	.word	0x20000d94
 800a42c:	20000df0 	.word	0x20000df0
 800a430:	20000df8 	.word	0x20000df8
 800a434:	20000de0 	.word	0x20000de0
 800a438:	20000908 	.word	0x20000908
 800a43c:	20000904 	.word	0x20000904
 800a440:	20000dec 	.word	0x20000dec
 800a444:	20000de8 	.word	0x20000de8

0800a448 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a44e:	4b28      	ldr	r3, [pc, #160]	@ (800a4f0 <vTaskSwitchContext+0xa8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d003      	beq.n	800a45e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a456:	4b27      	ldr	r3, [pc, #156]	@ (800a4f4 <vTaskSwitchContext+0xac>)
 800a458:	2201      	movs	r2, #1
 800a45a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a45c:	e042      	b.n	800a4e4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800a45e:	4b25      	ldr	r3, [pc, #148]	@ (800a4f4 <vTaskSwitchContext+0xac>)
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a464:	4b24      	ldr	r3, [pc, #144]	@ (800a4f8 <vTaskSwitchContext+0xb0>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	e011      	b.n	800a490 <vTaskSwitchContext+0x48>
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d10b      	bne.n	800a48a <vTaskSwitchContext+0x42>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	607b      	str	r3, [r7, #4]
}
 800a484:	bf00      	nop
 800a486:	bf00      	nop
 800a488:	e7fd      	b.n	800a486 <vTaskSwitchContext+0x3e>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	3b01      	subs	r3, #1
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	491a      	ldr	r1, [pc, #104]	@ (800a4fc <vTaskSwitchContext+0xb4>)
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	440b      	add	r3, r1
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d0e3      	beq.n	800a46c <vTaskSwitchContext+0x24>
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	4413      	add	r3, r2
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	4a13      	ldr	r2, [pc, #76]	@ (800a4fc <vTaskSwitchContext+0xb4>)
 800a4b0:	4413      	add	r3, r2
 800a4b2:	60bb      	str	r3, [r7, #8]
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	605a      	str	r2, [r3, #4]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d104      	bne.n	800a4d4 <vTaskSwitchContext+0x8c>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	605a      	str	r2, [r3, #4]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	4a09      	ldr	r2, [pc, #36]	@ (800a500 <vTaskSwitchContext+0xb8>)
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	4a06      	ldr	r2, [pc, #24]	@ (800a4f8 <vTaskSwitchContext+0xb0>)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6013      	str	r3, [r2, #0]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	20000e00 	.word	0x20000e00
 800a4f4:	20000dec 	.word	0x20000dec
 800a4f8:	20000de0 	.word	0x20000de0
 800a4fc:	20000908 	.word	0x20000908
 800a500:	20000904 	.word	0x20000904

0800a504 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10b      	bne.n	800a52c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	60fb      	str	r3, [r7, #12]
}
 800a526:	bf00      	nop
 800a528:	bf00      	nop
 800a52a:	e7fd      	b.n	800a528 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a52c:	4b07      	ldr	r3, [pc, #28]	@ (800a54c <vTaskPlaceOnEventList+0x48>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	3318      	adds	r3, #24
 800a532:	4619      	mov	r1, r3
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7fe fdb2 	bl	800909e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a53a:	2101      	movs	r1, #1
 800a53c:	6838      	ldr	r0, [r7, #0]
 800a53e:	f000 fa81 	bl	800aa44 <prvAddCurrentTaskToDelayedList>
}
 800a542:	bf00      	nop
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20000904 	.word	0x20000904

0800a550 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	617b      	str	r3, [r7, #20]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a57a:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3318      	adds	r3, #24
 800a580:	4619      	mov	r1, r3
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7fe fd67 	bl	8009056 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a58e:	f04f 33ff 	mov.w	r3, #4294967295
 800a592:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a594:	6879      	ldr	r1, [r7, #4]
 800a596:	68b8      	ldr	r0, [r7, #8]
 800a598:	f000 fa54 	bl	800aa44 <prvAddCurrentTaskToDelayedList>
	}
 800a59c:	bf00      	nop
 800a59e:	3718      	adds	r7, #24
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000904 	.word	0x20000904

0800a5a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10b      	bne.n	800a5d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	60fb      	str	r3, [r7, #12]
}
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
 800a5d4:	e7fd      	b.n	800a5d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	3318      	adds	r3, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe fd98 	bl	8009110 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a658 <xTaskRemoveFromEventList+0xb0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d11d      	bne.n	800a624 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fd8f 	bl	8009110 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5f6:	4b19      	ldr	r3, [pc, #100]	@ (800a65c <xTaskRemoveFromEventList+0xb4>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d903      	bls.n	800a606 <xTaskRemoveFromEventList+0x5e>
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a602:	4a16      	ldr	r2, [pc, #88]	@ (800a65c <xTaskRemoveFromEventList+0xb4>)
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a60a:	4613      	mov	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4413      	add	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4a13      	ldr	r2, [pc, #76]	@ (800a660 <xTaskRemoveFromEventList+0xb8>)
 800a614:	441a      	add	r2, r3
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	3304      	adds	r3, #4
 800a61a:	4619      	mov	r1, r3
 800a61c:	4610      	mov	r0, r2
 800a61e:	f7fe fd1a 	bl	8009056 <vListInsertEnd>
 800a622:	e005      	b.n	800a630 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	3318      	adds	r3, #24
 800a628:	4619      	mov	r1, r3
 800a62a:	480e      	ldr	r0, [pc, #56]	@ (800a664 <xTaskRemoveFromEventList+0xbc>)
 800a62c:	f7fe fd13 	bl	8009056 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a634:	4b0c      	ldr	r3, [pc, #48]	@ (800a668 <xTaskRemoveFromEventList+0xc0>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d905      	bls.n	800a64a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a63e:	2301      	movs	r3, #1
 800a640:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a642:	4b0a      	ldr	r3, [pc, #40]	@ (800a66c <xTaskRemoveFromEventList+0xc4>)
 800a644:	2201      	movs	r2, #1
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	e001      	b.n	800a64e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a64e:	697b      	ldr	r3, [r7, #20]
}
 800a650:	4618      	mov	r0, r3
 800a652:	3718      	adds	r7, #24
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}
 800a658:	20000e00 	.word	0x20000e00
 800a65c:	20000de0 	.word	0x20000de0
 800a660:	20000908 	.word	0x20000908
 800a664:	20000d98 	.word	0x20000d98
 800a668:	20000904 	.word	0x20000904
 800a66c:	20000dec 	.word	0x20000dec

0800a670 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a678:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <vTaskInternalSetTimeOutState+0x24>)
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a680:	4b05      	ldr	r3, [pc, #20]	@ (800a698 <vTaskInternalSetTimeOutState+0x28>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	605a      	str	r2, [r3, #4]
}
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	20000df0 	.word	0x20000df0
 800a698:	20000ddc 	.word	0x20000ddc

0800a69c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10b      	bne.n	800a6c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	613b      	str	r3, [r7, #16]
}
 800a6be:	bf00      	nop
 800a6c0:	bf00      	nop
 800a6c2:	e7fd      	b.n	800a6c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10b      	bne.n	800a6e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ce:	f383 8811 	msr	BASEPRI, r3
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	f3bf 8f4f 	dsb	sy
 800a6da:	60fb      	str	r3, [r7, #12]
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	e7fd      	b.n	800a6de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a6e2:	f000 fe91 	bl	800b408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a75c <xTaskCheckForTimeOut+0xc0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	69ba      	ldr	r2, [r7, #24]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d102      	bne.n	800a706 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a700:	2300      	movs	r3, #0
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	e023      	b.n	800a74e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	4b15      	ldr	r3, [pc, #84]	@ (800a760 <xTaskCheckForTimeOut+0xc4>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d007      	beq.n	800a722 <xTaskCheckForTimeOut+0x86>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	69ba      	ldr	r2, [r7, #24]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d302      	bcc.n	800a722 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a71c:	2301      	movs	r3, #1
 800a71e:	61fb      	str	r3, [r7, #28]
 800a720:	e015      	b.n	800a74e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	429a      	cmp	r2, r3
 800a72a:	d20b      	bcs.n	800a744 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	1ad2      	subs	r2, r2, r3
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff ff99 	bl	800a670 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a73e:	2300      	movs	r3, #0
 800a740:	61fb      	str	r3, [r7, #28]
 800a742:	e004      	b.n	800a74e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	2200      	movs	r2, #0
 800a748:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a74a:	2301      	movs	r3, #1
 800a74c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a74e:	f000 fe8d 	bl	800b46c <vPortExitCritical>

	return xReturn;
 800a752:	69fb      	ldr	r3, [r7, #28]
}
 800a754:	4618      	mov	r0, r3
 800a756:	3720      	adds	r7, #32
 800a758:	46bd      	mov	sp, r7
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	20000ddc 	.word	0x20000ddc
 800a760:	20000df0 	.word	0x20000df0

0800a764 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a768:	4b03      	ldr	r3, [pc, #12]	@ (800a778 <vTaskMissedYield+0x14>)
 800a76a:	2201      	movs	r2, #1
 800a76c:	601a      	str	r2, [r3, #0]
}
 800a76e:	bf00      	nop
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr
 800a778:	20000dec 	.word	0x20000dec

0800a77c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a784:	f000 f852 	bl	800a82c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a788:	4b06      	ldr	r3, [pc, #24]	@ (800a7a4 <prvIdleTask+0x28>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d9f9      	bls.n	800a784 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a790:	4b05      	ldr	r3, [pc, #20]	@ (800a7a8 <prvIdleTask+0x2c>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a7a0:	e7f0      	b.n	800a784 <prvIdleTask+0x8>
 800a7a2:	bf00      	nop
 800a7a4:	20000908 	.word	0x20000908
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	607b      	str	r3, [r7, #4]
 800a7b6:	e00c      	b.n	800a7d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	4a12      	ldr	r2, [pc, #72]	@ (800a80c <prvInitialiseTaskLists+0x60>)
 800a7c4:	4413      	add	r3, r2
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fe fc18 	bl	8008ffc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b37      	cmp	r3, #55	@ 0x37
 800a7d6:	d9ef      	bls.n	800a7b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7d8:	480d      	ldr	r0, [pc, #52]	@ (800a810 <prvInitialiseTaskLists+0x64>)
 800a7da:	f7fe fc0f 	bl	8008ffc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7de:	480d      	ldr	r0, [pc, #52]	@ (800a814 <prvInitialiseTaskLists+0x68>)
 800a7e0:	f7fe fc0c 	bl	8008ffc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7e4:	480c      	ldr	r0, [pc, #48]	@ (800a818 <prvInitialiseTaskLists+0x6c>)
 800a7e6:	f7fe fc09 	bl	8008ffc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7ea:	480c      	ldr	r0, [pc, #48]	@ (800a81c <prvInitialiseTaskLists+0x70>)
 800a7ec:	f7fe fc06 	bl	8008ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7f0:	480b      	ldr	r0, [pc, #44]	@ (800a820 <prvInitialiseTaskLists+0x74>)
 800a7f2:	f7fe fc03 	bl	8008ffc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a824 <prvInitialiseTaskLists+0x78>)
 800a7f8:	4a05      	ldr	r2, [pc, #20]	@ (800a810 <prvInitialiseTaskLists+0x64>)
 800a7fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <prvInitialiseTaskLists+0x7c>)
 800a7fe:	4a05      	ldr	r2, [pc, #20]	@ (800a814 <prvInitialiseTaskLists+0x68>)
 800a800:	601a      	str	r2, [r3, #0]
}
 800a802:	bf00      	nop
 800a804:	3708      	adds	r7, #8
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	20000908 	.word	0x20000908
 800a810:	20000d68 	.word	0x20000d68
 800a814:	20000d7c 	.word	0x20000d7c
 800a818:	20000d98 	.word	0x20000d98
 800a81c:	20000dac 	.word	0x20000dac
 800a820:	20000dc4 	.word	0x20000dc4
 800a824:	20000d90 	.word	0x20000d90
 800a828:	20000d94 	.word	0x20000d94

0800a82c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a832:	e019      	b.n	800a868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a834:	f000 fde8 	bl	800b408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a838:	4b10      	ldr	r3, [pc, #64]	@ (800a87c <prvCheckTasksWaitingTermination+0x50>)
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3304      	adds	r3, #4
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fc63 	bl	8009110 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a84a:	4b0d      	ldr	r3, [pc, #52]	@ (800a880 <prvCheckTasksWaitingTermination+0x54>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3b01      	subs	r3, #1
 800a850:	4a0b      	ldr	r2, [pc, #44]	@ (800a880 <prvCheckTasksWaitingTermination+0x54>)
 800a852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a854:	4b0b      	ldr	r3, [pc, #44]	@ (800a884 <prvCheckTasksWaitingTermination+0x58>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3b01      	subs	r3, #1
 800a85a:	4a0a      	ldr	r2, [pc, #40]	@ (800a884 <prvCheckTasksWaitingTermination+0x58>)
 800a85c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a85e:	f000 fe05 	bl	800b46c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f810 	bl	800a888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a868:	4b06      	ldr	r3, [pc, #24]	@ (800a884 <prvCheckTasksWaitingTermination+0x58>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1e1      	bne.n	800a834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000dac 	.word	0x20000dac
 800a880:	20000dd8 	.word	0x20000dd8
 800a884:	20000dc0 	.word	0x20000dc0

0800a888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a896:	2b00      	cmp	r3, #0
 800a898:	d108      	bne.n	800a8ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 ffa2 	bl	800b7e8 <vPortFree>
				vPortFree( pxTCB );
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 ff9f 	bl	800b7e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a8aa:	e019      	b.n	800a8e0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d103      	bne.n	800a8be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 ff96 	bl	800b7e8 <vPortFree>
	}
 800a8bc:	e010      	b.n	800a8e0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d00b      	beq.n	800a8e0 <prvDeleteTCB+0x58>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	60fb      	str	r3, [r7, #12]
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <prvDeleteTCB+0x54>
	}
 800a8e0:	bf00      	nop
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a920 <prvResetNextTaskUnblockTime+0x38>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d104      	bne.n	800a902 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800a924 <prvResetNextTaskUnblockTime+0x3c>)
 800a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a900:	e008      	b.n	800a914 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a902:	4b07      	ldr	r3, [pc, #28]	@ (800a920 <prvResetNextTaskUnblockTime+0x38>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	4a04      	ldr	r2, [pc, #16]	@ (800a924 <prvResetNextTaskUnblockTime+0x3c>)
 800a912:	6013      	str	r3, [r2, #0]
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	20000d90 	.word	0x20000d90
 800a924:	20000df8 	.word	0x20000df8

0800a928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a92e:	4b0b      	ldr	r3, [pc, #44]	@ (800a95c <xTaskGetSchedulerState+0x34>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a936:	2301      	movs	r3, #1
 800a938:	607b      	str	r3, [r7, #4]
 800a93a:	e008      	b.n	800a94e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a93c:	4b08      	ldr	r3, [pc, #32]	@ (800a960 <xTaskGetSchedulerState+0x38>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d102      	bne.n	800a94a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a944:	2302      	movs	r3, #2
 800a946:	607b      	str	r3, [r7, #4]
 800a948:	e001      	b.n	800a94e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a94a:	2300      	movs	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a94e:	687b      	ldr	r3, [r7, #4]
	}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20000de4 	.word	0x20000de4
 800a960:	20000e00 	.word	0x20000e00

0800a964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a970:	2300      	movs	r3, #0
 800a972:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d058      	beq.n	800aa2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a97a:	4b2f      	ldr	r3, [pc, #188]	@ (800aa38 <xTaskPriorityDisinherit+0xd4>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	429a      	cmp	r2, r3
 800a982:	d00b      	beq.n	800a99c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	60fb      	str	r3, [r7, #12]
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d10b      	bne.n	800a9bc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	60bb      	str	r3, [r7, #8]
}
 800a9b6:	bf00      	nop
 800a9b8:	bf00      	nop
 800a9ba:	e7fd      	b.n	800a9b8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9c0:	1e5a      	subs	r2, r3, #1
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d02c      	beq.n	800aa2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d128      	bne.n	800aa2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	3304      	adds	r3, #4
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fb96 	bl	8009110 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9fc:	4b0f      	ldr	r3, [pc, #60]	@ (800aa3c <xTaskPriorityDisinherit+0xd8>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d903      	bls.n	800aa0c <xTaskPriorityDisinherit+0xa8>
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa08:	4a0c      	ldr	r2, [pc, #48]	@ (800aa3c <xTaskPriorityDisinherit+0xd8>)
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa10:	4613      	mov	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	4a09      	ldr	r2, [pc, #36]	@ (800aa40 <xTaskPriorityDisinherit+0xdc>)
 800aa1a:	441a      	add	r2, r3
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	4619      	mov	r1, r3
 800aa22:	4610      	mov	r0, r2
 800aa24:	f7fe fb17 	bl	8009056 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa2c:	697b      	ldr	r3, [r7, #20]
	}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	20000904 	.word	0x20000904
 800aa3c:	20000de0 	.word	0x20000de0
 800aa40:	20000908 	.word	0x20000908

0800aa44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa4e:	4b21      	ldr	r3, [pc, #132]	@ (800aad4 <prvAddCurrentTaskToDelayedList+0x90>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa54:	4b20      	ldr	r3, [pc, #128]	@ (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fb58 	bl	8009110 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa66:	d10a      	bne.n	800aa7e <prvAddCurrentTaskToDelayedList+0x3a>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d007      	beq.n	800aa7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa6e:	4b1a      	ldr	r3, [pc, #104]	@ (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	3304      	adds	r3, #4
 800aa74:	4619      	mov	r1, r3
 800aa76:	4819      	ldr	r0, [pc, #100]	@ (800aadc <prvAddCurrentTaskToDelayedList+0x98>)
 800aa78:	f7fe faed 	bl	8009056 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa7c:	e026      	b.n	800aacc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4413      	add	r3, r2
 800aa84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa86:	4b14      	ldr	r3, [pc, #80]	@ (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68ba      	ldr	r2, [r7, #8]
 800aa8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d209      	bcs.n	800aaaa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa96:	4b12      	ldr	r3, [pc, #72]	@ (800aae0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	@ (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3304      	adds	r3, #4
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	4610      	mov	r0, r2
 800aaa4:	f7fe fafb 	bl	800909e <vListInsert>
}
 800aaa8:	e010      	b.n	800aacc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaaa:	4b0e      	ldr	r3, [pc, #56]	@ (800aae4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aaac:	681a      	ldr	r2, [r3, #0]
 800aaae:	4b0a      	ldr	r3, [pc, #40]	@ (800aad8 <prvAddCurrentTaskToDelayedList+0x94>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f7fe faf1 	bl	800909e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aabc:	4b0a      	ldr	r3, [pc, #40]	@ (800aae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d202      	bcs.n	800aacc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aac6:	4a08      	ldr	r2, [pc, #32]	@ (800aae8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	6013      	str	r3, [r2, #0]
}
 800aacc:	bf00      	nop
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000ddc 	.word	0x20000ddc
 800aad8:	20000904 	.word	0x20000904
 800aadc:	20000dc4 	.word	0x20000dc4
 800aae0:	20000d94 	.word	0x20000d94
 800aae4:	20000d90 	.word	0x20000d90
 800aae8:	20000df8 	.word	0x20000df8

0800aaec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08a      	sub	sp, #40	@ 0x28
 800aaf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaf6:	f000 fb13 	bl	800b120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aafa:	4b1d      	ldr	r3, [pc, #116]	@ (800ab70 <xTimerCreateTimerTask+0x84>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d021      	beq.n	800ab46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab0a:	1d3a      	adds	r2, r7, #4
 800ab0c:	f107 0108 	add.w	r1, r7, #8
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fe fa57 	bl	8008fc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	9202      	str	r2, [sp, #8]
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	2302      	movs	r3, #2
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	2300      	movs	r3, #0
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	4911      	ldr	r1, [pc, #68]	@ (800ab74 <xTimerCreateTimerTask+0x88>)
 800ab2e:	4812      	ldr	r0, [pc, #72]	@ (800ab78 <xTimerCreateTimerTask+0x8c>)
 800ab30:	f7ff f8d0 	bl	8009cd4 <xTaskCreateStatic>
 800ab34:	4603      	mov	r3, r0
 800ab36:	4a11      	ldr	r2, [pc, #68]	@ (800ab7c <xTimerCreateTimerTask+0x90>)
 800ab38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab3a:	4b10      	ldr	r3, [pc, #64]	@ (800ab7c <xTimerCreateTimerTask+0x90>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab42:	2301      	movs	r3, #1
 800ab44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10b      	bne.n	800ab64 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800ab4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab50:	f383 8811 	msr	BASEPRI, r3
 800ab54:	f3bf 8f6f 	isb	sy
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	613b      	str	r3, [r7, #16]
}
 800ab5e:	bf00      	nop
 800ab60:	bf00      	nop
 800ab62:	e7fd      	b.n	800ab60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ab64:	697b      	ldr	r3, [r7, #20]
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3718      	adds	r7, #24
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	20000e34 	.word	0x20000e34
 800ab74:	0800c320 	.word	0x0800c320
 800ab78:	0800acb9 	.word	0x0800acb9
 800ab7c:	20000e38 	.word	0x20000e38

0800ab80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08a      	sub	sp, #40	@ 0x28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
 800ab8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10b      	bne.n	800abb0 <xTimerGenericCommand+0x30>
	__asm volatile
 800ab98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab9c:	f383 8811 	msr	BASEPRI, r3
 800aba0:	f3bf 8f6f 	isb	sy
 800aba4:	f3bf 8f4f 	dsb	sy
 800aba8:	623b      	str	r3, [r7, #32]
}
 800abaa:	bf00      	nop
 800abac:	bf00      	nop
 800abae:	e7fd      	b.n	800abac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abb0:	4b19      	ldr	r3, [pc, #100]	@ (800ac18 <xTimerGenericCommand+0x98>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d02a      	beq.n	800ac0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b05      	cmp	r3, #5
 800abc8:	dc18      	bgt.n	800abfc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abca:	f7ff fead 	bl	800a928 <xTaskGetSchedulerState>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b02      	cmp	r3, #2
 800abd2:	d109      	bne.n	800abe8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abd4:	4b10      	ldr	r3, [pc, #64]	@ (800ac18 <xTimerGenericCommand+0x98>)
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	f107 0110 	add.w	r1, r7, #16
 800abdc:	2300      	movs	r3, #0
 800abde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abe0:	f7fe fc06 	bl	80093f0 <xQueueGenericSend>
 800abe4:	6278      	str	r0, [r7, #36]	@ 0x24
 800abe6:	e012      	b.n	800ac0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800abe8:	4b0b      	ldr	r3, [pc, #44]	@ (800ac18 <xTimerGenericCommand+0x98>)
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	f107 0110 	add.w	r1, r7, #16
 800abf0:	2300      	movs	r3, #0
 800abf2:	2200      	movs	r2, #0
 800abf4:	f7fe fbfc 	bl	80093f0 <xQueueGenericSend>
 800abf8:	6278      	str	r0, [r7, #36]	@ 0x24
 800abfa:	e008      	b.n	800ac0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abfc:	4b06      	ldr	r3, [pc, #24]	@ (800ac18 <xTimerGenericCommand+0x98>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	f107 0110 	add.w	r1, r7, #16
 800ac04:	2300      	movs	r3, #0
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	f7fe fcf4 	bl	80095f4 <xQueueGenericSendFromISR>
 800ac0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3728      	adds	r7, #40	@ 0x28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	20000e34 	.word	0x20000e34

0800ac1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af02      	add	r7, sp, #8
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac26:	4b23      	ldr	r3, [pc, #140]	@ (800acb4 <prvProcessExpiredTimer+0x98>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	3304      	adds	r3, #4
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7fe fa6b 	bl	8009110 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac40:	f003 0304 	and.w	r3, r3, #4
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d023      	beq.n	800ac90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	699a      	ldr	r2, [r3, #24]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	18d1      	adds	r1, r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	6978      	ldr	r0, [r7, #20]
 800ac56:	f000 f8d5 	bl	800ae04 <prvInsertTimerInActiveList>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d020      	beq.n	800aca2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac60:	2300      	movs	r3, #0
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2300      	movs	r3, #0
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	6978      	ldr	r0, [r7, #20]
 800ac6c:	f7ff ff88 	bl	800ab80 <xTimerGenericCommand>
 800ac70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d114      	bne.n	800aca2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	60fb      	str	r3, [r7, #12]
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac96:	f023 0301 	bic.w	r3, r3, #1
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	6978      	ldr	r0, [r7, #20]
 800aca8:	4798      	blx	r3
}
 800acaa:	bf00      	nop
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	20000e2c 	.word	0x20000e2c

0800acb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acc0:	f107 0308 	add.w	r3, r7, #8
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f859 	bl	800ad7c <prvGetNextExpireTime>
 800acca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	4619      	mov	r1, r3
 800acd0:	68f8      	ldr	r0, [r7, #12]
 800acd2:	f000 f805 	bl	800ace0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acd6:	f000 f8d7 	bl	800ae88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acda:	bf00      	nop
 800acdc:	e7f0      	b.n	800acc0 <prvTimerTask+0x8>
	...

0800ace0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800acea:	f7ff fa37 	bl	800a15c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800acee:	f107 0308 	add.w	r3, r7, #8
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 f866 	bl	800adc4 <prvSampleTimeNow>
 800acf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d130      	bne.n	800ad62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <prvProcessTimerOrBlockTask+0x3c>
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d806      	bhi.n	800ad1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad0e:	f7ff fa33 	bl	800a178 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f7ff ff81 	bl	800ac1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad1a:	e024      	b.n	800ad66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d008      	beq.n	800ad34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad22:	4b13      	ldr	r3, [pc, #76]	@ (800ad70 <prvProcessTimerOrBlockTask+0x90>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <prvProcessTimerOrBlockTask+0x50>
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e000      	b.n	800ad32 <prvProcessTimerOrBlockTask+0x52>
 800ad30:	2300      	movs	r3, #0
 800ad32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad34:	4b0f      	ldr	r3, [pc, #60]	@ (800ad74 <prvProcessTimerOrBlockTask+0x94>)
 800ad36:	6818      	ldr	r0, [r3, #0]
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	1ad3      	subs	r3, r2, r3
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	4619      	mov	r1, r3
 800ad42:	f7fe ff93 	bl	8009c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad46:	f7ff fa17 	bl	800a178 <xTaskResumeAll>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10a      	bne.n	800ad66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad50:	4b09      	ldr	r3, [pc, #36]	@ (800ad78 <prvProcessTimerOrBlockTask+0x98>)
 800ad52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	f3bf 8f6f 	isb	sy
}
 800ad60:	e001      	b.n	800ad66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad62:	f7ff fa09 	bl	800a178 <xTaskResumeAll>
}
 800ad66:	bf00      	nop
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20000e30 	.word	0x20000e30
 800ad74:	20000e34 	.word	0x20000e34
 800ad78:	e000ed04 	.word	0xe000ed04

0800ad7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad84:	4b0e      	ldr	r3, [pc, #56]	@ (800adc0 <prvGetNextExpireTime+0x44>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <prvGetNextExpireTime+0x16>
 800ad8e:	2201      	movs	r2, #1
 800ad90:	e000      	b.n	800ad94 <prvGetNextExpireTime+0x18>
 800ad92:	2200      	movs	r2, #0
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d105      	bne.n	800adac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ada0:	4b07      	ldr	r3, [pc, #28]	@ (800adc0 <prvGetNextExpireTime+0x44>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	e001      	b.n	800adb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800adb0:	68fb      	ldr	r3, [r7, #12]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20000e2c 	.word	0x20000e2c

0800adc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adcc:	f7ff fa72 	bl	800a2b4 <xTaskGetTickCount>
 800add0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800add2:	4b0b      	ldr	r3, [pc, #44]	@ (800ae00 <prvSampleTimeNow+0x3c>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	429a      	cmp	r2, r3
 800adda:	d205      	bcs.n	800ade8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800addc:	f000 f93a 	bl	800b054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
 800ade6:	e002      	b.n	800adee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2200      	movs	r2, #0
 800adec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800adee:	4a04      	ldr	r2, [pc, #16]	@ (800ae00 <prvSampleTimeNow+0x3c>)
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800adf4:	68fb      	ldr	r3, [r7, #12]
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}
 800adfe:	bf00      	nop
 800ae00:	20000e3c 	.word	0x20000e3c

0800ae04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
 800ae10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d812      	bhi.n	800ae50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	1ad2      	subs	r2, r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d302      	bcc.n	800ae3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	e01b      	b.n	800ae76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae3e:	4b10      	ldr	r3, [pc, #64]	@ (800ae80 <prvInsertTimerInActiveList+0x7c>)
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3304      	adds	r3, #4
 800ae46:	4619      	mov	r1, r3
 800ae48:	4610      	mov	r0, r2
 800ae4a:	f7fe f928 	bl	800909e <vListInsert>
 800ae4e:	e012      	b.n	800ae76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d206      	bcs.n	800ae66 <prvInsertTimerInActiveList+0x62>
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d302      	bcc.n	800ae66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae60:	2301      	movs	r3, #1
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e007      	b.n	800ae76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae66:	4b07      	ldr	r3, [pc, #28]	@ (800ae84 <prvInsertTimerInActiveList+0x80>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4610      	mov	r0, r2
 800ae72:	f7fe f914 	bl	800909e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae76:	697b      	ldr	r3, [r7, #20]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3718      	adds	r7, #24
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	20000e30 	.word	0x20000e30
 800ae84:	20000e2c 	.word	0x20000e2c

0800ae88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08e      	sub	sp, #56	@ 0x38
 800ae8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae8e:	e0ce      	b.n	800b02e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	da19      	bge.n	800aeca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae96:	1d3b      	adds	r3, r7, #4
 800ae98:	3304      	adds	r3, #4
 800ae9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10b      	bne.n	800aeba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800aea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea6:	f383 8811 	msr	BASEPRI, r3
 800aeaa:	f3bf 8f6f 	isb	sy
 800aeae:	f3bf 8f4f 	dsb	sy
 800aeb2:	61fb      	str	r3, [r7, #28]
}
 800aeb4:	bf00      	nop
 800aeb6:	bf00      	nop
 800aeb8:	e7fd      	b.n	800aeb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aeba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aec0:	6850      	ldr	r0, [r2, #4]
 800aec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aec4:	6892      	ldr	r2, [r2, #8]
 800aec6:	4611      	mov	r1, r2
 800aec8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f2c0 80ae 	blt.w	800b02e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d004      	beq.n	800aee8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee0:	3304      	adds	r3, #4
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe f914 	bl	8009110 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee8:	463b      	mov	r3, r7
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff ff6a 	bl	800adc4 <prvSampleTimeNow>
 800aef0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2b09      	cmp	r3, #9
 800aef6:	f200 8097 	bhi.w	800b028 <prvProcessReceivedCommands+0x1a0>
 800aefa:	a201      	add	r2, pc, #4	@ (adr r2, 800af00 <prvProcessReceivedCommands+0x78>)
 800aefc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af29 	.word	0x0800af29
 800af08:	0800af29 	.word	0x0800af29
 800af0c:	0800af9f 	.word	0x0800af9f
 800af10:	0800afb3 	.word	0x0800afb3
 800af14:	0800afff 	.word	0x0800afff
 800af18:	0800af29 	.word	0x0800af29
 800af1c:	0800af29 	.word	0x0800af29
 800af20:	0800af9f 	.word	0x0800af9f
 800af24:	0800afb3 	.word	0x0800afb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af2e:	f043 0301 	orr.w	r3, r3, #1
 800af32:	b2da      	uxtb	r2, r3
 800af34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af3a:	68ba      	ldr	r2, [r7, #8]
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	18d1      	adds	r1, r2, r3
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af48:	f7ff ff5c 	bl	800ae04 <prvInsertTimerInActiveList>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d06c      	beq.n	800b02c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af60:	f003 0304 	and.w	r3, r3, #4
 800af64:	2b00      	cmp	r3, #0
 800af66:	d061      	beq.n	800b02c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af6c:	699b      	ldr	r3, [r3, #24]
 800af6e:	441a      	add	r2, r3
 800af70:	2300      	movs	r3, #0
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	2300      	movs	r3, #0
 800af76:	2100      	movs	r1, #0
 800af78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af7a:	f7ff fe01 	bl	800ab80 <xTimerGenericCommand>
 800af7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d152      	bne.n	800b02c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af8a:	f383 8811 	msr	BASEPRI, r3
 800af8e:	f3bf 8f6f 	isb	sy
 800af92:	f3bf 8f4f 	dsb	sy
 800af96:	61bb      	str	r3, [r7, #24]
}
 800af98:	bf00      	nop
 800af9a:	bf00      	nop
 800af9c:	e7fd      	b.n	800af9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afa4:	f023 0301 	bic.w	r3, r3, #1
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800afb0:	e03d      	b.n	800b02e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afb8:	f043 0301 	orr.w	r3, r3, #1
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10b      	bne.n	800afea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	617b      	str	r3, [r7, #20]
}
 800afe4:	bf00      	nop
 800afe6:	bf00      	nop
 800afe8:	e7fd      	b.n	800afe6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afec:	699a      	ldr	r2, [r3, #24]
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	18d1      	adds	r1, r2, r3
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aff8:	f7ff ff04 	bl	800ae04 <prvInsertTimerInActiveList>
					break;
 800affc:	e017      	b.n	800b02e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800affe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d103      	bne.n	800b014 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b00c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b00e:	f000 fbeb 	bl	800b7e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b012:	e00c      	b.n	800b02e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b01a:	f023 0301 	bic.w	r3, r3, #1
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b026:	e002      	b.n	800b02e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b028:	bf00      	nop
 800b02a:	e000      	b.n	800b02e <prvProcessReceivedCommands+0x1a6>
					break;
 800b02c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b02e:	4b08      	ldr	r3, [pc, #32]	@ (800b050 <prvProcessReceivedCommands+0x1c8>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	1d39      	adds	r1, r7, #4
 800b034:	2200      	movs	r2, #0
 800b036:	4618      	mov	r0, r3
 800b038:	f7fe fb7a 	bl	8009730 <xQueueReceive>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f47f af26 	bne.w	800ae90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop
 800b048:	3730      	adds	r7, #48	@ 0x30
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	20000e34 	.word	0x20000e34

0800b054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b05a:	e049      	b.n	800b0f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b05c:	4b2e      	ldr	r3, [pc, #184]	@ (800b118 <prvSwitchTimerLists+0xc4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b066:	4b2c      	ldr	r3, [pc, #176]	@ (800b118 <prvSwitchTimerLists+0xc4>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3304      	adds	r3, #4
 800b074:	4618      	mov	r0, r3
 800b076:	f7fe f84b 	bl	8009110 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	6a1b      	ldr	r3, [r3, #32]
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d02f      	beq.n	800b0f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	693a      	ldr	r2, [r7, #16]
 800b096:	4413      	add	r3, r2
 800b098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d90e      	bls.n	800b0c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	68ba      	ldr	r2, [r7, #8]
 800b0a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b118 <prvSwitchTimerLists+0xc4>)
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7fd fff0 	bl	800909e <vListInsert>
 800b0be:	e017      	b.n	800b0f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f7ff fd58 	bl	800ab80 <xTimerGenericCommand>
 800b0d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10b      	bne.n	800b0f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0dc:	f383 8811 	msr	BASEPRI, r3
 800b0e0:	f3bf 8f6f 	isb	sy
 800b0e4:	f3bf 8f4f 	dsb	sy
 800b0e8:	603b      	str	r3, [r7, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	bf00      	nop
 800b0ee:	e7fd      	b.n	800b0ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0f0:	4b09      	ldr	r3, [pc, #36]	@ (800b118 <prvSwitchTimerLists+0xc4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1b0      	bne.n	800b05c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0fa:	4b07      	ldr	r3, [pc, #28]	@ (800b118 <prvSwitchTimerLists+0xc4>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b100:	4b06      	ldr	r3, [pc, #24]	@ (800b11c <prvSwitchTimerLists+0xc8>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a04      	ldr	r2, [pc, #16]	@ (800b118 <prvSwitchTimerLists+0xc4>)
 800b106:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b108:	4a04      	ldr	r2, [pc, #16]	@ (800b11c <prvSwitchTimerLists+0xc8>)
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	6013      	str	r3, [r2, #0]
}
 800b10e:	bf00      	nop
 800b110:	3718      	adds	r7, #24
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	20000e2c 	.word	0x20000e2c
 800b11c:	20000e30 	.word	0x20000e30

0800b120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b126:	f000 f96f 	bl	800b408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b12a:	4b15      	ldr	r3, [pc, #84]	@ (800b180 <prvCheckForValidListAndQueue+0x60>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d120      	bne.n	800b174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b132:	4814      	ldr	r0, [pc, #80]	@ (800b184 <prvCheckForValidListAndQueue+0x64>)
 800b134:	f7fd ff62 	bl	8008ffc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b138:	4813      	ldr	r0, [pc, #76]	@ (800b188 <prvCheckForValidListAndQueue+0x68>)
 800b13a:	f7fd ff5f 	bl	8008ffc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b13e:	4b13      	ldr	r3, [pc, #76]	@ (800b18c <prvCheckForValidListAndQueue+0x6c>)
 800b140:	4a10      	ldr	r2, [pc, #64]	@ (800b184 <prvCheckForValidListAndQueue+0x64>)
 800b142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b144:	4b12      	ldr	r3, [pc, #72]	@ (800b190 <prvCheckForValidListAndQueue+0x70>)
 800b146:	4a10      	ldr	r2, [pc, #64]	@ (800b188 <prvCheckForValidListAndQueue+0x68>)
 800b148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b14a:	2300      	movs	r3, #0
 800b14c:	9300      	str	r3, [sp, #0]
 800b14e:	4b11      	ldr	r3, [pc, #68]	@ (800b194 <prvCheckForValidListAndQueue+0x74>)
 800b150:	4a11      	ldr	r2, [pc, #68]	@ (800b198 <prvCheckForValidListAndQueue+0x78>)
 800b152:	2110      	movs	r1, #16
 800b154:	200a      	movs	r0, #10
 800b156:	f7fe f86f 	bl	8009238 <xQueueGenericCreateStatic>
 800b15a:	4603      	mov	r3, r0
 800b15c:	4a08      	ldr	r2, [pc, #32]	@ (800b180 <prvCheckForValidListAndQueue+0x60>)
 800b15e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b160:	4b07      	ldr	r3, [pc, #28]	@ (800b180 <prvCheckForValidListAndQueue+0x60>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d005      	beq.n	800b174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b168:	4b05      	ldr	r3, [pc, #20]	@ (800b180 <prvCheckForValidListAndQueue+0x60>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	490b      	ldr	r1, [pc, #44]	@ (800b19c <prvCheckForValidListAndQueue+0x7c>)
 800b16e:	4618      	mov	r0, r3
 800b170:	f7fe fd52 	bl	8009c18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b174:	f000 f97a 	bl	800b46c <vPortExitCritical>
}
 800b178:	bf00      	nop
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	20000e34 	.word	0x20000e34
 800b184:	20000e04 	.word	0x20000e04
 800b188:	20000e18 	.word	0x20000e18
 800b18c:	20000e2c 	.word	0x20000e2c
 800b190:	20000e30 	.word	0x20000e30
 800b194:	20000ee0 	.word	0x20000ee0
 800b198:	20000e40 	.word	0x20000e40
 800b19c:	0800c328 	.word	0x0800c328

0800b1a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	3b04      	subs	r3, #4
 800b1b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b1b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	3b04      	subs	r3, #4
 800b1be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	f023 0201 	bic.w	r2, r3, #1
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	3b04      	subs	r3, #4
 800b1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1d0:	4a0c      	ldr	r2, [pc, #48]	@ (800b204 <pxPortInitialiseStack+0x64>)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	3b14      	subs	r3, #20
 800b1da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3b04      	subs	r3, #4
 800b1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f06f 0202 	mvn.w	r2, #2
 800b1ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3b20      	subs	r3, #32
 800b1f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	0800b209 	.word	0x0800b209

0800b208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b20e:	2300      	movs	r3, #0
 800b210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b212:	4b13      	ldr	r3, [pc, #76]	@ (800b260 <prvTaskExitError+0x58>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21a:	d00b      	beq.n	800b234 <prvTaskExitError+0x2c>
	__asm volatile
 800b21c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b220:	f383 8811 	msr	BASEPRI, r3
 800b224:	f3bf 8f6f 	isb	sy
 800b228:	f3bf 8f4f 	dsb	sy
 800b22c:	60fb      	str	r3, [r7, #12]
}
 800b22e:	bf00      	nop
 800b230:	bf00      	nop
 800b232:	e7fd      	b.n	800b230 <prvTaskExitError+0x28>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	60bb      	str	r3, [r7, #8]
}
 800b246:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b248:	bf00      	nop
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0fc      	beq.n	800b24a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	3714      	adds	r7, #20
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	2000002c 	.word	0x2000002c
	...

0800b270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b270:	4b07      	ldr	r3, [pc, #28]	@ (800b290 <pxCurrentTCBConst2>)
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	6808      	ldr	r0, [r1, #0]
 800b276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	f380 8809 	msr	PSP, r0
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f04f 0000 	mov.w	r0, #0
 800b286:	f380 8811 	msr	BASEPRI, r0
 800b28a:	4770      	bx	lr
 800b28c:	f3af 8000 	nop.w

0800b290 <pxCurrentTCBConst2>:
 800b290:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop

0800b298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b298:	4808      	ldr	r0, [pc, #32]	@ (800b2bc <prvPortStartFirstTask+0x24>)
 800b29a:	6800      	ldr	r0, [r0, #0]
 800b29c:	6800      	ldr	r0, [r0, #0]
 800b29e:	f380 8808 	msr	MSP, r0
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	f380 8814 	msr	CONTROL, r0
 800b2aa:	b662      	cpsie	i
 800b2ac:	b661      	cpsie	f
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	df00      	svc	0
 800b2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ba:	bf00      	nop
 800b2bc:	e000ed08 	.word	0xe000ed08

0800b2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b2c6:	4b47      	ldr	r3, [pc, #284]	@ (800b3e4 <xPortStartScheduler+0x124>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a47      	ldr	r2, [pc, #284]	@ (800b3e8 <xPortStartScheduler+0x128>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d10b      	bne.n	800b2e8 <xPortStartScheduler+0x28>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	613b      	str	r3, [r7, #16]
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	e7fd      	b.n	800b2e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b2e8:	4b3e      	ldr	r3, [pc, #248]	@ (800b3e4 <xPortStartScheduler+0x124>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a3f      	ldr	r2, [pc, #252]	@ (800b3ec <xPortStartScheduler+0x12c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d10b      	bne.n	800b30a <xPortStartScheduler+0x4a>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60fb      	str	r3, [r7, #12]
}
 800b304:	bf00      	nop
 800b306:	bf00      	nop
 800b308:	e7fd      	b.n	800b306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b30a:	4b39      	ldr	r3, [pc, #228]	@ (800b3f0 <xPortStartScheduler+0x130>)
 800b30c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b2db      	uxtb	r3, r3
 800b314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	22ff      	movs	r2, #255	@ 0xff
 800b31a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	b2db      	uxtb	r3, r3
 800b322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b324:	78fb      	ldrb	r3, [r7, #3]
 800b326:	b2db      	uxtb	r3, r3
 800b328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	4b31      	ldr	r3, [pc, #196]	@ (800b3f4 <xPortStartScheduler+0x134>)
 800b330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b332:	4b31      	ldr	r3, [pc, #196]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b334:	2207      	movs	r2, #7
 800b336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b338:	e009      	b.n	800b34e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b33a:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3b01      	subs	r3, #1
 800b340:	4a2d      	ldr	r2, [pc, #180]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	005b      	lsls	r3, r3, #1
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b34e:	78fb      	ldrb	r3, [r7, #3]
 800b350:	b2db      	uxtb	r3, r3
 800b352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b356:	2b80      	cmp	r3, #128	@ 0x80
 800b358:	d0ef      	beq.n	800b33a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b35a:	4b27      	ldr	r3, [pc, #156]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f1c3 0307 	rsb	r3, r3, #7
 800b362:	2b04      	cmp	r3, #4
 800b364:	d00b      	beq.n	800b37e <xPortStartScheduler+0xbe>
	__asm volatile
 800b366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b36a:	f383 8811 	msr	BASEPRI, r3
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f3bf 8f4f 	dsb	sy
 800b376:	60bb      	str	r3, [r7, #8]
}
 800b378:	bf00      	nop
 800b37a:	bf00      	nop
 800b37c:	e7fd      	b.n	800b37a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b37e:	4b1e      	ldr	r3, [pc, #120]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	021b      	lsls	r3, r3, #8
 800b384:	4a1c      	ldr	r2, [pc, #112]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b388:	4b1b      	ldr	r3, [pc, #108]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b390:	4a19      	ldr	r2, [pc, #100]	@ (800b3f8 <xPortStartScheduler+0x138>)
 800b392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	b2da      	uxtb	r2, r3
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b39c:	4b17      	ldr	r3, [pc, #92]	@ (800b3fc <xPortStartScheduler+0x13c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a16      	ldr	r2, [pc, #88]	@ (800b3fc <xPortStartScheduler+0x13c>)
 800b3a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b3a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3a8:	4b14      	ldr	r3, [pc, #80]	@ (800b3fc <xPortStartScheduler+0x13c>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a13      	ldr	r2, [pc, #76]	@ (800b3fc <xPortStartScheduler+0x13c>)
 800b3ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b3b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3b4:	f000 f8da 	bl	800b56c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3b8:	4b11      	ldr	r3, [pc, #68]	@ (800b400 <xPortStartScheduler+0x140>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3be:	f000 f8f9 	bl	800b5b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b3c2:	4b10      	ldr	r3, [pc, #64]	@ (800b404 <xPortStartScheduler+0x144>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a0f      	ldr	r2, [pc, #60]	@ (800b404 <xPortStartScheduler+0x144>)
 800b3c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b3cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b3ce:	f7ff ff63 	bl	800b298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b3d2:	f7ff f839 	bl	800a448 <vTaskSwitchContext>
	prvTaskExitError();
 800b3d6:	f7ff ff17 	bl	800b208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b3da:	2300      	movs	r3, #0
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3718      	adds	r7, #24
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	e000ed00 	.word	0xe000ed00
 800b3e8:	410fc271 	.word	0x410fc271
 800b3ec:	410fc270 	.word	0x410fc270
 800b3f0:	e000e400 	.word	0xe000e400
 800b3f4:	20000f30 	.word	0x20000f30
 800b3f8:	20000f34 	.word	0x20000f34
 800b3fc:	e000ed20 	.word	0xe000ed20
 800b400:	2000002c 	.word	0x2000002c
 800b404:	e000ef34 	.word	0xe000ef34

0800b408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	607b      	str	r3, [r7, #4]
}
 800b420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b422:	4b10      	ldr	r3, [pc, #64]	@ (800b464 <vPortEnterCritical+0x5c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3301      	adds	r3, #1
 800b428:	4a0e      	ldr	r2, [pc, #56]	@ (800b464 <vPortEnterCritical+0x5c>)
 800b42a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b42c:	4b0d      	ldr	r3, [pc, #52]	@ (800b464 <vPortEnterCritical+0x5c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b01      	cmp	r3, #1
 800b432:	d110      	bne.n	800b456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b434:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <vPortEnterCritical+0x60>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <vPortEnterCritical+0x4e>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	603b      	str	r3, [r7, #0]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <vPortEnterCritical+0x4a>
	}
}
 800b456:	bf00      	nop
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	2000002c 	.word	0x2000002c
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b472:	4b12      	ldr	r3, [pc, #72]	@ (800b4bc <vPortExitCritical+0x50>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10b      	bne.n	800b492 <vPortExitCritical+0x26>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	607b      	str	r3, [r7, #4]
}
 800b48c:	bf00      	nop
 800b48e:	bf00      	nop
 800b490:	e7fd      	b.n	800b48e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b492:	4b0a      	ldr	r3, [pc, #40]	@ (800b4bc <vPortExitCritical+0x50>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3b01      	subs	r3, #1
 800b498:	4a08      	ldr	r2, [pc, #32]	@ (800b4bc <vPortExitCritical+0x50>)
 800b49a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b49c:	4b07      	ldr	r3, [pc, #28]	@ (800b4bc <vPortExitCritical+0x50>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d105      	bne.n	800b4b0 <vPortExitCritical+0x44>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	f383 8811 	msr	BASEPRI, r3
}
 800b4ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	2000002c 	.word	0x2000002c

0800b4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b4c0:	f3ef 8009 	mrs	r0, PSP
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	4b15      	ldr	r3, [pc, #84]	@ (800b520 <pxCurrentTCBConst>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	f01e 0f10 	tst.w	lr, #16
 800b4d0:	bf08      	it	eq
 800b4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4da:	6010      	str	r0, [r2, #0]
 800b4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b4e4:	f380 8811 	msr	BASEPRI, r0
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f7fe ffaa 	bl	800a448 <vTaskSwitchContext>
 800b4f4:	f04f 0000 	mov.w	r0, #0
 800b4f8:	f380 8811 	msr	BASEPRI, r0
 800b4fc:	bc09      	pop	{r0, r3}
 800b4fe:	6819      	ldr	r1, [r3, #0]
 800b500:	6808      	ldr	r0, [r1, #0]
 800b502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b506:	f01e 0f10 	tst.w	lr, #16
 800b50a:	bf08      	it	eq
 800b50c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b510:	f380 8809 	msr	PSP, r0
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	f3af 8000 	nop.w

0800b520 <pxCurrentTCBConst>:
 800b520:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b524:	bf00      	nop
 800b526:	bf00      	nop

0800b528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
	__asm volatile
 800b52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b532:	f383 8811 	msr	BASEPRI, r3
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	607b      	str	r3, [r7, #4]
}
 800b540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b542:	f7fe fec7 	bl	800a2d4 <xTaskIncrementTick>
 800b546:	4603      	mov	r3, r0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b54c:	4b06      	ldr	r3, [pc, #24]	@ (800b568 <xPortSysTickHandler+0x40>)
 800b54e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b552:	601a      	str	r2, [r3, #0]
 800b554:	2300      	movs	r3, #0
 800b556:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	f383 8811 	msr	BASEPRI, r3
}
 800b55e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	e000ed04 	.word	0xe000ed04

0800b56c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b570:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a0 <vPortSetupTimerInterrupt+0x34>)
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b576:	4b0b      	ldr	r3, [pc, #44]	@ (800b5a4 <vPortSetupTimerInterrupt+0x38>)
 800b578:	2200      	movs	r2, #0
 800b57a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b57c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <vPortSetupTimerInterrupt+0x3c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a0a      	ldr	r2, [pc, #40]	@ (800b5ac <vPortSetupTimerInterrupt+0x40>)
 800b582:	fba2 2303 	umull	r2, r3, r2, r3
 800b586:	099b      	lsrs	r3, r3, #6
 800b588:	4a09      	ldr	r2, [pc, #36]	@ (800b5b0 <vPortSetupTimerInterrupt+0x44>)
 800b58a:	3b01      	subs	r3, #1
 800b58c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b58e:	4b04      	ldr	r3, [pc, #16]	@ (800b5a0 <vPortSetupTimerInterrupt+0x34>)
 800b590:	2207      	movs	r2, #7
 800b592:	601a      	str	r2, [r3, #0]
}
 800b594:	bf00      	nop
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	e000e010 	.word	0xe000e010
 800b5a4:	e000e018 	.word	0xe000e018
 800b5a8:	20000000 	.word	0x20000000
 800b5ac:	10624dd3 	.word	0x10624dd3
 800b5b0:	e000e014 	.word	0xe000e014

0800b5b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b5c4 <vPortEnableVFP+0x10>
 800b5b8:	6801      	ldr	r1, [r0, #0]
 800b5ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b5be:	6001      	str	r1, [r0, #0]
 800b5c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5c2:	bf00      	nop
 800b5c4:	e000ed88 	.word	0xe000ed88

0800b5c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b5ce:	f3ef 8305 	mrs	r3, IPSR
 800b5d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b0f      	cmp	r3, #15
 800b5d8:	d915      	bls.n	800b606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b5da:	4a18      	ldr	r2, [pc, #96]	@ (800b63c <vPortValidateInterruptPriority+0x74>)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4413      	add	r3, r2
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5e4:	4b16      	ldr	r3, [pc, #88]	@ (800b640 <vPortValidateInterruptPriority+0x78>)
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	7afa      	ldrb	r2, [r7, #11]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d20b      	bcs.n	800b606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f2:	f383 8811 	msr	BASEPRI, r3
 800b5f6:	f3bf 8f6f 	isb	sy
 800b5fa:	f3bf 8f4f 	dsb	sy
 800b5fe:	607b      	str	r3, [r7, #4]
}
 800b600:	bf00      	nop
 800b602:	bf00      	nop
 800b604:	e7fd      	b.n	800b602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b606:	4b0f      	ldr	r3, [pc, #60]	@ (800b644 <vPortValidateInterruptPriority+0x7c>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b60e:	4b0e      	ldr	r3, [pc, #56]	@ (800b648 <vPortValidateInterruptPriority+0x80>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d90b      	bls.n	800b62e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	603b      	str	r3, [r7, #0]
}
 800b628:	bf00      	nop
 800b62a:	bf00      	nop
 800b62c:	e7fd      	b.n	800b62a <vPortValidateInterruptPriority+0x62>
	}
 800b62e:	bf00      	nop
 800b630:	3714      	adds	r7, #20
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	e000e3f0 	.word	0xe000e3f0
 800b640:	20000f30 	.word	0x20000f30
 800b644:	e000ed0c 	.word	0xe000ed0c
 800b648:	20000f34 	.word	0x20000f34

0800b64c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08a      	sub	sp, #40	@ 0x28
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b654:	2300      	movs	r3, #0
 800b656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b658:	f7fe fd80 	bl	800a15c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b65c:	4b5c      	ldr	r3, [pc, #368]	@ (800b7d0 <pvPortMalloc+0x184>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b664:	f000 f924 	bl	800b8b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b668:	4b5a      	ldr	r3, [pc, #360]	@ (800b7d4 <pvPortMalloc+0x188>)
 800b66a:	681a      	ldr	r2, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4013      	ands	r3, r2
 800b670:	2b00      	cmp	r3, #0
 800b672:	f040 8095 	bne.w	800b7a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d01e      	beq.n	800b6ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b67c:	2208      	movs	r2, #8
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	4413      	add	r3, r2
 800b682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f003 0307 	and.w	r3, r3, #7
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d015      	beq.n	800b6ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f023 0307 	bic.w	r3, r3, #7
 800b694:	3308      	adds	r3, #8
 800b696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f003 0307 	and.w	r3, r3, #7
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00b      	beq.n	800b6ba <pvPortMalloc+0x6e>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	617b      	str	r3, [r7, #20]
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop
 800b6b8:	e7fd      	b.n	800b6b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d06f      	beq.n	800b7a0 <pvPortMalloc+0x154>
 800b6c0:	4b45      	ldr	r3, [pc, #276]	@ (800b7d8 <pvPortMalloc+0x18c>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d86a      	bhi.n	800b7a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b6ca:	4b44      	ldr	r3, [pc, #272]	@ (800b7dc <pvPortMalloc+0x190>)
 800b6cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b6ce:	4b43      	ldr	r3, [pc, #268]	@ (800b7dc <pvPortMalloc+0x190>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6d4:	e004      	b.n	800b6e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d903      	bls.n	800b6f2 <pvPortMalloc+0xa6>
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1f1      	bne.n	800b6d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6f2:	4b37      	ldr	r3, [pc, #220]	@ (800b7d0 <pvPortMalloc+0x184>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d051      	beq.n	800b7a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2208      	movs	r2, #8
 800b702:	4413      	add	r3, r2
 800b704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	685a      	ldr	r2, [r3, #4]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	1ad2      	subs	r2, r2, r3
 800b716:	2308      	movs	r3, #8
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d920      	bls.n	800b760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4413      	add	r3, r2
 800b724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	f003 0307 	and.w	r3, r3, #7
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00b      	beq.n	800b748 <pvPortMalloc+0xfc>
	__asm volatile
 800b730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b734:	f383 8811 	msr	BASEPRI, r3
 800b738:	f3bf 8f6f 	isb	sy
 800b73c:	f3bf 8f4f 	dsb	sy
 800b740:	613b      	str	r3, [r7, #16]
}
 800b742:	bf00      	nop
 800b744:	bf00      	nop
 800b746:	e7fd      	b.n	800b744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	1ad2      	subs	r2, r2, r3
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b75a:	69b8      	ldr	r0, [r7, #24]
 800b75c:	f000 f90a 	bl	800b974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b760:	4b1d      	ldr	r3, [pc, #116]	@ (800b7d8 <pvPortMalloc+0x18c>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	4a1b      	ldr	r2, [pc, #108]	@ (800b7d8 <pvPortMalloc+0x18c>)
 800b76c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b76e:	4b1a      	ldr	r3, [pc, #104]	@ (800b7d8 <pvPortMalloc+0x18c>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	4b1b      	ldr	r3, [pc, #108]	@ (800b7e0 <pvPortMalloc+0x194>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	429a      	cmp	r2, r3
 800b778:	d203      	bcs.n	800b782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b77a:	4b17      	ldr	r3, [pc, #92]	@ (800b7d8 <pvPortMalloc+0x18c>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a18      	ldr	r2, [pc, #96]	@ (800b7e0 <pvPortMalloc+0x194>)
 800b780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	4b13      	ldr	r3, [pc, #76]	@ (800b7d4 <pvPortMalloc+0x188>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	431a      	orrs	r2, r3
 800b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b796:	4b13      	ldr	r3, [pc, #76]	@ (800b7e4 <pvPortMalloc+0x198>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	3301      	adds	r3, #1
 800b79c:	4a11      	ldr	r2, [pc, #68]	@ (800b7e4 <pvPortMalloc+0x198>)
 800b79e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7a0:	f7fe fcea 	bl	800a178 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d00b      	beq.n	800b7c6 <pvPortMalloc+0x17a>
	__asm volatile
 800b7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b2:	f383 8811 	msr	BASEPRI, r3
 800b7b6:	f3bf 8f6f 	isb	sy
 800b7ba:	f3bf 8f4f 	dsb	sy
 800b7be:	60fb      	str	r3, [r7, #12]
}
 800b7c0:	bf00      	nop
 800b7c2:	bf00      	nop
 800b7c4:	e7fd      	b.n	800b7c2 <pvPortMalloc+0x176>
	return pvReturn;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3728      	adds	r7, #40	@ 0x28
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}
 800b7d0:	20004b40 	.word	0x20004b40
 800b7d4:	20004b54 	.word	0x20004b54
 800b7d8:	20004b44 	.word	0x20004b44
 800b7dc:	20004b38 	.word	0x20004b38
 800b7e0:	20004b48 	.word	0x20004b48
 800b7e4:	20004b4c 	.word	0x20004b4c

0800b7e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d04f      	beq.n	800b89a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7fa:	2308      	movs	r3, #8
 800b7fc:	425b      	negs	r3, r3
 800b7fe:	697a      	ldr	r2, [r7, #20]
 800b800:	4413      	add	r3, r2
 800b802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b25      	ldr	r3, [pc, #148]	@ (800b8a4 <vPortFree+0xbc>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4013      	ands	r3, r2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d10b      	bne.n	800b82e <vPortFree+0x46>
	__asm volatile
 800b816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81a:	f383 8811 	msr	BASEPRI, r3
 800b81e:	f3bf 8f6f 	isb	sy
 800b822:	f3bf 8f4f 	dsb	sy
 800b826:	60fb      	str	r3, [r7, #12]
}
 800b828:	bf00      	nop
 800b82a:	bf00      	nop
 800b82c:	e7fd      	b.n	800b82a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d00b      	beq.n	800b84e <vPortFree+0x66>
	__asm volatile
 800b836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b83a:	f383 8811 	msr	BASEPRI, r3
 800b83e:	f3bf 8f6f 	isb	sy
 800b842:	f3bf 8f4f 	dsb	sy
 800b846:	60bb      	str	r3, [r7, #8]
}
 800b848:	bf00      	nop
 800b84a:	bf00      	nop
 800b84c:	e7fd      	b.n	800b84a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	4b14      	ldr	r3, [pc, #80]	@ (800b8a4 <vPortFree+0xbc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4013      	ands	r3, r2
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d01e      	beq.n	800b89a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d11a      	bne.n	800b89a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	685a      	ldr	r2, [r3, #4]
 800b868:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a4 <vPortFree+0xbc>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	43db      	mvns	r3, r3
 800b86e:	401a      	ands	r2, r3
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b874:	f7fe fc72 	bl	800a15c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	685a      	ldr	r2, [r3, #4]
 800b87c:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a8 <vPortFree+0xc0>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4413      	add	r3, r2
 800b882:	4a09      	ldr	r2, [pc, #36]	@ (800b8a8 <vPortFree+0xc0>)
 800b884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b886:	6938      	ldr	r0, [r7, #16]
 800b888:	f000 f874 	bl	800b974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b88c:	4b07      	ldr	r3, [pc, #28]	@ (800b8ac <vPortFree+0xc4>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	3301      	adds	r3, #1
 800b892:	4a06      	ldr	r2, [pc, #24]	@ (800b8ac <vPortFree+0xc4>)
 800b894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b896:	f7fe fc6f 	bl	800a178 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b89a:	bf00      	nop
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	20004b54 	.word	0x20004b54
 800b8a8:	20004b44 	.word	0x20004b44
 800b8ac:	20004b50 	.word	0x20004b50

0800b8b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b8ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8bc:	4b27      	ldr	r3, [pc, #156]	@ (800b95c <prvHeapInit+0xac>)
 800b8be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00c      	beq.n	800b8e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	3307      	adds	r3, #7
 800b8ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f023 0307 	bic.w	r3, r3, #7
 800b8d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	4a1f      	ldr	r2, [pc, #124]	@ (800b95c <prvHeapInit+0xac>)
 800b8e0:	4413      	add	r3, r2
 800b8e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b960 <prvHeapInit+0xb0>)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8ee:	4b1c      	ldr	r3, [pc, #112]	@ (800b960 <prvHeapInit+0xb0>)
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8fc:	2208      	movs	r2, #8
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	1a9b      	subs	r3, r3, r2
 800b902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4a15      	ldr	r2, [pc, #84]	@ (800b964 <prvHeapInit+0xb4>)
 800b910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b912:	4b14      	ldr	r3, [pc, #80]	@ (800b964 <prvHeapInit+0xb4>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2200      	movs	r2, #0
 800b918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b91a:	4b12      	ldr	r3, [pc, #72]	@ (800b964 <prvHeapInit+0xb4>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	1ad2      	subs	r2, r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b930:	4b0c      	ldr	r3, [pc, #48]	@ (800b964 <prvHeapInit+0xb4>)
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	4a0a      	ldr	r2, [pc, #40]	@ (800b968 <prvHeapInit+0xb8>)
 800b93e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	4a09      	ldr	r2, [pc, #36]	@ (800b96c <prvHeapInit+0xbc>)
 800b946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b948:	4b09      	ldr	r3, [pc, #36]	@ (800b970 <prvHeapInit+0xc0>)
 800b94a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b94e:	601a      	str	r2, [r3, #0]
}
 800b950:	bf00      	nop
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	20000f38 	.word	0x20000f38
 800b960:	20004b38 	.word	0x20004b38
 800b964:	20004b40 	.word	0x20004b40
 800b968:	20004b48 	.word	0x20004b48
 800b96c:	20004b44 	.word	0x20004b44
 800b970:	20004b54 	.word	0x20004b54

0800b974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b97c:	4b28      	ldr	r3, [pc, #160]	@ (800ba20 <prvInsertBlockIntoFreeList+0xac>)
 800b97e:	60fb      	str	r3, [r7, #12]
 800b980:	e002      	b.n	800b988 <prvInsertBlockIntoFreeList+0x14>
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60fb      	str	r3, [r7, #12]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d8f7      	bhi.n	800b982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	4413      	add	r3, r2
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d108      	bne.n	800b9b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	685a      	ldr	r2, [r3, #4]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	441a      	add	r2, r3
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	68ba      	ldr	r2, [r7, #8]
 800b9c0:	441a      	add	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d118      	bne.n	800b9fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	4b15      	ldr	r3, [pc, #84]	@ (800ba24 <prvInsertBlockIntoFreeList+0xb0>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d00d      	beq.n	800b9f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685a      	ldr	r2, [r3, #4]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	441a      	add	r2, r3
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681a      	ldr	r2, [r3, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e008      	b.n	800ba04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9f2:	4b0c      	ldr	r3, [pc, #48]	@ (800ba24 <prvInsertBlockIntoFreeList+0xb0>)
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	601a      	str	r2, [r3, #0]
 800b9fa:	e003      	b.n	800ba04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d002      	beq.n	800ba12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba12:	bf00      	nop
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20004b38 	.word	0x20004b38
 800ba24:	20004b40 	.word	0x20004b40

0800ba28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	490e      	ldr	r1, [pc, #56]	@ (800ba68 <MX_USB_HOST_Init+0x40>)
 800ba30:	480e      	ldr	r0, [pc, #56]	@ (800ba6c <MX_USB_HOST_Init+0x44>)
 800ba32:	f7fb f93f 	bl	8006cb4 <USBH_Init>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ba3c:	f7f4 ffa8 	bl	8000990 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ba40:	490b      	ldr	r1, [pc, #44]	@ (800ba70 <MX_USB_HOST_Init+0x48>)
 800ba42:	480a      	ldr	r0, [pc, #40]	@ (800ba6c <MX_USB_HOST_Init+0x44>)
 800ba44:	f7fb fa05 	bl	8006e52 <USBH_RegisterClass>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d001      	beq.n	800ba52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ba4e:	f7f4 ff9f 	bl	8000990 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ba52:	4806      	ldr	r0, [pc, #24]	@ (800ba6c <MX_USB_HOST_Init+0x44>)
 800ba54:	f7fb fa89 	bl	8006f6a <USBH_Start>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d001      	beq.n	800ba62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ba5e:	f7f4 ff97 	bl	8000990 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ba62:	bf00      	nop
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	0800ba75 	.word	0x0800ba75
 800ba6c:	20004b58 	.word	0x20004b58
 800ba70:	2000000c 	.word	0x2000000c

0800ba74 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b083      	sub	sp, #12
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d819      	bhi.n	800babc <USBH_UserProcess+0x48>
 800ba88:	a201      	add	r2, pc, #4	@ (adr r2, 800ba90 <USBH_UserProcess+0x1c>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800babd 	.word	0x0800babd
 800ba94:	0800baad 	.word	0x0800baad
 800ba98:	0800babd 	.word	0x0800babd
 800ba9c:	0800bab5 	.word	0x0800bab5
 800baa0:	0800baa5 	.word	0x0800baa5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800baa4:	4b09      	ldr	r3, [pc, #36]	@ (800bacc <USBH_UserProcess+0x58>)
 800baa6:	2203      	movs	r2, #3
 800baa8:	701a      	strb	r2, [r3, #0]
  break;
 800baaa:	e008      	b.n	800babe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800baac:	4b07      	ldr	r3, [pc, #28]	@ (800bacc <USBH_UserProcess+0x58>)
 800baae:	2202      	movs	r2, #2
 800bab0:	701a      	strb	r2, [r3, #0]
  break;
 800bab2:	e004      	b.n	800babe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bab4:	4b05      	ldr	r3, [pc, #20]	@ (800bacc <USBH_UserProcess+0x58>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	701a      	strb	r2, [r3, #0]
  break;
 800baba:	e000      	b.n	800babe <USBH_UserProcess+0x4a>

  default:
  break;
 800babc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800babe:	bf00      	nop
 800bac0:	370c      	adds	r7, #12
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	20004f3c 	.word	0x20004f3c

0800bad0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b08a      	sub	sp, #40	@ 0x28
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bad8:	f107 0314 	add.w	r3, r7, #20
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
 800bae0:	605a      	str	r2, [r3, #4]
 800bae2:	609a      	str	r2, [r3, #8]
 800bae4:	60da      	str	r2, [r3, #12]
 800bae6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800baf0:	d147      	bne.n	800bb82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baf2:	2300      	movs	r3, #0
 800baf4:	613b      	str	r3, [r7, #16]
 800baf6:	4b25      	ldr	r3, [pc, #148]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800baf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bafa:	4a24      	ldr	r2, [pc, #144]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bafc:	f043 0301 	orr.w	r3, r3, #1
 800bb00:	6313      	str	r3, [r2, #48]	@ 0x30
 800bb02:	4b22      	ldr	r3, [pc, #136]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bb04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]
 800bb0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bb0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bb14:	2300      	movs	r3, #0
 800bb16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb18:	2300      	movs	r3, #0
 800bb1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bb1c:	f107 0314 	add.w	r3, r7, #20
 800bb20:	4619      	mov	r1, r3
 800bb22:	481b      	ldr	r0, [pc, #108]	@ (800bb90 <HAL_HCD_MspInit+0xc0>)
 800bb24:	f7f5 fae4 	bl	80010f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bb28:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bb2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bb2e:	2302      	movs	r3, #2
 800bb30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb32:	2300      	movs	r3, #0
 800bb34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bb36:	2300      	movs	r3, #0
 800bb38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bb3a:	230a      	movs	r3, #10
 800bb3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bb3e:	f107 0314 	add.w	r3, r7, #20
 800bb42:	4619      	mov	r1, r3
 800bb44:	4812      	ldr	r0, [pc, #72]	@ (800bb90 <HAL_HCD_MspInit+0xc0>)
 800bb46:	f7f5 fad3 	bl	80010f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb4a:	4b10      	ldr	r3, [pc, #64]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb4e:	4a0f      	ldr	r2, [pc, #60]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bb50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb54:	6353      	str	r3, [r2, #52]	@ 0x34
 800bb56:	2300      	movs	r3, #0
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bb5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb5e:	4a0b      	ldr	r2, [pc, #44]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bb60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bb64:	6453      	str	r3, [r2, #68]	@ 0x44
 800bb66:	4b09      	ldr	r3, [pc, #36]	@ (800bb8c <HAL_HCD_MspInit+0xbc>)
 800bb68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bb72:	2200      	movs	r2, #0
 800bb74:	2105      	movs	r1, #5
 800bb76:	2043      	movs	r0, #67	@ 0x43
 800bb78:	f7f5 fa83 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb7c:	2043      	movs	r0, #67	@ 0x43
 800bb7e:	f7f5 fa9c 	bl	80010ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb82:	bf00      	nop
 800bb84:	3728      	adds	r7, #40	@ 0x28
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	40023800 	.word	0x40023800
 800bb90:	40020000 	.word	0x40020000

0800bb94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fb fe93 	bl	80078ce <USBH_LL_IncTimer>
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7fb fed7 	bl	8007972 <USBH_LL_Connect>
}
 800bbc4:	bf00      	nop
 800bbc6:	3708      	adds	r7, #8
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}

0800bbcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fb feec 	bl	80079b8 <USBH_LL_Disconnect>
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fb ff23 	bl	8007a4a <USBH_LL_NotifyURBChange>
#endif
}
 800bc04:	bf00      	nop
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fb fe81 	bl	8007922 <USBH_LL_PortEnabled>
}
 800bc20:	bf00      	nop
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc36:	4618      	mov	r0, r3
 800bc38:	f7fb fe8d 	bl	8007956 <USBH_LL_PortDisabled>
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d12a      	bne.n	800bcac <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bc56:	4a18      	ldr	r2, [pc, #96]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a15      	ldr	r2, [pc, #84]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc62:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc66:	4b14      	ldr	r3, [pc, #80]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc68:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bc6c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bc6e:	4b12      	ldr	r3, [pc, #72]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc70:	2208      	movs	r2, #8
 800bc72:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bc74:	4b10      	ldr	r3, [pc, #64]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc76:	2201      	movs	r2, #1
 800bc78:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bc80:	4b0d      	ldr	r3, [pc, #52]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc82:	2202      	movs	r2, #2
 800bc84:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc86:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bc8c:	480a      	ldr	r0, [pc, #40]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc8e:	f7f5 fbfe 	bl	800148e <HAL_HCD_Init>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d001      	beq.n	800bc9c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bc98:	f7f4 fe7a 	bl	8000990 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bc9c:	4806      	ldr	r0, [pc, #24]	@ (800bcb8 <USBH_LL_Init+0x74>)
 800bc9e:	f7f6 f85f 	bl	8001d60 <HAL_HCD_GetCurrentFrame>
 800bca2:	4603      	mov	r3, r0
 800bca4:	4619      	mov	r1, r3
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7fb fe02 	bl	80078b0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	20004f40 	.word	0x20004f40

0800bcbc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f5 ffcc 	bl	8001c70 <HAL_HCD_Start>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 f95e 	bl	800bfa0 <USBH_Get_USB_Status>
 800bce4:	4603      	mov	r3, r0
 800bce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7f5 ffd4 	bl	8001cb6 <HAL_HCD_Stop>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd12:	7bfb      	ldrb	r3, [r7, #15]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 f943 	bl	800bfa0 <USBH_Get_USB_Status>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b084      	sub	sp, #16
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bd30:	2301      	movs	r3, #1
 800bd32:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7f6 f81e 	bl	8001d7c <HAL_HCD_GetCurrentSpeed>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d00c      	beq.n	800bd60 <USBH_LL_GetSpeed+0x38>
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d80d      	bhi.n	800bd66 <USBH_LL_GetSpeed+0x3e>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <USBH_LL_GetSpeed+0x2c>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d003      	beq.n	800bd5a <USBH_LL_GetSpeed+0x32>
 800bd52:	e008      	b.n	800bd66 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73fb      	strb	r3, [r7, #15]
    break;
 800bd58:	e008      	b.n	800bd6c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5e:	e005      	b.n	800bd6c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bd60:	2302      	movs	r3, #2
 800bd62:	73fb      	strb	r3, [r7, #15]
    break;
 800bd64:	e002      	b.n	800bd6c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bd66:	2301      	movs	r3, #1
 800bd68:	73fb      	strb	r3, [r7, #15]
    break;
 800bd6a:	bf00      	nop
  }
  return  speed;
 800bd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b084      	sub	sp, #16
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd82:	2300      	movs	r3, #0
 800bd84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7f5 ffaf 	bl	8001cf0 <HAL_HCD_ResetPort>
 800bd92:	4603      	mov	r3, r0
 800bd94:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bd96:	7bfb      	ldrb	r3, [r7, #15]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 f901 	bl	800bfa0 <USBH_Get_USB_Status>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdbe:	78fa      	ldrb	r2, [r7, #3]
 800bdc0:	4611      	mov	r1, r2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f7f5 ffb7 	bl	8001d36 <HAL_HCD_HC_GetXferCount>
 800bdc8:	4603      	mov	r3, r0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3708      	adds	r7, #8
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}

0800bdd2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdd2:	b590      	push	{r4, r7, lr}
 800bdd4:	b089      	sub	sp, #36	@ 0x24
 800bdd6:	af04      	add	r7, sp, #16
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	4608      	mov	r0, r1
 800bddc:	4611      	mov	r1, r2
 800bdde:	461a      	mov	r2, r3
 800bde0:	4603      	mov	r3, r0
 800bde2:	70fb      	strb	r3, [r7, #3]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70bb      	strb	r3, [r7, #2]
 800bde8:	4613      	mov	r3, r2
 800bdea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bdfa:	787c      	ldrb	r4, [r7, #1]
 800bdfc:	78ba      	ldrb	r2, [r7, #2]
 800bdfe:	78f9      	ldrb	r1, [r7, #3]
 800be00:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be02:	9302      	str	r3, [sp, #8]
 800be04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800be08:	9301      	str	r3, [sp, #4]
 800be0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be0e:	9300      	str	r3, [sp, #0]
 800be10:	4623      	mov	r3, r4
 800be12:	f7f5 fba3 	bl	800155c <HAL_HCD_HC_Init>
 800be16:	4603      	mov	r3, r0
 800be18:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800be1a:	7bfb      	ldrb	r3, [r7, #15]
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 f8bf 	bl	800bfa0 <USBH_Get_USB_Status>
 800be22:	4603      	mov	r3, r0
 800be24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be26:	7bbb      	ldrb	r3, [r7, #14]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd90      	pop	{r4, r7, pc}

0800be30 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be4a:	78fa      	ldrb	r2, [r7, #3]
 800be4c:	4611      	mov	r1, r2
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f5 fc3c 	bl	80016cc <HAL_HCD_HC_Halt>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be58:	7bfb      	ldrb	r3, [r7, #15]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f000 f8a0 	bl	800bfa0 <USBH_Get_USB_Status>
 800be60:	4603      	mov	r3, r0
 800be62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be64:	7bbb      	ldrb	r3, [r7, #14]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3710      	adds	r7, #16
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800be6e:	b590      	push	{r4, r7, lr}
 800be70:	b089      	sub	sp, #36	@ 0x24
 800be72:	af04      	add	r7, sp, #16
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	4608      	mov	r0, r1
 800be78:	4611      	mov	r1, r2
 800be7a:	461a      	mov	r2, r3
 800be7c:	4603      	mov	r3, r0
 800be7e:	70fb      	strb	r3, [r7, #3]
 800be80:	460b      	mov	r3, r1
 800be82:	70bb      	strb	r3, [r7, #2]
 800be84:	4613      	mov	r3, r2
 800be86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be88:	2300      	movs	r3, #0
 800be8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be8c:	2300      	movs	r3, #0
 800be8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800be96:	787c      	ldrb	r4, [r7, #1]
 800be98:	78ba      	ldrb	r2, [r7, #2]
 800be9a:	78f9      	ldrb	r1, [r7, #3]
 800be9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bea0:	9303      	str	r3, [sp, #12]
 800bea2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bea4:	9302      	str	r3, [sp, #8]
 800bea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bea8:	9301      	str	r3, [sp, #4]
 800beaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	4623      	mov	r3, r4
 800beb2:	f7f5 fc2f 	bl	8001714 <HAL_HCD_HC_SubmitRequest>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 f86f 	bl	800bfa0 <USBH_Get_USB_Status>
 800bec2:	4603      	mov	r3, r0
 800bec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bec6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3714      	adds	r7, #20
 800becc:	46bd      	mov	sp, r7
 800bece:	bd90      	pop	{r4, r7, pc}

0800bed0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bee2:	78fa      	ldrb	r2, [r7, #3]
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f5 ff10 	bl	8001d0c <HAL_HCD_HC_GetURBState>
 800beec:	4603      	mov	r3, r0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bef6:	b580      	push	{r7, lr}
 800bef8:	b082      	sub	sp, #8
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
 800befe:	460b      	mov	r3, r1
 800bf00:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d103      	bne.n	800bf14 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 f872 	bl	800bff8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bf14:	20c8      	movs	r0, #200	@ 0xc8
 800bf16:	f7f4 ffb5 	bl	8000e84 <HAL_Delay>
  return USBH_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3708      	adds	r7, #8
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	70fb      	strb	r3, [r7, #3]
 800bf30:	4613      	mov	r3, r2
 800bf32:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf3a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bf3c:	78fa      	ldrb	r2, [r7, #3]
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	4613      	mov	r3, r2
 800bf42:	011b      	lsls	r3, r3, #4
 800bf44:	1a9b      	subs	r3, r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	440b      	add	r3, r1
 800bf4a:	3317      	adds	r3, #23
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00a      	beq.n	800bf68 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bf52:	78fa      	ldrb	r2, [r7, #3]
 800bf54:	68f9      	ldr	r1, [r7, #12]
 800bf56:	4613      	mov	r3, r2
 800bf58:	011b      	lsls	r3, r3, #4
 800bf5a:	1a9b      	subs	r3, r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	440b      	add	r3, r1
 800bf60:	333c      	adds	r3, #60	@ 0x3c
 800bf62:	78ba      	ldrb	r2, [r7, #2]
 800bf64:	701a      	strb	r2, [r3, #0]
 800bf66:	e009      	b.n	800bf7c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bf68:	78fa      	ldrb	r2, [r7, #3]
 800bf6a:	68f9      	ldr	r1, [r7, #12]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	011b      	lsls	r3, r3, #4
 800bf70:	1a9b      	subs	r3, r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	333d      	adds	r3, #61	@ 0x3d
 800bf78:	78ba      	ldrb	r2, [r7, #2]
 800bf7a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b082      	sub	sp, #8
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7f4 ff76 	bl	8000e84 <HAL_Delay>
}
 800bf98:	bf00      	nop
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b085      	sub	sp, #20
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bfae:	79fb      	ldrb	r3, [r7, #7]
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d817      	bhi.n	800bfe4 <USBH_Get_USB_Status+0x44>
 800bfb4:	a201      	add	r2, pc, #4	@ (adr r2, 800bfbc <USBH_Get_USB_Status+0x1c>)
 800bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfba:	bf00      	nop
 800bfbc:	0800bfcd 	.word	0x0800bfcd
 800bfc0:	0800bfd3 	.word	0x0800bfd3
 800bfc4:	0800bfd9 	.word	0x0800bfd9
 800bfc8:	0800bfdf 	.word	0x0800bfdf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd0:	e00b      	b.n	800bfea <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bfd2:	2302      	movs	r3, #2
 800bfd4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfd6:	e008      	b.n	800bfea <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	73fb      	strb	r3, [r7, #15]
    break;
 800bfdc:	e005      	b.n	800bfea <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bfde:	2302      	movs	r3, #2
 800bfe0:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe2:	e002      	b.n	800bfea <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfe8:	bf00      	nop
  }
  return usb_status;
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3714      	adds	r7, #20
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c002:	79fb      	ldrb	r3, [r7, #7]
 800c004:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d102      	bne.n	800c012 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c00c:	2300      	movs	r3, #0
 800c00e:	73fb      	strb	r3, [r7, #15]
 800c010:	e001      	b.n	800c016 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c012:	2301      	movs	r3, #1
 800c014:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c016:	7bfb      	ldrb	r3, [r7, #15]
 800c018:	461a      	mov	r2, r3
 800c01a:	2101      	movs	r1, #1
 800c01c:	4803      	ldr	r0, [pc, #12]	@ (800c02c <MX_DriverVbusFS+0x34>)
 800c01e:	f7f5 fa03 	bl	8001428 <HAL_GPIO_WritePin>
}
 800c022:	bf00      	nop
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
 800c02a:	bf00      	nop
 800c02c:	40020800 	.word	0x40020800

0800c030 <malloc>:
 800c030:	4b02      	ldr	r3, [pc, #8]	@ (800c03c <malloc+0xc>)
 800c032:	4601      	mov	r1, r0
 800c034:	6818      	ldr	r0, [r3, #0]
 800c036:	f000 b82d 	b.w	800c094 <_malloc_r>
 800c03a:	bf00      	nop
 800c03c:	20000030 	.word	0x20000030

0800c040 <free>:
 800c040:	4b02      	ldr	r3, [pc, #8]	@ (800c04c <free+0xc>)
 800c042:	4601      	mov	r1, r0
 800c044:	6818      	ldr	r0, [r3, #0]
 800c046:	f000 b903 	b.w	800c250 <_free_r>
 800c04a:	bf00      	nop
 800c04c:	20000030 	.word	0x20000030

0800c050 <sbrk_aligned>:
 800c050:	b570      	push	{r4, r5, r6, lr}
 800c052:	4e0f      	ldr	r6, [pc, #60]	@ (800c090 <sbrk_aligned+0x40>)
 800c054:	460c      	mov	r4, r1
 800c056:	6831      	ldr	r1, [r6, #0]
 800c058:	4605      	mov	r5, r0
 800c05a:	b911      	cbnz	r1, 800c062 <sbrk_aligned+0x12>
 800c05c:	f000 f8ae 	bl	800c1bc <_sbrk_r>
 800c060:	6030      	str	r0, [r6, #0]
 800c062:	4621      	mov	r1, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f8a9 	bl	800c1bc <_sbrk_r>
 800c06a:	1c43      	adds	r3, r0, #1
 800c06c:	d103      	bne.n	800c076 <sbrk_aligned+0x26>
 800c06e:	f04f 34ff 	mov.w	r4, #4294967295
 800c072:	4620      	mov	r0, r4
 800c074:	bd70      	pop	{r4, r5, r6, pc}
 800c076:	1cc4      	adds	r4, r0, #3
 800c078:	f024 0403 	bic.w	r4, r4, #3
 800c07c:	42a0      	cmp	r0, r4
 800c07e:	d0f8      	beq.n	800c072 <sbrk_aligned+0x22>
 800c080:	1a21      	subs	r1, r4, r0
 800c082:	4628      	mov	r0, r5
 800c084:	f000 f89a 	bl	800c1bc <_sbrk_r>
 800c088:	3001      	adds	r0, #1
 800c08a:	d1f2      	bne.n	800c072 <sbrk_aligned+0x22>
 800c08c:	e7ef      	b.n	800c06e <sbrk_aligned+0x1e>
 800c08e:	bf00      	nop
 800c090:	20005320 	.word	0x20005320

0800c094 <_malloc_r>:
 800c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c098:	1ccd      	adds	r5, r1, #3
 800c09a:	f025 0503 	bic.w	r5, r5, #3
 800c09e:	3508      	adds	r5, #8
 800c0a0:	2d0c      	cmp	r5, #12
 800c0a2:	bf38      	it	cc
 800c0a4:	250c      	movcc	r5, #12
 800c0a6:	2d00      	cmp	r5, #0
 800c0a8:	4606      	mov	r6, r0
 800c0aa:	db01      	blt.n	800c0b0 <_malloc_r+0x1c>
 800c0ac:	42a9      	cmp	r1, r5
 800c0ae:	d904      	bls.n	800c0ba <_malloc_r+0x26>
 800c0b0:	230c      	movs	r3, #12
 800c0b2:	6033      	str	r3, [r6, #0]
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c190 <_malloc_r+0xfc>
 800c0be:	f000 f869 	bl	800c194 <__malloc_lock>
 800c0c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c0c6:	461c      	mov	r4, r3
 800c0c8:	bb44      	cbnz	r4, 800c11c <_malloc_r+0x88>
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f7ff ffbf 	bl	800c050 <sbrk_aligned>
 800c0d2:	1c43      	adds	r3, r0, #1
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	d158      	bne.n	800c18a <_malloc_r+0xf6>
 800c0d8:	f8d8 4000 	ldr.w	r4, [r8]
 800c0dc:	4627      	mov	r7, r4
 800c0de:	2f00      	cmp	r7, #0
 800c0e0:	d143      	bne.n	800c16a <_malloc_r+0xd6>
 800c0e2:	2c00      	cmp	r4, #0
 800c0e4:	d04b      	beq.n	800c17e <_malloc_r+0xea>
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	4639      	mov	r1, r7
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	eb04 0903 	add.w	r9, r4, r3
 800c0f0:	f000 f864 	bl	800c1bc <_sbrk_r>
 800c0f4:	4581      	cmp	r9, r0
 800c0f6:	d142      	bne.n	800c17e <_malloc_r+0xea>
 800c0f8:	6821      	ldr	r1, [r4, #0]
 800c0fa:	1a6d      	subs	r5, r5, r1
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4630      	mov	r0, r6
 800c100:	f7ff ffa6 	bl	800c050 <sbrk_aligned>
 800c104:	3001      	adds	r0, #1
 800c106:	d03a      	beq.n	800c17e <_malloc_r+0xea>
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	442b      	add	r3, r5
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	f8d8 3000 	ldr.w	r3, [r8]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	bb62      	cbnz	r2, 800c170 <_malloc_r+0xdc>
 800c116:	f8c8 7000 	str.w	r7, [r8]
 800c11a:	e00f      	b.n	800c13c <_malloc_r+0xa8>
 800c11c:	6822      	ldr	r2, [r4, #0]
 800c11e:	1b52      	subs	r2, r2, r5
 800c120:	d420      	bmi.n	800c164 <_malloc_r+0xd0>
 800c122:	2a0b      	cmp	r2, #11
 800c124:	d917      	bls.n	800c156 <_malloc_r+0xc2>
 800c126:	1961      	adds	r1, r4, r5
 800c128:	42a3      	cmp	r3, r4
 800c12a:	6025      	str	r5, [r4, #0]
 800c12c:	bf18      	it	ne
 800c12e:	6059      	strne	r1, [r3, #4]
 800c130:	6863      	ldr	r3, [r4, #4]
 800c132:	bf08      	it	eq
 800c134:	f8c8 1000 	streq.w	r1, [r8]
 800c138:	5162      	str	r2, [r4, r5]
 800c13a:	604b      	str	r3, [r1, #4]
 800c13c:	4630      	mov	r0, r6
 800c13e:	f000 f82f 	bl	800c1a0 <__malloc_unlock>
 800c142:	f104 000b 	add.w	r0, r4, #11
 800c146:	1d23      	adds	r3, r4, #4
 800c148:	f020 0007 	bic.w	r0, r0, #7
 800c14c:	1ac2      	subs	r2, r0, r3
 800c14e:	bf1c      	itt	ne
 800c150:	1a1b      	subne	r3, r3, r0
 800c152:	50a3      	strne	r3, [r4, r2]
 800c154:	e7af      	b.n	800c0b6 <_malloc_r+0x22>
 800c156:	6862      	ldr	r2, [r4, #4]
 800c158:	42a3      	cmp	r3, r4
 800c15a:	bf0c      	ite	eq
 800c15c:	f8c8 2000 	streq.w	r2, [r8]
 800c160:	605a      	strne	r2, [r3, #4]
 800c162:	e7eb      	b.n	800c13c <_malloc_r+0xa8>
 800c164:	4623      	mov	r3, r4
 800c166:	6864      	ldr	r4, [r4, #4]
 800c168:	e7ae      	b.n	800c0c8 <_malloc_r+0x34>
 800c16a:	463c      	mov	r4, r7
 800c16c:	687f      	ldr	r7, [r7, #4]
 800c16e:	e7b6      	b.n	800c0de <_malloc_r+0x4a>
 800c170:	461a      	mov	r2, r3
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	42a3      	cmp	r3, r4
 800c176:	d1fb      	bne.n	800c170 <_malloc_r+0xdc>
 800c178:	2300      	movs	r3, #0
 800c17a:	6053      	str	r3, [r2, #4]
 800c17c:	e7de      	b.n	800c13c <_malloc_r+0xa8>
 800c17e:	230c      	movs	r3, #12
 800c180:	6033      	str	r3, [r6, #0]
 800c182:	4630      	mov	r0, r6
 800c184:	f000 f80c 	bl	800c1a0 <__malloc_unlock>
 800c188:	e794      	b.n	800c0b4 <_malloc_r+0x20>
 800c18a:	6005      	str	r5, [r0, #0]
 800c18c:	e7d6      	b.n	800c13c <_malloc_r+0xa8>
 800c18e:	bf00      	nop
 800c190:	20005324 	.word	0x20005324

0800c194 <__malloc_lock>:
 800c194:	4801      	ldr	r0, [pc, #4]	@ (800c19c <__malloc_lock+0x8>)
 800c196:	f000 b84b 	b.w	800c230 <__retarget_lock_acquire_recursive>
 800c19a:	bf00      	nop
 800c19c:	20005464 	.word	0x20005464

0800c1a0 <__malloc_unlock>:
 800c1a0:	4801      	ldr	r0, [pc, #4]	@ (800c1a8 <__malloc_unlock+0x8>)
 800c1a2:	f000 b846 	b.w	800c232 <__retarget_lock_release_recursive>
 800c1a6:	bf00      	nop
 800c1a8:	20005464 	.word	0x20005464

0800c1ac <memset>:
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memset+0xa>
 800c1b4:	4770      	bx	lr
 800c1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ba:	e7f9      	b.n	800c1b0 <memset+0x4>

0800c1bc <_sbrk_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4d06      	ldr	r5, [pc, #24]	@ (800c1d8 <_sbrk_r+0x1c>)
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	f7f4 fd78 	bl	8000cbc <_sbrk>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_sbrk_r+0x1a>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_sbrk_r+0x1a>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20005460 	.word	0x20005460

0800c1dc <__errno>:
 800c1dc:	4b01      	ldr	r3, [pc, #4]	@ (800c1e4 <__errno+0x8>)
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	4770      	bx	lr
 800c1e2:	bf00      	nop
 800c1e4:	20000030 	.word	0x20000030

0800c1e8 <__libc_init_array>:
 800c1e8:	b570      	push	{r4, r5, r6, lr}
 800c1ea:	4d0d      	ldr	r5, [pc, #52]	@ (800c220 <__libc_init_array+0x38>)
 800c1ec:	4c0d      	ldr	r4, [pc, #52]	@ (800c224 <__libc_init_array+0x3c>)
 800c1ee:	1b64      	subs	r4, r4, r5
 800c1f0:	10a4      	asrs	r4, r4, #2
 800c1f2:	2600      	movs	r6, #0
 800c1f4:	42a6      	cmp	r6, r4
 800c1f6:	d109      	bne.n	800c20c <__libc_init_array+0x24>
 800c1f8:	4d0b      	ldr	r5, [pc, #44]	@ (800c228 <__libc_init_array+0x40>)
 800c1fa:	4c0c      	ldr	r4, [pc, #48]	@ (800c22c <__libc_init_array+0x44>)
 800c1fc:	f000 f872 	bl	800c2e4 <_init>
 800c200:	1b64      	subs	r4, r4, r5
 800c202:	10a4      	asrs	r4, r4, #2
 800c204:	2600      	movs	r6, #0
 800c206:	42a6      	cmp	r6, r4
 800c208:	d105      	bne.n	800c216 <__libc_init_array+0x2e>
 800c20a:	bd70      	pop	{r4, r5, r6, pc}
 800c20c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c210:	4798      	blx	r3
 800c212:	3601      	adds	r6, #1
 800c214:	e7ee      	b.n	800c1f4 <__libc_init_array+0xc>
 800c216:	f855 3b04 	ldr.w	r3, [r5], #4
 800c21a:	4798      	blx	r3
 800c21c:	3601      	adds	r6, #1
 800c21e:	e7f2      	b.n	800c206 <__libc_init_array+0x1e>
 800c220:	0800c374 	.word	0x0800c374
 800c224:	0800c374 	.word	0x0800c374
 800c228:	0800c374 	.word	0x0800c374
 800c22c:	0800c378 	.word	0x0800c378

0800c230 <__retarget_lock_acquire_recursive>:
 800c230:	4770      	bx	lr

0800c232 <__retarget_lock_release_recursive>:
 800c232:	4770      	bx	lr

0800c234 <memcpy>:
 800c234:	440a      	add	r2, r1
 800c236:	4291      	cmp	r1, r2
 800c238:	f100 33ff 	add.w	r3, r0, #4294967295
 800c23c:	d100      	bne.n	800c240 <memcpy+0xc>
 800c23e:	4770      	bx	lr
 800c240:	b510      	push	{r4, lr}
 800c242:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c24a:	4291      	cmp	r1, r2
 800c24c:	d1f9      	bne.n	800c242 <memcpy+0xe>
 800c24e:	bd10      	pop	{r4, pc}

0800c250 <_free_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4605      	mov	r5, r0
 800c254:	2900      	cmp	r1, #0
 800c256:	d041      	beq.n	800c2dc <_free_r+0x8c>
 800c258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c25c:	1f0c      	subs	r4, r1, #4
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bfb8      	it	lt
 800c262:	18e4      	addlt	r4, r4, r3
 800c264:	f7ff ff96 	bl	800c194 <__malloc_lock>
 800c268:	4a1d      	ldr	r2, [pc, #116]	@ (800c2e0 <_free_r+0x90>)
 800c26a:	6813      	ldr	r3, [r2, #0]
 800c26c:	b933      	cbnz	r3, 800c27c <_free_r+0x2c>
 800c26e:	6063      	str	r3, [r4, #4]
 800c270:	6014      	str	r4, [r2, #0]
 800c272:	4628      	mov	r0, r5
 800c274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c278:	f7ff bf92 	b.w	800c1a0 <__malloc_unlock>
 800c27c:	42a3      	cmp	r3, r4
 800c27e:	d908      	bls.n	800c292 <_free_r+0x42>
 800c280:	6820      	ldr	r0, [r4, #0]
 800c282:	1821      	adds	r1, r4, r0
 800c284:	428b      	cmp	r3, r1
 800c286:	bf01      	itttt	eq
 800c288:	6819      	ldreq	r1, [r3, #0]
 800c28a:	685b      	ldreq	r3, [r3, #4]
 800c28c:	1809      	addeq	r1, r1, r0
 800c28e:	6021      	streq	r1, [r4, #0]
 800c290:	e7ed      	b.n	800c26e <_free_r+0x1e>
 800c292:	461a      	mov	r2, r3
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	b10b      	cbz	r3, 800c29c <_free_r+0x4c>
 800c298:	42a3      	cmp	r3, r4
 800c29a:	d9fa      	bls.n	800c292 <_free_r+0x42>
 800c29c:	6811      	ldr	r1, [r2, #0]
 800c29e:	1850      	adds	r0, r2, r1
 800c2a0:	42a0      	cmp	r0, r4
 800c2a2:	d10b      	bne.n	800c2bc <_free_r+0x6c>
 800c2a4:	6820      	ldr	r0, [r4, #0]
 800c2a6:	4401      	add	r1, r0
 800c2a8:	1850      	adds	r0, r2, r1
 800c2aa:	4283      	cmp	r3, r0
 800c2ac:	6011      	str	r1, [r2, #0]
 800c2ae:	d1e0      	bne.n	800c272 <_free_r+0x22>
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	6053      	str	r3, [r2, #4]
 800c2b6:	4408      	add	r0, r1
 800c2b8:	6010      	str	r0, [r2, #0]
 800c2ba:	e7da      	b.n	800c272 <_free_r+0x22>
 800c2bc:	d902      	bls.n	800c2c4 <_free_r+0x74>
 800c2be:	230c      	movs	r3, #12
 800c2c0:	602b      	str	r3, [r5, #0]
 800c2c2:	e7d6      	b.n	800c272 <_free_r+0x22>
 800c2c4:	6820      	ldr	r0, [r4, #0]
 800c2c6:	1821      	adds	r1, r4, r0
 800c2c8:	428b      	cmp	r3, r1
 800c2ca:	bf04      	itt	eq
 800c2cc:	6819      	ldreq	r1, [r3, #0]
 800c2ce:	685b      	ldreq	r3, [r3, #4]
 800c2d0:	6063      	str	r3, [r4, #4]
 800c2d2:	bf04      	itt	eq
 800c2d4:	1809      	addeq	r1, r1, r0
 800c2d6:	6021      	streq	r1, [r4, #0]
 800c2d8:	6054      	str	r4, [r2, #4]
 800c2da:	e7ca      	b.n	800c272 <_free_r+0x22>
 800c2dc:	bd38      	pop	{r3, r4, r5, pc}
 800c2de:	bf00      	nop
 800c2e0:	20005324 	.word	0x20005324

0800c2e4 <_init>:
 800c2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2e6:	bf00      	nop
 800c2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ea:	bc08      	pop	{r3}
 800c2ec:	469e      	mov	lr, r3
 800c2ee:	4770      	bx	lr

0800c2f0 <_fini>:
 800c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f2:	bf00      	nop
 800c2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2f6:	bc08      	pop	{r3}
 800c2f8:	469e      	mov	lr, r3
 800c2fa:	4770      	bx	lr
